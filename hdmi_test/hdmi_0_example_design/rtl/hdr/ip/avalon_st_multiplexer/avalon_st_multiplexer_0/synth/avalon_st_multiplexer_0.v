// avalon_st_multiplexer_0.v

// Generated using ACDS version 18.1 222

`timescale 1 ps / 1 ps
module avalon_st_multiplexer_0 (
		input  wire        clk,               //   clk.clk
		input  wire        reset_n,           // reset.reset_n
		output wire [71:0] out_data,          //   out.data
		output wire        out_valid,         //      .valid
		input  wire        out_ready,         //      .ready
		output wire        out_startofpacket, //      .startofpacket
		output wire        out_endofpacket,   //      .endofpacket
		output wire        out_channel,       //      .channel
		input  wire [71:0] in0_data,          //   in0.data
		input  wire        in0_valid,         //      .valid
		output wire        in0_ready,         //      .ready
		input  wire        in0_startofpacket, //      .startofpacket
		input  wire        in0_endofpacket,   //      .endofpacket
		input  wire [71:0] in1_data,          //   in1.data
		input  wire        in1_valid,         //      .valid
		output wire        in1_ready,         //      .ready
		input  wire        in1_startofpacket, //      .startofpacket
		input  wire        in1_endofpacket    //      .endofpacket
	);

	avalon_st_multiplexer_0_multiplexer_181_oa4enca avalon_st_multiplexer_0 (
		.clk               (clk),               //   input,   width = 1,   clk.clk
		.reset_n           (reset_n),           //   input,   width = 1, reset.reset_n
		.out_data          (out_data),          //  output,  width = 72,   out.data
		.out_valid         (out_valid),         //  output,   width = 1,      .valid
		.out_ready         (out_ready),         //   input,   width = 1,      .ready
		.out_startofpacket (out_startofpacket), //  output,   width = 1,      .startofpacket
		.out_endofpacket   (out_endofpacket),   //  output,   width = 1,      .endofpacket
		.out_channel       (out_channel),       //  output,   width = 1,      .channel
		.in0_data          (in0_data),          //   input,  width = 72,   in0.data
		.in0_valid         (in0_valid),         //   input,   width = 1,      .valid
		.in0_ready         (in0_ready),         //  output,   width = 1,      .ready
		.in0_startofpacket (in0_startofpacket), //   input,   width = 1,      .startofpacket
		.in0_endofpacket   (in0_endofpacket),   //   input,   width = 1,      .endofpacket
		.in1_data          (in1_data),          //   input,  width = 72,   in1.data
		.in1_valid         (in1_valid),         //   input,   width = 1,      .valid
		.in1_ready         (in1_ready),         //  output,   width = 1,      .ready
		.in1_startofpacket (in1_startofpacket), //   input,   width = 1,      .startofpacket
		.in1_endofpacket   (in1_endofpacket)    //   input,   width = 1,      .endofpacket
	);

endmodule
