// nios_altera_mm_interconnect_181_ojsboai.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 222

`timescale 1 ps / 1 ps
module nios_altera_mm_interconnect_181_ojsboai (
		input  wire [18:0] cpu_data_master_address,                                                  //                                            cpu_data_master.address
		output wire        cpu_data_master_waitrequest,                                              //                                                           .waitrequest
		input  wire [3:0]  cpu_data_master_byteenable,                                               //                                                           .byteenable
		input  wire        cpu_data_master_read,                                                     //                                                           .read
		output wire [31:0] cpu_data_master_readdata,                                                 //                                                           .readdata
		input  wire        cpu_data_master_write,                                                    //                                                           .write
		input  wire [31:0] cpu_data_master_writedata,                                                //                                                           .writedata
		input  wire        cpu_data_master_debugaccess,                                              //                                                           .debugaccess
		input  wire [18:0] cpu_instruction_master_address,                                           //                                     cpu_instruction_master.address
		output wire        cpu_instruction_master_waitrequest,                                       //                                                           .waitrequest
		input  wire        cpu_instruction_master_read,                                              //                                                           .read
		output wire [31:0] cpu_instruction_master_readdata,                                          //                                                           .readdata
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,                                    //                              jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,                                      //                                                           .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,                                       //                                                           .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,                                   //                                                           .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,                                  //                                                           .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,                                //                                                           .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,                                 //                                                           .chipselect
		output wire [11:0] tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_address,           //     tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0.address
		output wire        tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_write,             //                                                           .write
		output wire        tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_read,              //                                                           .read
		input  wire [31:0] tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_readdata,          //                                                           .readdata
		output wire [31:0] tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_writedata,         //                                                           .writedata
		output wire [2:0]  tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount,        //                                                           .burstcount
		output wire [3:0]  tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable,        //                                                           .byteenable
		input  wire        tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid,     //                                                           .readdatavalid
		input  wire        tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest,       //                                                           .waitrequest
		output wire        tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_lock,              //                                                           .lock
		output wire        tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess,       //                                                           .debugaccess
		output wire [11:0] tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_address,             //       tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0.address
		output wire        tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_write,               //                                                           .write
		output wire        tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_read,                //                                                           .read
		input  wire [31:0] tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_readdata,            //                                                           .readdata
		output wire [31:0] tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_writedata,           //                                                           .writedata
		output wire [2:0]  tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount,          //                                                           .burstcount
		output wire [3:0]  tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable,          //                                                           .byteenable
		input  wire        tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid,       //                                                           .readdatavalid
		input  wire        tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest,         //                                                           .waitrequest
		output wire        tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_lock,                //                                                           .lock
		output wire        tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess,         //                                                           .debugaccess
		output wire [13:0] tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_address,             //       tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0.address
		output wire        tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_write,               //                                                           .write
		output wire        tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_read,                //                                                           .read
		input  wire [31:0] tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_readdata,            //                                                           .readdata
		output wire [31:0] tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_writedata,           //                                                           .writedata
		output wire [2:0]  tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount,          //                                                           .burstcount
		output wire [3:0]  tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable,          //                                                           .byteenable
		input  wire        tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid,       //                                                           .readdatavalid
		input  wire        tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest,         //                                                           .waitrequest
		output wire        tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_lock,                //                                                           .lock
		output wire        tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess,         //                                                           .debugaccess
		output wire [10:0] edid_ram_slave_translator_avalon_universal_slave_0_address,               //         edid_ram_slave_translator_avalon_universal_slave_0.address
		output wire        edid_ram_slave_translator_avalon_universal_slave_0_write,                 //                                                           .write
		output wire        edid_ram_slave_translator_avalon_universal_slave_0_read,                  //                                                           .read
		input  wire [7:0]  edid_ram_slave_translator_avalon_universal_slave_0_readdata,              //                                                           .readdata
		output wire [7:0]  edid_ram_slave_translator_avalon_universal_slave_0_writedata,             //                                                           .writedata
		output wire [2:0]  edid_ram_slave_translator_avalon_universal_slave_0_burstcount,            //                                                           .burstcount
		output wire [0:0]  edid_ram_slave_translator_avalon_universal_slave_0_byteenable,            //                                                           .byteenable
		input  wire        edid_ram_slave_translator_avalon_universal_slave_0_readdatavalid,         //                                                           .readdatavalid
		input  wire        edid_ram_slave_translator_avalon_universal_slave_0_waitrequest,           //                                                           .waitrequest
		output wire        edid_ram_slave_translator_avalon_universal_slave_0_lock,                  //                                                           .lock
		output wire        edid_ram_slave_translator_avalon_universal_slave_0_debugaccess,           //                                                           .debugaccess
		output wire [4:0]  oc_i2c_master_av_slave_translator_avalon_universal_slave_0_address,       // oc_i2c_master_av_slave_translator_avalon_universal_slave_0.address
		output wire        oc_i2c_master_av_slave_translator_avalon_universal_slave_0_write,         //                                                           .write
		output wire        oc_i2c_master_av_slave_translator_avalon_universal_slave_0_read,          //                                                           .read
		input  wire [31:0] oc_i2c_master_av_slave_translator_avalon_universal_slave_0_readdata,      //                                                           .readdata
		output wire [31:0] oc_i2c_master_av_slave_translator_avalon_universal_slave_0_writedata,     //                                                           .writedata
		output wire [2:0]  oc_i2c_master_av_slave_translator_avalon_universal_slave_0_burstcount,    //                                                           .burstcount
		output wire [3:0]  oc_i2c_master_av_slave_translator_avalon_universal_slave_0_byteenable,    //                                                           .byteenable
		input  wire        oc_i2c_master_av_slave_translator_avalon_universal_slave_0_readdatavalid, //                                                           .readdatavalid
		input  wire        oc_i2c_master_av_slave_translator_avalon_universal_slave_0_waitrequest,   //                                                           .waitrequest
		output wire        oc_i2c_master_av_slave_translator_avalon_universal_slave_0_lock,          //                                                           .lock
		output wire        oc_i2c_master_av_slave_translator_avalon_universal_slave_0_debugaccess,   //                                                           .debugaccess
		output wire [4:0]  oc_i2c_master_ti_avalon_universal_slave_0_address,                        //                  oc_i2c_master_ti_avalon_universal_slave_0.address
		output wire        oc_i2c_master_ti_avalon_universal_slave_0_write,                          //                                                           .write
		output wire        oc_i2c_master_ti_avalon_universal_slave_0_read,                           //                                                           .read
		input  wire [31:0] oc_i2c_master_ti_avalon_universal_slave_0_readdata,                       //                                                           .readdata
		output wire [31:0] oc_i2c_master_ti_avalon_universal_slave_0_writedata,                      //                                                           .writedata
		output wire [2:0]  oc_i2c_master_ti_avalon_universal_slave_0_burstcount,                     //                                                           .burstcount
		output wire [3:0]  oc_i2c_master_ti_avalon_universal_slave_0_byteenable,                     //                                                           .byteenable
		input  wire        oc_i2c_master_ti_avalon_universal_slave_0_readdatavalid,                  //                                                           .readdatavalid
		input  wire        oc_i2c_master_ti_avalon_universal_slave_0_waitrequest,                    //                                                           .waitrequest
		output wire        oc_i2c_master_ti_avalon_universal_slave_0_lock,                           //                                                           .lock
		output wire        oc_i2c_master_ti_avalon_universal_slave_0_debugaccess,                    //                                                           .debugaccess
		output wire [0:0]  sysid_qsys_0_control_slave_address,                                       //                                 sysid_qsys_0_control_slave.address
		input  wire [31:0] sysid_qsys_0_control_slave_readdata,                                      //                                                           .readdata
		output wire [8:0]  cpu_debug_mem_slave_address,                                              //                                        cpu_debug_mem_slave.address
		output wire        cpu_debug_mem_slave_write,                                                //                                                           .write
		output wire        cpu_debug_mem_slave_read,                                                 //                                                           .read
		input  wire [31:0] cpu_debug_mem_slave_readdata,                                             //                                                           .readdata
		output wire [31:0] cpu_debug_mem_slave_writedata,                                            //                                                           .writedata
		output wire [3:0]  cpu_debug_mem_slave_byteenable,                                           //                                                           .byteenable
		input  wire        cpu_debug_mem_slave_waitrequest,                                          //                                                           .waitrequest
		output wire        cpu_debug_mem_slave_debugaccess,                                          //                                                           .debugaccess
		output wire [14:0] cpu_ram_s1_address,                                                       //                                                 cpu_ram_s1.address
		output wire        cpu_ram_s1_write,                                                         //                                                           .write
		input  wire [31:0] cpu_ram_s1_readdata,                                                      //                                                           .readdata
		output wire [31:0] cpu_ram_s1_writedata,                                                     //                                                           .writedata
		output wire [3:0]  cpu_ram_s1_byteenable,                                                    //                                                           .byteenable
		output wire        cpu_ram_s1_chipselect,                                                    //                                                           .chipselect
		output wire        cpu_ram_s1_clken,                                                         //                                                           .clken
		output wire [1:0]  edid_ram_access_pio_s1_address,                                           //                                     edid_ram_access_pio_s1.address
		output wire        edid_ram_access_pio_s1_write,                                             //                                                           .write
		input  wire [31:0] edid_ram_access_pio_s1_readdata,                                          //                                                           .readdata
		output wire [31:0] edid_ram_access_pio_s1_writedata,                                         //                                                           .writedata
		output wire        edid_ram_access_pio_s1_chipselect,                                        //                                                           .chipselect
		output wire [1:0]  measure_pio_s1_address,                                                   //                                             measure_pio_s1.address
		output wire        measure_pio_s1_write,                                                     //                                                           .write
		input  wire [31:0] measure_pio_s1_readdata,                                                  //                                                           .readdata
		output wire [31:0] measure_pio_s1_writedata,                                                 //                                                           .writedata
		output wire        measure_pio_s1_chipselect,                                                //                                                           .chipselect
		output wire [1:0]  tx_os_pio_s1_address,                                                     //                                               tx_os_pio_s1.address
		output wire        tx_os_pio_s1_write,                                                       //                                                           .write
		input  wire [31:0] tx_os_pio_s1_readdata,                                                    //                                                           .readdata
		output wire [31:0] tx_os_pio_s1_writedata,                                                   //                                                           .writedata
		output wire        tx_os_pio_s1_chipselect,                                                  //                                                           .chipselect
		output wire [1:0]  measure_valid_pio_s1_address,                                             //                                       measure_valid_pio_s1.address
		output wire        measure_valid_pio_s1_write,                                               //                                                           .write
		input  wire [31:0] measure_valid_pio_s1_readdata,                                            //                                                           .readdata
		output wire [31:0] measure_valid_pio_s1_writedata,                                           //                                                           .writedata
		output wire        measure_valid_pio_s1_chipselect,                                          //                                                           .chipselect
		output wire [1:0]  tx_rst_pll_pio_s1_address,                                                //                                          tx_rst_pll_pio_s1.address
		output wire        tx_rst_pll_pio_s1_write,                                                  //                                                           .write
		input  wire [31:0] tx_rst_pll_pio_s1_readdata,                                               //                                                           .readdata
		output wire [31:0] tx_rst_pll_pio_s1_writedata,                                              //                                                           .writedata
		output wire        tx_rst_pll_pio_s1_chipselect,                                             //                                                           .chipselect
		output wire [1:0]  tx_rst_xcvr_pio_s1_address,                                               //                                         tx_rst_xcvr_pio_s1.address
		output wire        tx_rst_xcvr_pio_s1_write,                                                 //                                                           .write
		input  wire [31:0] tx_rst_xcvr_pio_s1_readdata,                                              //                                                           .readdata
		output wire [31:0] tx_rst_xcvr_pio_s1_writedata,                                             //                                                           .writedata
		output wire        tx_rst_xcvr_pio_s1_chipselect,                                            //                                                           .chipselect
		output wire [1:0]  tmds_bit_clock_ratio_pio_s1_address,                                      //                                tmds_bit_clock_ratio_pio_s1.address
		output wire        tmds_bit_clock_ratio_pio_s1_write,                                        //                                                           .write
		input  wire [31:0] tmds_bit_clock_ratio_pio_s1_readdata,                                     //                                                           .readdata
		output wire [31:0] tmds_bit_clock_ratio_pio_s1_writedata,                                    //                                                           .writedata
		output wire        tmds_bit_clock_ratio_pio_s1_chipselect,                                   //                                                           .chipselect
		output wire [1:0]  tx_iopll_waitrequest_pio_s1_address,                                      //                                tx_iopll_waitrequest_pio_s1.address
		output wire        tx_iopll_waitrequest_pio_s1_write,                                        //                                                           .write
		input  wire [31:0] tx_iopll_waitrequest_pio_s1_readdata,                                     //                                                           .readdata
		output wire [31:0] tx_iopll_waitrequest_pio_s1_writedata,                                    //                                                           .writedata
		output wire        tx_iopll_waitrequest_pio_s1_chipselect,                                   //                                                           .chipselect
		output wire [1:0]  tx_pll_waitrequest_pio_s1_address,                                        //                                  tx_pll_waitrequest_pio_s1.address
		output wire        tx_pll_waitrequest_pio_s1_write,                                          //                                                           .write
		input  wire [31:0] tx_pll_waitrequest_pio_s1_readdata,                                       //                                                           .readdata
		output wire [31:0] tx_pll_waitrequest_pio_s1_writedata,                                      //                                                           .writedata
		output wire        tx_pll_waitrequest_pio_s1_chipselect,                                     //                                                           .chipselect
		output wire [1:0]  tx_pma_ch_s1_address,                                                     //                                               tx_pma_ch_s1.address
		output wire        tx_pma_ch_s1_write,                                                       //                                                           .write
		input  wire [31:0] tx_pma_ch_s1_readdata,                                                    //                                                           .readdata
		output wire [31:0] tx_pma_ch_s1_writedata,                                                   //                                                           .writedata
		output wire        tx_pma_ch_s1_chipselect,                                                  //                                                           .chipselect
		output wire [1:0]  tx_pma_cal_busy_pio_s1_address,                                           //                                     tx_pma_cal_busy_pio_s1.address
		output wire        tx_pma_cal_busy_pio_s1_write,                                             //                                                           .write
		input  wire [31:0] tx_pma_cal_busy_pio_s1_readdata,                                          //                                                           .readdata
		output wire [31:0] tx_pma_cal_busy_pio_s1_writedata,                                         //                                                           .writedata
		output wire        tx_pma_cal_busy_pio_s1_chipselect,                                        //                                                           .chipselect
		output wire [1:0]  tx_rcfg_en_pio_s1_address,                                                //                                          tx_rcfg_en_pio_s1.address
		output wire        tx_rcfg_en_pio_s1_write,                                                  //                                                           .write
		input  wire [31:0] tx_rcfg_en_pio_s1_readdata,                                               //                                                           .readdata
		output wire [31:0] tx_rcfg_en_pio_s1_writedata,                                              //                                                           .writedata
		output wire        tx_rcfg_en_pio_s1_chipselect,                                             //                                                           .chipselect
		output wire [1:0]  tx_pma_waitrequest_pio_s1_address,                                        //                                  tx_pma_waitrequest_pio_s1.address
		output wire        tx_pma_waitrequest_pio_s1_write,                                          //                                                           .write
		input  wire [31:0] tx_pma_waitrequest_pio_s1_readdata,                                       //                                                           .readdata
		output wire [31:0] tx_pma_waitrequest_pio_s1_writedata,                                      //                                                           .writedata
		output wire        tx_pma_waitrequest_pio_s1_chipselect,                                     //                                                           .chipselect
		output wire [2:0]  wd_timer_s1_address,                                                      //                                                wd_timer_s1.address
		output wire        wd_timer_s1_write,                                                        //                                                           .write
		input  wire [15:0] wd_timer_s1_readdata,                                                     //                                                           .readdata
		output wire [15:0] wd_timer_s1_writedata,                                                    //                                                           .writedata
		output wire        wd_timer_s1_chipselect,                                                   //                                                           .chipselect
		output wire [1:0]  tx_hpd_req_pio_s1_address,                                                //                                          tx_hpd_req_pio_s1.address
		output wire        tx_hpd_req_pio_s1_write,                                                  //                                                           .write
		input  wire [31:0] tx_hpd_req_pio_s1_readdata,                                               //                                                           .readdata
		output wire [31:0] tx_hpd_req_pio_s1_writedata,                                              //                                                           .writedata
		output wire        tx_hpd_req_pio_s1_chipselect,                                             //                                                           .chipselect
		output wire [1:0]  tx_hpd_ack_pio_s1_address,                                                //                                          tx_hpd_ack_pio_s1.address
		output wire        tx_hpd_ack_pio_s1_write,                                                  //                                                           .write
		input  wire [31:0] tx_hpd_ack_pio_s1_readdata,                                               //                                                           .readdata
		output wire [31:0] tx_hpd_ack_pio_s1_writedata,                                              //                                                           .writedata
		output wire        tx_hpd_ack_pio_s1_chipselect,                                             //                                                           .chipselect
		output wire [1:0]  color_depth_pio_s1_address,                                               //                                         color_depth_pio_s1.address
		output wire        color_depth_pio_s1_write,                                                 //                                                           .write
		input  wire [31:0] color_depth_pio_s1_readdata,                                              //                                                           .readdata
		output wire [31:0] color_depth_pio_s1_writedata,                                             //                                                           .writedata
		output wire        color_depth_pio_s1_chipselect,                                            //                                                           .chipselect
		input  wire        cpu_reset_reset_bridge_in_reset_reset,                                    //                            cpu_reset_reset_bridge_in_reset.reset
		input  wire        jtag_uart_0_reset_reset_bridge_in_reset_reset,                            //                    jtag_uart_0_reset_reset_bridge_in_reset.reset
		input  wire        cpu_clk_clk_clk                                                           //                                                cpu_clk_clk.clk
	);

	wire          cpu_data_master_translator_avalon_universal_master_0_waitrequest;                            // cpu_data_master_agent:av_waitrequest -> cpu_data_master_translator:uav_waitrequest
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_readdata;                               // cpu_data_master_agent:av_readdata -> cpu_data_master_translator:uav_readdata
	wire          cpu_data_master_translator_avalon_universal_master_0_debugaccess;                            // cpu_data_master_translator:uav_debugaccess -> cpu_data_master_agent:av_debugaccess
	wire   [18:0] cpu_data_master_translator_avalon_universal_master_0_address;                                // cpu_data_master_translator:uav_address -> cpu_data_master_agent:av_address
	wire          cpu_data_master_translator_avalon_universal_master_0_read;                                   // cpu_data_master_translator:uav_read -> cpu_data_master_agent:av_read
	wire    [3:0] cpu_data_master_translator_avalon_universal_master_0_byteenable;                             // cpu_data_master_translator:uav_byteenable -> cpu_data_master_agent:av_byteenable
	wire          cpu_data_master_translator_avalon_universal_master_0_readdatavalid;                          // cpu_data_master_agent:av_readdatavalid -> cpu_data_master_translator:uav_readdatavalid
	wire          cpu_data_master_translator_avalon_universal_master_0_lock;                                   // cpu_data_master_translator:uav_lock -> cpu_data_master_agent:av_lock
	wire          cpu_data_master_translator_avalon_universal_master_0_write;                                  // cpu_data_master_translator:uav_write -> cpu_data_master_agent:av_write
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_writedata;                              // cpu_data_master_translator:uav_writedata -> cpu_data_master_agent:av_writedata
	wire    [2:0] cpu_data_master_translator_avalon_universal_master_0_burstcount;                             // cpu_data_master_translator:uav_burstcount -> cpu_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                           // rsp_mux:src_valid -> cpu_data_master_agent:rp_valid
	wire  [107:0] rsp_mux_src_data;                                                                            // rsp_mux:src_data -> cpu_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                           // cpu_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [26:0] rsp_mux_src_channel;                                                                         // rsp_mux:src_channel -> cpu_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                                   // rsp_mux:src_startofpacket -> cpu_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                     // rsp_mux:src_endofpacket -> cpu_data_master_agent:rp_endofpacket
	wire          cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;                     // cpu_instruction_master_agent:av_waitrequest -> cpu_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_readdata;                        // cpu_instruction_master_agent:av_readdata -> cpu_instruction_master_translator:uav_readdata
	wire          cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;                     // cpu_instruction_master_translator:uav_debugaccess -> cpu_instruction_master_agent:av_debugaccess
	wire   [18:0] cpu_instruction_master_translator_avalon_universal_master_0_address;                         // cpu_instruction_master_translator:uav_address -> cpu_instruction_master_agent:av_address
	wire          cpu_instruction_master_translator_avalon_universal_master_0_read;                            // cpu_instruction_master_translator:uav_read -> cpu_instruction_master_agent:av_read
	wire    [3:0] cpu_instruction_master_translator_avalon_universal_master_0_byteenable;                      // cpu_instruction_master_translator:uav_byteenable -> cpu_instruction_master_agent:av_byteenable
	wire          cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid;                   // cpu_instruction_master_agent:av_readdatavalid -> cpu_instruction_master_translator:uav_readdatavalid
	wire          cpu_instruction_master_translator_avalon_universal_master_0_lock;                            // cpu_instruction_master_translator:uav_lock -> cpu_instruction_master_agent:av_lock
	wire          cpu_instruction_master_translator_avalon_universal_master_0_write;                           // cpu_instruction_master_translator:uav_write -> cpu_instruction_master_agent:av_write
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_writedata;                       // cpu_instruction_master_translator:uav_writedata -> cpu_instruction_master_agent:av_writedata
	wire    [2:0] cpu_instruction_master_translator_avalon_universal_master_0_burstcount;                      // cpu_instruction_master_translator:uav_burstcount -> cpu_instruction_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                                       // rsp_mux_001:src_valid -> cpu_instruction_master_agent:rp_valid
	wire  [107:0] rsp_mux_001_src_data;                                                                        // rsp_mux_001:src_data -> cpu_instruction_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                                       // cpu_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [26:0] rsp_mux_001_src_channel;                                                                     // rsp_mux_001:src_channel -> cpu_instruction_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                               // rsp_mux_001:src_startofpacket -> cpu_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                 // rsp_mux_001:src_endofpacket -> cpu_instruction_master_agent:rp_endofpacket
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                                             // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                                          // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                                          // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [18:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                                              // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                                           // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                                                 // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                                        // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                                                 // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                                            // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                                                // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                                           // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                                         // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [108:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                                          // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                                         // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;                                 // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                                   // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                      // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [108:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                                       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                      // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                              // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                    // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                                     // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                    // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                                           // cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [107:0] cmd_mux_src_data;                                                                            // cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                           // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [26:0] cmd_mux_src_channel;                                                                         // cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                                   // cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                     // cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_readdata;                    // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_readdata -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_waitrequest;                 // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_waitrequest -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_debugaccess;                 // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_debugaccess -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [18:0] tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_address;                     // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_address -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_byteenable;                  // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_byteenable -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_byteenable
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_read;                        // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_read -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_read
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_readdatavalid;               // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_readdatavalid -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_lock;                        // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_lock -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_writedata;                   // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_writedata -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_writedata
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_write;                       // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_write -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_write
	wire    [2:0] tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_burstcount;                  // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_burstcount -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_burstcount
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_valid;                // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_source_valid -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [108:0] tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_data;                 // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_source_data -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_ready;                // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;        // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;          // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;             // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [108:0] tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;              // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;             // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_sink_ready -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;     // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;       // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;           // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;            // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;           // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                                       // cmd_mux_001:src_valid -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:cp_valid
	wire  [107:0] cmd_mux_001_src_data;                                                                        // cmd_mux_001:src_data -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                       // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [26:0] cmd_mux_001_src_channel;                                                                     // cmd_mux_001:src_channel -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                               // cmd_mux_001:src_startofpacket -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                 // cmd_mux_001:src_endofpacket -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire   [31:0] tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_readdata;                      // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_readdata -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_waitrequest;                   // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_waitrequest -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_debugaccess;                   // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_debugaccess -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [18:0] tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_address;                       // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_address -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_byteenable;                    // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_byteenable -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_byteenable
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_read;                          // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_read -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_read
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                 // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_readdatavalid -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_lock;                          // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_lock -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_writedata;                     // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_writedata -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_writedata
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_write;                         // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_write -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_write
	wire    [2:0] tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_burstcount;                    // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_burstcount -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_burstcount
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_valid;                  // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_source_valid -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [108:0] tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_data;                   // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_source_data -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_ready;                  // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;          // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;            // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;               // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [108:0] tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;               // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_sink_ready -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;       // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;         // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;             // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;              // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;             // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                                                       // cmd_mux_002:src_valid -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:cp_valid
	wire  [107:0] cmd_mux_002_src_data;                                                                        // cmd_mux_002:src_data -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                       // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [26:0] cmd_mux_002_src_channel;                                                                     // cmd_mux_002:src_channel -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                               // cmd_mux_002:src_startofpacket -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                 // cmd_mux_002:src_endofpacket -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire   [31:0] tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_readdata;                      // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_readdata -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_waitrequest;                   // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_waitrequest -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_debugaccess;                   // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_debugaccess -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [18:0] tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_address;                       // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_address -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_byteenable;                    // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_byteenable -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_byteenable
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_read;                          // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_read -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_read
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                 // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_readdatavalid -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_lock;                          // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_lock -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_writedata;                     // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_writedata -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_writedata
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_write;                         // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_write -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_write
	wire    [2:0] tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_burstcount;                    // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:m0_burstcount -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_translator:uav_burstcount
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_valid;                  // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_source_valid -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [108:0] tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_data;                   // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_source_data -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_ready;                  // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;          // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;            // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;               // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [108:0] tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;               // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_sink_ready -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;       // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;         // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;             // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;              // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;             // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                                                       // cmd_mux_003:src_valid -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:cp_valid
	wire  [107:0] cmd_mux_003_src_data;                                                                        // cmd_mux_003:src_data -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                       // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [26:0] cmd_mux_003_src_channel;                                                                     // cmd_mux_003:src_channel -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                               // cmd_mux_003:src_startofpacket -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                 // cmd_mux_003:src_endofpacket -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire    [7:0] edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_readdata;                        // edid_ram_slave_translator_avalon_universal_slave_0_translator:uav_readdata -> edid_ram_slave_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest;                     // edid_ram_slave_translator_avalon_universal_slave_0_translator:uav_waitrequest -> edid_ram_slave_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess;                     // edid_ram_slave_translator_avalon_universal_slave_0_agent:m0_debugaccess -> edid_ram_slave_translator_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [18:0] edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_address;                         // edid_ram_slave_translator_avalon_universal_slave_0_agent:m0_address -> edid_ram_slave_translator_avalon_universal_slave_0_translator:uav_address
	wire    [0:0] edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_byteenable;                      // edid_ram_slave_translator_avalon_universal_slave_0_agent:m0_byteenable -> edid_ram_slave_translator_avalon_universal_slave_0_translator:uav_byteenable
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_read;                            // edid_ram_slave_translator_avalon_universal_slave_0_agent:m0_read -> edid_ram_slave_translator_avalon_universal_slave_0_translator:uav_read
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                   // edid_ram_slave_translator_avalon_universal_slave_0_translator:uav_readdatavalid -> edid_ram_slave_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_lock;                            // edid_ram_slave_translator_avalon_universal_slave_0_agent:m0_lock -> edid_ram_slave_translator_avalon_universal_slave_0_translator:uav_lock
	wire    [7:0] edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_writedata;                       // edid_ram_slave_translator_avalon_universal_slave_0_agent:m0_writedata -> edid_ram_slave_translator_avalon_universal_slave_0_translator:uav_writedata
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_write;                           // edid_ram_slave_translator_avalon_universal_slave_0_agent:m0_write -> edid_ram_slave_translator_avalon_universal_slave_0_translator:uav_write
	wire    [2:0] edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_burstcount;                      // edid_ram_slave_translator_avalon_universal_slave_0_agent:m0_burstcount -> edid_ram_slave_translator_avalon_universal_slave_0_translator:uav_burstcount
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_rf_source_valid;                    // edid_ram_slave_translator_avalon_universal_slave_0_agent:rf_source_valid -> edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire   [81:0] edid_ram_slave_translator_avalon_universal_slave_0_agent_rf_source_data;                     // edid_ram_slave_translator_avalon_universal_slave_0_agent:rf_source_data -> edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_rf_source_ready;                    // edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> edid_ram_slave_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;            // edid_ram_slave_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;              // edid_ram_slave_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                 // edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> edid_ram_slave_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire   [81:0] edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                  // edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> edid_ram_slave_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                 // edid_ram_slave_translator_avalon_universal_slave_0_agent:rf_sink_ready -> edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;         // edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> edid_ram_slave_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;           // edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> edid_ram_slave_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;               // edid_ram_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire    [9:0] edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                // edid_ram_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;               // edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> edid_ram_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;               // edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> edid_ram_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire    [9:0] edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                // edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> edid_ram_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;               // edid_ram_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire   [31:0] oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_readdata;                // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_translator:uav_readdata -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_translator:uav_waitrequest -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:m0_debugaccess -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [18:0] oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_address;                 // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:m0_address -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_byteenable;              // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:m0_byteenable -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_translator:uav_byteenable
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_read;                    // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:m0_read -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_translator:uav_read
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_translator:uav_readdatavalid -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_lock;                    // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:m0_lock -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_writedata;               // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:m0_writedata -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_translator:uav_writedata
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_write;                   // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:m0_write -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_translator:uav_write
	wire    [2:0] oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_burstcount;              // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:m0_burstcount -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_translator:uav_burstcount
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rf_source_valid;            // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rf_source_valid -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [108:0] oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rf_source_data;             // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rf_source_data -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rf_source_ready;            // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [108:0] oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rf_sink_ready -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_valid;                                                                       // cmd_mux_005:src_valid -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:cp_valid
	wire  [107:0] cmd_mux_005_src_data;                                                                        // cmd_mux_005:src_data -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                       // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [26:0] cmd_mux_005_src_channel;                                                                     // cmd_mux_005:src_channel -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                               // cmd_mux_005:src_startofpacket -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                 // cmd_mux_005:src_endofpacket -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire   [31:0] oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_readdata;                                 // oc_i2c_master_ti_avalon_universal_slave_0_translator:uav_readdata -> oc_i2c_master_ti_avalon_universal_slave_0_agent:m0_readdata
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_waitrequest;                              // oc_i2c_master_ti_avalon_universal_slave_0_translator:uav_waitrequest -> oc_i2c_master_ti_avalon_universal_slave_0_agent:m0_waitrequest
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_debugaccess;                              // oc_i2c_master_ti_avalon_universal_slave_0_agent:m0_debugaccess -> oc_i2c_master_ti_avalon_universal_slave_0_translator:uav_debugaccess
	wire   [18:0] oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_address;                                  // oc_i2c_master_ti_avalon_universal_slave_0_agent:m0_address -> oc_i2c_master_ti_avalon_universal_slave_0_translator:uav_address
	wire    [3:0] oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_byteenable;                               // oc_i2c_master_ti_avalon_universal_slave_0_agent:m0_byteenable -> oc_i2c_master_ti_avalon_universal_slave_0_translator:uav_byteenable
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_read;                                     // oc_i2c_master_ti_avalon_universal_slave_0_agent:m0_read -> oc_i2c_master_ti_avalon_universal_slave_0_translator:uav_read
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_readdatavalid;                            // oc_i2c_master_ti_avalon_universal_slave_0_translator:uav_readdatavalid -> oc_i2c_master_ti_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_lock;                                     // oc_i2c_master_ti_avalon_universal_slave_0_agent:m0_lock -> oc_i2c_master_ti_avalon_universal_slave_0_translator:uav_lock
	wire   [31:0] oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_writedata;                                // oc_i2c_master_ti_avalon_universal_slave_0_agent:m0_writedata -> oc_i2c_master_ti_avalon_universal_slave_0_translator:uav_writedata
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_write;                                    // oc_i2c_master_ti_avalon_universal_slave_0_agent:m0_write -> oc_i2c_master_ti_avalon_universal_slave_0_translator:uav_write
	wire    [2:0] oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_burstcount;                               // oc_i2c_master_ti_avalon_universal_slave_0_agent:m0_burstcount -> oc_i2c_master_ti_avalon_universal_slave_0_translator:uav_burstcount
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_rf_source_valid;                             // oc_i2c_master_ti_avalon_universal_slave_0_agent:rf_source_valid -> oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire  [108:0] oc_i2c_master_ti_avalon_universal_slave_0_agent_rf_source_data;                              // oc_i2c_master_ti_avalon_universal_slave_0_agent:rf_source_data -> oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_rf_source_ready;                             // oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> oc_i2c_master_ti_avalon_universal_slave_0_agent:rf_source_ready
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_rf_source_startofpacket;                     // oc_i2c_master_ti_avalon_universal_slave_0_agent:rf_source_startofpacket -> oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_rf_source_endofpacket;                       // oc_i2c_master_ti_avalon_universal_slave_0_agent:rf_source_endofpacket -> oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                          // oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> oc_i2c_master_ti_avalon_universal_slave_0_agent:rf_sink_valid
	wire  [108:0] oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo_out_data;                           // oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo:out_data -> oc_i2c_master_ti_avalon_universal_slave_0_agent:rf_sink_data
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                          // oc_i2c_master_ti_avalon_universal_slave_0_agent:rf_sink_ready -> oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                  // oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> oc_i2c_master_ti_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                    // oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> oc_i2c_master_ti_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                        // oc_i2c_master_ti_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> oc_i2c_master_ti_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] oc_i2c_master_ti_avalon_universal_slave_0_agent_rdata_fifo_src_data;                         // oc_i2c_master_ti_avalon_universal_slave_0_agent:rdata_fifo_src_data -> oc_i2c_master_ti_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                        // oc_i2c_master_ti_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> oc_i2c_master_ti_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_valid;                                                                       // cmd_mux_006:src_valid -> oc_i2c_master_ti_avalon_universal_slave_0_agent:cp_valid
	wire  [107:0] cmd_mux_006_src_data;                                                                        // cmd_mux_006:src_data -> oc_i2c_master_ti_avalon_universal_slave_0_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                       // oc_i2c_master_ti_avalon_universal_slave_0_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [26:0] cmd_mux_006_src_channel;                                                                     // cmd_mux_006:src_channel -> oc_i2c_master_ti_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                               // cmd_mux_006:src_startofpacket -> oc_i2c_master_ti_avalon_universal_slave_0_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                 // cmd_mux_006:src_endofpacket -> oc_i2c_master_ti_avalon_universal_slave_0_agent:cp_endofpacket
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_readdata;                                                // sysid_qsys_0_control_slave_translator:uav_readdata -> sysid_qsys_0_control_slave_agent:m0_readdata
	wire          sysid_qsys_0_control_slave_agent_m0_waitrequest;                                             // sysid_qsys_0_control_slave_translator:uav_waitrequest -> sysid_qsys_0_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_0_control_slave_agent_m0_debugaccess;                                             // sysid_qsys_0_control_slave_agent:m0_debugaccess -> sysid_qsys_0_control_slave_translator:uav_debugaccess
	wire   [18:0] sysid_qsys_0_control_slave_agent_m0_address;                                                 // sysid_qsys_0_control_slave_agent:m0_address -> sysid_qsys_0_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_0_control_slave_agent_m0_byteenable;                                              // sysid_qsys_0_control_slave_agent:m0_byteenable -> sysid_qsys_0_control_slave_translator:uav_byteenable
	wire          sysid_qsys_0_control_slave_agent_m0_read;                                                    // sysid_qsys_0_control_slave_agent:m0_read -> sysid_qsys_0_control_slave_translator:uav_read
	wire          sysid_qsys_0_control_slave_agent_m0_readdatavalid;                                           // sysid_qsys_0_control_slave_translator:uav_readdatavalid -> sysid_qsys_0_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_0_control_slave_agent_m0_lock;                                                    // sysid_qsys_0_control_slave_agent:m0_lock -> sysid_qsys_0_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_writedata;                                               // sysid_qsys_0_control_slave_agent:m0_writedata -> sysid_qsys_0_control_slave_translator:uav_writedata
	wire          sysid_qsys_0_control_slave_agent_m0_write;                                                   // sysid_qsys_0_control_slave_agent:m0_write -> sysid_qsys_0_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_0_control_slave_agent_m0_burstcount;                                              // sysid_qsys_0_control_slave_agent:m0_burstcount -> sysid_qsys_0_control_slave_translator:uav_burstcount
	wire          sysid_qsys_0_control_slave_agent_rf_source_valid;                                            // sysid_qsys_0_control_slave_agent:rf_source_valid -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_valid
	wire  [108:0] sysid_qsys_0_control_slave_agent_rf_source_data;                                             // sysid_qsys_0_control_slave_agent:rf_source_data -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rf_source_ready;                                            // sysid_qsys_0_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rf_source_ready
	wire          sysid_qsys_0_control_slave_agent_rf_source_startofpacket;                                    // sysid_qsys_0_control_slave_agent:rf_source_startofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rf_source_endofpacket;                                      // sysid_qsys_0_control_slave_agent:rf_source_endofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid;                                         // sysid_qsys_0_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rf_sink_valid
	wire  [108:0] sysid_qsys_0_control_slave_agent_rsp_fifo_out_data;                                          // sysid_qsys_0_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_0_control_slave_agent:rf_sink_data
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready;                                         // sysid_qsys_0_control_slave_agent:rf_sink_ready -> sysid_qsys_0_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket;                                 // sysid_qsys_0_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket;                                   // sysid_qsys_0_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid;                                       // sysid_qsys_0_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_src_data;                                        // sysid_qsys_0_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready;                                       // sysid_qsys_0_control_slave_agent:rdata_fifo_sink_ready -> sysid_qsys_0_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_007_src_valid;                                                                       // cmd_mux_007:src_valid -> sysid_qsys_0_control_slave_agent:cp_valid
	wire  [107:0] cmd_mux_007_src_data;                                                                        // cmd_mux_007:src_data -> sysid_qsys_0_control_slave_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                       // sysid_qsys_0_control_slave_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [26:0] cmd_mux_007_src_channel;                                                                     // cmd_mux_007:src_channel -> sysid_qsys_0_control_slave_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                               // cmd_mux_007:src_startofpacket -> sysid_qsys_0_control_slave_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                 // cmd_mux_007:src_endofpacket -> sysid_qsys_0_control_slave_agent:cp_endofpacket
	wire   [31:0] cpu_debug_mem_slave_agent_m0_readdata;                                                       // cpu_debug_mem_slave_translator:uav_readdata -> cpu_debug_mem_slave_agent:m0_readdata
	wire          cpu_debug_mem_slave_agent_m0_waitrequest;                                                    // cpu_debug_mem_slave_translator:uav_waitrequest -> cpu_debug_mem_slave_agent:m0_waitrequest
	wire          cpu_debug_mem_slave_agent_m0_debugaccess;                                                    // cpu_debug_mem_slave_agent:m0_debugaccess -> cpu_debug_mem_slave_translator:uav_debugaccess
	wire   [18:0] cpu_debug_mem_slave_agent_m0_address;                                                        // cpu_debug_mem_slave_agent:m0_address -> cpu_debug_mem_slave_translator:uav_address
	wire    [3:0] cpu_debug_mem_slave_agent_m0_byteenable;                                                     // cpu_debug_mem_slave_agent:m0_byteenable -> cpu_debug_mem_slave_translator:uav_byteenable
	wire          cpu_debug_mem_slave_agent_m0_read;                                                           // cpu_debug_mem_slave_agent:m0_read -> cpu_debug_mem_slave_translator:uav_read
	wire          cpu_debug_mem_slave_agent_m0_readdatavalid;                                                  // cpu_debug_mem_slave_translator:uav_readdatavalid -> cpu_debug_mem_slave_agent:m0_readdatavalid
	wire          cpu_debug_mem_slave_agent_m0_lock;                                                           // cpu_debug_mem_slave_agent:m0_lock -> cpu_debug_mem_slave_translator:uav_lock
	wire   [31:0] cpu_debug_mem_slave_agent_m0_writedata;                                                      // cpu_debug_mem_slave_agent:m0_writedata -> cpu_debug_mem_slave_translator:uav_writedata
	wire          cpu_debug_mem_slave_agent_m0_write;                                                          // cpu_debug_mem_slave_agent:m0_write -> cpu_debug_mem_slave_translator:uav_write
	wire    [2:0] cpu_debug_mem_slave_agent_m0_burstcount;                                                     // cpu_debug_mem_slave_agent:m0_burstcount -> cpu_debug_mem_slave_translator:uav_burstcount
	wire          cpu_debug_mem_slave_agent_rf_source_valid;                                                   // cpu_debug_mem_slave_agent:rf_source_valid -> cpu_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [108:0] cpu_debug_mem_slave_agent_rf_source_data;                                                    // cpu_debug_mem_slave_agent:rf_source_data -> cpu_debug_mem_slave_agent_rsp_fifo:in_data
	wire          cpu_debug_mem_slave_agent_rf_source_ready;                                                   // cpu_debug_mem_slave_agent_rsp_fifo:in_ready -> cpu_debug_mem_slave_agent:rf_source_ready
	wire          cpu_debug_mem_slave_agent_rf_source_startofpacket;                                           // cpu_debug_mem_slave_agent:rf_source_startofpacket -> cpu_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          cpu_debug_mem_slave_agent_rf_source_endofpacket;                                             // cpu_debug_mem_slave_agent:rf_source_endofpacket -> cpu_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_valid;                                                // cpu_debug_mem_slave_agent_rsp_fifo:out_valid -> cpu_debug_mem_slave_agent:rf_sink_valid
	wire  [108:0] cpu_debug_mem_slave_agent_rsp_fifo_out_data;                                                 // cpu_debug_mem_slave_agent_rsp_fifo:out_data -> cpu_debug_mem_slave_agent:rf_sink_data
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_ready;                                                // cpu_debug_mem_slave_agent:rf_sink_ready -> cpu_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                                        // cpu_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> cpu_debug_mem_slave_agent:rf_sink_startofpacket
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                                          // cpu_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> cpu_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cpu_debug_mem_slave_agent_rdata_fifo_src_valid;                                              // cpu_debug_mem_slave_agent:rdata_fifo_src_valid -> cpu_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] cpu_debug_mem_slave_agent_rdata_fifo_src_data;                                               // cpu_debug_mem_slave_agent:rdata_fifo_src_data -> cpu_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          cpu_debug_mem_slave_agent_rdata_fifo_src_ready;                                              // cpu_debug_mem_slave_agent:rdata_fifo_sink_ready -> cpu_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_008_src_valid;                                                                       // cmd_mux_008:src_valid -> cpu_debug_mem_slave_agent:cp_valid
	wire  [107:0] cmd_mux_008_src_data;                                                                        // cmd_mux_008:src_data -> cpu_debug_mem_slave_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                       // cpu_debug_mem_slave_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [26:0] cmd_mux_008_src_channel;                                                                     // cmd_mux_008:src_channel -> cpu_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                               // cmd_mux_008:src_startofpacket -> cpu_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                                 // cmd_mux_008:src_endofpacket -> cpu_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] cpu_ram_s1_agent_m0_readdata;                                                                // cpu_ram_s1_translator:uav_readdata -> cpu_ram_s1_agent:m0_readdata
	wire          cpu_ram_s1_agent_m0_waitrequest;                                                             // cpu_ram_s1_translator:uav_waitrequest -> cpu_ram_s1_agent:m0_waitrequest
	wire          cpu_ram_s1_agent_m0_debugaccess;                                                             // cpu_ram_s1_agent:m0_debugaccess -> cpu_ram_s1_translator:uav_debugaccess
	wire   [18:0] cpu_ram_s1_agent_m0_address;                                                                 // cpu_ram_s1_agent:m0_address -> cpu_ram_s1_translator:uav_address
	wire    [3:0] cpu_ram_s1_agent_m0_byteenable;                                                              // cpu_ram_s1_agent:m0_byteenable -> cpu_ram_s1_translator:uav_byteenable
	wire          cpu_ram_s1_agent_m0_read;                                                                    // cpu_ram_s1_agent:m0_read -> cpu_ram_s1_translator:uav_read
	wire          cpu_ram_s1_agent_m0_readdatavalid;                                                           // cpu_ram_s1_translator:uav_readdatavalid -> cpu_ram_s1_agent:m0_readdatavalid
	wire          cpu_ram_s1_agent_m0_lock;                                                                    // cpu_ram_s1_agent:m0_lock -> cpu_ram_s1_translator:uav_lock
	wire   [31:0] cpu_ram_s1_agent_m0_writedata;                                                               // cpu_ram_s1_agent:m0_writedata -> cpu_ram_s1_translator:uav_writedata
	wire          cpu_ram_s1_agent_m0_write;                                                                   // cpu_ram_s1_agent:m0_write -> cpu_ram_s1_translator:uav_write
	wire    [2:0] cpu_ram_s1_agent_m0_burstcount;                                                              // cpu_ram_s1_agent:m0_burstcount -> cpu_ram_s1_translator:uav_burstcount
	wire          cpu_ram_s1_agent_rf_source_valid;                                                            // cpu_ram_s1_agent:rf_source_valid -> cpu_ram_s1_agent_rsp_fifo:in_valid
	wire  [108:0] cpu_ram_s1_agent_rf_source_data;                                                             // cpu_ram_s1_agent:rf_source_data -> cpu_ram_s1_agent_rsp_fifo:in_data
	wire          cpu_ram_s1_agent_rf_source_ready;                                                            // cpu_ram_s1_agent_rsp_fifo:in_ready -> cpu_ram_s1_agent:rf_source_ready
	wire          cpu_ram_s1_agent_rf_source_startofpacket;                                                    // cpu_ram_s1_agent:rf_source_startofpacket -> cpu_ram_s1_agent_rsp_fifo:in_startofpacket
	wire          cpu_ram_s1_agent_rf_source_endofpacket;                                                      // cpu_ram_s1_agent:rf_source_endofpacket -> cpu_ram_s1_agent_rsp_fifo:in_endofpacket
	wire          cpu_ram_s1_agent_rsp_fifo_out_valid;                                                         // cpu_ram_s1_agent_rsp_fifo:out_valid -> cpu_ram_s1_agent:rf_sink_valid
	wire  [108:0] cpu_ram_s1_agent_rsp_fifo_out_data;                                                          // cpu_ram_s1_agent_rsp_fifo:out_data -> cpu_ram_s1_agent:rf_sink_data
	wire          cpu_ram_s1_agent_rsp_fifo_out_ready;                                                         // cpu_ram_s1_agent:rf_sink_ready -> cpu_ram_s1_agent_rsp_fifo:out_ready
	wire          cpu_ram_s1_agent_rsp_fifo_out_startofpacket;                                                 // cpu_ram_s1_agent_rsp_fifo:out_startofpacket -> cpu_ram_s1_agent:rf_sink_startofpacket
	wire          cpu_ram_s1_agent_rsp_fifo_out_endofpacket;                                                   // cpu_ram_s1_agent_rsp_fifo:out_endofpacket -> cpu_ram_s1_agent:rf_sink_endofpacket
	wire          cpu_ram_s1_agent_rdata_fifo_src_valid;                                                       // cpu_ram_s1_agent:rdata_fifo_src_valid -> cpu_ram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] cpu_ram_s1_agent_rdata_fifo_src_data;                                                        // cpu_ram_s1_agent:rdata_fifo_src_data -> cpu_ram_s1_agent:rdata_fifo_sink_data
	wire          cpu_ram_s1_agent_rdata_fifo_src_ready;                                                       // cpu_ram_s1_agent:rdata_fifo_sink_ready -> cpu_ram_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_009_src_valid;                                                                       // cmd_mux_009:src_valid -> cpu_ram_s1_agent:cp_valid
	wire  [107:0] cmd_mux_009_src_data;                                                                        // cmd_mux_009:src_data -> cpu_ram_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                       // cpu_ram_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [26:0] cmd_mux_009_src_channel;                                                                     // cmd_mux_009:src_channel -> cpu_ram_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                               // cmd_mux_009:src_startofpacket -> cpu_ram_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                                 // cmd_mux_009:src_endofpacket -> cpu_ram_s1_agent:cp_endofpacket
	wire   [31:0] edid_ram_access_pio_s1_agent_m0_readdata;                                                    // edid_ram_access_pio_s1_translator:uav_readdata -> edid_ram_access_pio_s1_agent:m0_readdata
	wire          edid_ram_access_pio_s1_agent_m0_waitrequest;                                                 // edid_ram_access_pio_s1_translator:uav_waitrequest -> edid_ram_access_pio_s1_agent:m0_waitrequest
	wire          edid_ram_access_pio_s1_agent_m0_debugaccess;                                                 // edid_ram_access_pio_s1_agent:m0_debugaccess -> edid_ram_access_pio_s1_translator:uav_debugaccess
	wire   [18:0] edid_ram_access_pio_s1_agent_m0_address;                                                     // edid_ram_access_pio_s1_agent:m0_address -> edid_ram_access_pio_s1_translator:uav_address
	wire    [3:0] edid_ram_access_pio_s1_agent_m0_byteenable;                                                  // edid_ram_access_pio_s1_agent:m0_byteenable -> edid_ram_access_pio_s1_translator:uav_byteenable
	wire          edid_ram_access_pio_s1_agent_m0_read;                                                        // edid_ram_access_pio_s1_agent:m0_read -> edid_ram_access_pio_s1_translator:uav_read
	wire          edid_ram_access_pio_s1_agent_m0_readdatavalid;                                               // edid_ram_access_pio_s1_translator:uav_readdatavalid -> edid_ram_access_pio_s1_agent:m0_readdatavalid
	wire          edid_ram_access_pio_s1_agent_m0_lock;                                                        // edid_ram_access_pio_s1_agent:m0_lock -> edid_ram_access_pio_s1_translator:uav_lock
	wire   [31:0] edid_ram_access_pio_s1_agent_m0_writedata;                                                   // edid_ram_access_pio_s1_agent:m0_writedata -> edid_ram_access_pio_s1_translator:uav_writedata
	wire          edid_ram_access_pio_s1_agent_m0_write;                                                       // edid_ram_access_pio_s1_agent:m0_write -> edid_ram_access_pio_s1_translator:uav_write
	wire    [2:0] edid_ram_access_pio_s1_agent_m0_burstcount;                                                  // edid_ram_access_pio_s1_agent:m0_burstcount -> edid_ram_access_pio_s1_translator:uav_burstcount
	wire          edid_ram_access_pio_s1_agent_rf_source_valid;                                                // edid_ram_access_pio_s1_agent:rf_source_valid -> edid_ram_access_pio_s1_agent_rsp_fifo:in_valid
	wire  [108:0] edid_ram_access_pio_s1_agent_rf_source_data;                                                 // edid_ram_access_pio_s1_agent:rf_source_data -> edid_ram_access_pio_s1_agent_rsp_fifo:in_data
	wire          edid_ram_access_pio_s1_agent_rf_source_ready;                                                // edid_ram_access_pio_s1_agent_rsp_fifo:in_ready -> edid_ram_access_pio_s1_agent:rf_source_ready
	wire          edid_ram_access_pio_s1_agent_rf_source_startofpacket;                                        // edid_ram_access_pio_s1_agent:rf_source_startofpacket -> edid_ram_access_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          edid_ram_access_pio_s1_agent_rf_source_endofpacket;                                          // edid_ram_access_pio_s1_agent:rf_source_endofpacket -> edid_ram_access_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          edid_ram_access_pio_s1_agent_rsp_fifo_out_valid;                                             // edid_ram_access_pio_s1_agent_rsp_fifo:out_valid -> edid_ram_access_pio_s1_agent:rf_sink_valid
	wire  [108:0] edid_ram_access_pio_s1_agent_rsp_fifo_out_data;                                              // edid_ram_access_pio_s1_agent_rsp_fifo:out_data -> edid_ram_access_pio_s1_agent:rf_sink_data
	wire          edid_ram_access_pio_s1_agent_rsp_fifo_out_ready;                                             // edid_ram_access_pio_s1_agent:rf_sink_ready -> edid_ram_access_pio_s1_agent_rsp_fifo:out_ready
	wire          edid_ram_access_pio_s1_agent_rsp_fifo_out_startofpacket;                                     // edid_ram_access_pio_s1_agent_rsp_fifo:out_startofpacket -> edid_ram_access_pio_s1_agent:rf_sink_startofpacket
	wire          edid_ram_access_pio_s1_agent_rsp_fifo_out_endofpacket;                                       // edid_ram_access_pio_s1_agent_rsp_fifo:out_endofpacket -> edid_ram_access_pio_s1_agent:rf_sink_endofpacket
	wire          edid_ram_access_pio_s1_agent_rdata_fifo_src_valid;                                           // edid_ram_access_pio_s1_agent:rdata_fifo_src_valid -> edid_ram_access_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] edid_ram_access_pio_s1_agent_rdata_fifo_src_data;                                            // edid_ram_access_pio_s1_agent:rdata_fifo_src_data -> edid_ram_access_pio_s1_agent:rdata_fifo_sink_data
	wire          edid_ram_access_pio_s1_agent_rdata_fifo_src_ready;                                           // edid_ram_access_pio_s1_agent:rdata_fifo_sink_ready -> edid_ram_access_pio_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_010_src_valid;                                                                       // cmd_mux_010:src_valid -> edid_ram_access_pio_s1_agent:cp_valid
	wire  [107:0] cmd_mux_010_src_data;                                                                        // cmd_mux_010:src_data -> edid_ram_access_pio_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                       // edid_ram_access_pio_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [26:0] cmd_mux_010_src_channel;                                                                     // cmd_mux_010:src_channel -> edid_ram_access_pio_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                               // cmd_mux_010:src_startofpacket -> edid_ram_access_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                                 // cmd_mux_010:src_endofpacket -> edid_ram_access_pio_s1_agent:cp_endofpacket
	wire   [31:0] measure_pio_s1_agent_m0_readdata;                                                            // measure_pio_s1_translator:uav_readdata -> measure_pio_s1_agent:m0_readdata
	wire          measure_pio_s1_agent_m0_waitrequest;                                                         // measure_pio_s1_translator:uav_waitrequest -> measure_pio_s1_agent:m0_waitrequest
	wire          measure_pio_s1_agent_m0_debugaccess;                                                         // measure_pio_s1_agent:m0_debugaccess -> measure_pio_s1_translator:uav_debugaccess
	wire   [18:0] measure_pio_s1_agent_m0_address;                                                             // measure_pio_s1_agent:m0_address -> measure_pio_s1_translator:uav_address
	wire    [3:0] measure_pio_s1_agent_m0_byteenable;                                                          // measure_pio_s1_agent:m0_byteenable -> measure_pio_s1_translator:uav_byteenable
	wire          measure_pio_s1_agent_m0_read;                                                                // measure_pio_s1_agent:m0_read -> measure_pio_s1_translator:uav_read
	wire          measure_pio_s1_agent_m0_readdatavalid;                                                       // measure_pio_s1_translator:uav_readdatavalid -> measure_pio_s1_agent:m0_readdatavalid
	wire          measure_pio_s1_agent_m0_lock;                                                                // measure_pio_s1_agent:m0_lock -> measure_pio_s1_translator:uav_lock
	wire   [31:0] measure_pio_s1_agent_m0_writedata;                                                           // measure_pio_s1_agent:m0_writedata -> measure_pio_s1_translator:uav_writedata
	wire          measure_pio_s1_agent_m0_write;                                                               // measure_pio_s1_agent:m0_write -> measure_pio_s1_translator:uav_write
	wire    [2:0] measure_pio_s1_agent_m0_burstcount;                                                          // measure_pio_s1_agent:m0_burstcount -> measure_pio_s1_translator:uav_burstcount
	wire          measure_pio_s1_agent_rf_source_valid;                                                        // measure_pio_s1_agent:rf_source_valid -> measure_pio_s1_agent_rsp_fifo:in_valid
	wire  [108:0] measure_pio_s1_agent_rf_source_data;                                                         // measure_pio_s1_agent:rf_source_data -> measure_pio_s1_agent_rsp_fifo:in_data
	wire          measure_pio_s1_agent_rf_source_ready;                                                        // measure_pio_s1_agent_rsp_fifo:in_ready -> measure_pio_s1_agent:rf_source_ready
	wire          measure_pio_s1_agent_rf_source_startofpacket;                                                // measure_pio_s1_agent:rf_source_startofpacket -> measure_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          measure_pio_s1_agent_rf_source_endofpacket;                                                  // measure_pio_s1_agent:rf_source_endofpacket -> measure_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          measure_pio_s1_agent_rsp_fifo_out_valid;                                                     // measure_pio_s1_agent_rsp_fifo:out_valid -> measure_pio_s1_agent:rf_sink_valid
	wire  [108:0] measure_pio_s1_agent_rsp_fifo_out_data;                                                      // measure_pio_s1_agent_rsp_fifo:out_data -> measure_pio_s1_agent:rf_sink_data
	wire          measure_pio_s1_agent_rsp_fifo_out_ready;                                                     // measure_pio_s1_agent:rf_sink_ready -> measure_pio_s1_agent_rsp_fifo:out_ready
	wire          measure_pio_s1_agent_rsp_fifo_out_startofpacket;                                             // measure_pio_s1_agent_rsp_fifo:out_startofpacket -> measure_pio_s1_agent:rf_sink_startofpacket
	wire          measure_pio_s1_agent_rsp_fifo_out_endofpacket;                                               // measure_pio_s1_agent_rsp_fifo:out_endofpacket -> measure_pio_s1_agent:rf_sink_endofpacket
	wire          measure_pio_s1_agent_rdata_fifo_src_valid;                                                   // measure_pio_s1_agent:rdata_fifo_src_valid -> measure_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] measure_pio_s1_agent_rdata_fifo_src_data;                                                    // measure_pio_s1_agent:rdata_fifo_src_data -> measure_pio_s1_agent:rdata_fifo_sink_data
	wire          measure_pio_s1_agent_rdata_fifo_src_ready;                                                   // measure_pio_s1_agent:rdata_fifo_sink_ready -> measure_pio_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_011_src_valid;                                                                       // cmd_mux_011:src_valid -> measure_pio_s1_agent:cp_valid
	wire  [107:0] cmd_mux_011_src_data;                                                                        // cmd_mux_011:src_data -> measure_pio_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                                       // measure_pio_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [26:0] cmd_mux_011_src_channel;                                                                     // cmd_mux_011:src_channel -> measure_pio_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                               // cmd_mux_011:src_startofpacket -> measure_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                                 // cmd_mux_011:src_endofpacket -> measure_pio_s1_agent:cp_endofpacket
	wire   [31:0] tx_os_pio_s1_agent_m0_readdata;                                                              // tx_os_pio_s1_translator:uav_readdata -> tx_os_pio_s1_agent:m0_readdata
	wire          tx_os_pio_s1_agent_m0_waitrequest;                                                           // tx_os_pio_s1_translator:uav_waitrequest -> tx_os_pio_s1_agent:m0_waitrequest
	wire          tx_os_pio_s1_agent_m0_debugaccess;                                                           // tx_os_pio_s1_agent:m0_debugaccess -> tx_os_pio_s1_translator:uav_debugaccess
	wire   [18:0] tx_os_pio_s1_agent_m0_address;                                                               // tx_os_pio_s1_agent:m0_address -> tx_os_pio_s1_translator:uav_address
	wire    [3:0] tx_os_pio_s1_agent_m0_byteenable;                                                            // tx_os_pio_s1_agent:m0_byteenable -> tx_os_pio_s1_translator:uav_byteenable
	wire          tx_os_pio_s1_agent_m0_read;                                                                  // tx_os_pio_s1_agent:m0_read -> tx_os_pio_s1_translator:uav_read
	wire          tx_os_pio_s1_agent_m0_readdatavalid;                                                         // tx_os_pio_s1_translator:uav_readdatavalid -> tx_os_pio_s1_agent:m0_readdatavalid
	wire          tx_os_pio_s1_agent_m0_lock;                                                                  // tx_os_pio_s1_agent:m0_lock -> tx_os_pio_s1_translator:uav_lock
	wire   [31:0] tx_os_pio_s1_agent_m0_writedata;                                                             // tx_os_pio_s1_agent:m0_writedata -> tx_os_pio_s1_translator:uav_writedata
	wire          tx_os_pio_s1_agent_m0_write;                                                                 // tx_os_pio_s1_agent:m0_write -> tx_os_pio_s1_translator:uav_write
	wire    [2:0] tx_os_pio_s1_agent_m0_burstcount;                                                            // tx_os_pio_s1_agent:m0_burstcount -> tx_os_pio_s1_translator:uav_burstcount
	wire          tx_os_pio_s1_agent_rf_source_valid;                                                          // tx_os_pio_s1_agent:rf_source_valid -> tx_os_pio_s1_agent_rsp_fifo:in_valid
	wire  [108:0] tx_os_pio_s1_agent_rf_source_data;                                                           // tx_os_pio_s1_agent:rf_source_data -> tx_os_pio_s1_agent_rsp_fifo:in_data
	wire          tx_os_pio_s1_agent_rf_source_ready;                                                          // tx_os_pio_s1_agent_rsp_fifo:in_ready -> tx_os_pio_s1_agent:rf_source_ready
	wire          tx_os_pio_s1_agent_rf_source_startofpacket;                                                  // tx_os_pio_s1_agent:rf_source_startofpacket -> tx_os_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          tx_os_pio_s1_agent_rf_source_endofpacket;                                                    // tx_os_pio_s1_agent:rf_source_endofpacket -> tx_os_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          tx_os_pio_s1_agent_rsp_fifo_out_valid;                                                       // tx_os_pio_s1_agent_rsp_fifo:out_valid -> tx_os_pio_s1_agent:rf_sink_valid
	wire  [108:0] tx_os_pio_s1_agent_rsp_fifo_out_data;                                                        // tx_os_pio_s1_agent_rsp_fifo:out_data -> tx_os_pio_s1_agent:rf_sink_data
	wire          tx_os_pio_s1_agent_rsp_fifo_out_ready;                                                       // tx_os_pio_s1_agent:rf_sink_ready -> tx_os_pio_s1_agent_rsp_fifo:out_ready
	wire          tx_os_pio_s1_agent_rsp_fifo_out_startofpacket;                                               // tx_os_pio_s1_agent_rsp_fifo:out_startofpacket -> tx_os_pio_s1_agent:rf_sink_startofpacket
	wire          tx_os_pio_s1_agent_rsp_fifo_out_endofpacket;                                                 // tx_os_pio_s1_agent_rsp_fifo:out_endofpacket -> tx_os_pio_s1_agent:rf_sink_endofpacket
	wire          tx_os_pio_s1_agent_rdata_fifo_src_valid;                                                     // tx_os_pio_s1_agent:rdata_fifo_src_valid -> tx_os_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_os_pio_s1_agent_rdata_fifo_src_data;                                                      // tx_os_pio_s1_agent:rdata_fifo_src_data -> tx_os_pio_s1_agent:rdata_fifo_sink_data
	wire          tx_os_pio_s1_agent_rdata_fifo_src_ready;                                                     // tx_os_pio_s1_agent:rdata_fifo_sink_ready -> tx_os_pio_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_012_src_valid;                                                                       // cmd_mux_012:src_valid -> tx_os_pio_s1_agent:cp_valid
	wire  [107:0] cmd_mux_012_src_data;                                                                        // cmd_mux_012:src_data -> tx_os_pio_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                                       // tx_os_pio_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [26:0] cmd_mux_012_src_channel;                                                                     // cmd_mux_012:src_channel -> tx_os_pio_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                               // cmd_mux_012:src_startofpacket -> tx_os_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                                 // cmd_mux_012:src_endofpacket -> tx_os_pio_s1_agent:cp_endofpacket
	wire   [31:0] measure_valid_pio_s1_agent_m0_readdata;                                                      // measure_valid_pio_s1_translator:uav_readdata -> measure_valid_pio_s1_agent:m0_readdata
	wire          measure_valid_pio_s1_agent_m0_waitrequest;                                                   // measure_valid_pio_s1_translator:uav_waitrequest -> measure_valid_pio_s1_agent:m0_waitrequest
	wire          measure_valid_pio_s1_agent_m0_debugaccess;                                                   // measure_valid_pio_s1_agent:m0_debugaccess -> measure_valid_pio_s1_translator:uav_debugaccess
	wire   [18:0] measure_valid_pio_s1_agent_m0_address;                                                       // measure_valid_pio_s1_agent:m0_address -> measure_valid_pio_s1_translator:uav_address
	wire    [3:0] measure_valid_pio_s1_agent_m0_byteenable;                                                    // measure_valid_pio_s1_agent:m0_byteenable -> measure_valid_pio_s1_translator:uav_byteenable
	wire          measure_valid_pio_s1_agent_m0_read;                                                          // measure_valid_pio_s1_agent:m0_read -> measure_valid_pio_s1_translator:uav_read
	wire          measure_valid_pio_s1_agent_m0_readdatavalid;                                                 // measure_valid_pio_s1_translator:uav_readdatavalid -> measure_valid_pio_s1_agent:m0_readdatavalid
	wire          measure_valid_pio_s1_agent_m0_lock;                                                          // measure_valid_pio_s1_agent:m0_lock -> measure_valid_pio_s1_translator:uav_lock
	wire   [31:0] measure_valid_pio_s1_agent_m0_writedata;                                                     // measure_valid_pio_s1_agent:m0_writedata -> measure_valid_pio_s1_translator:uav_writedata
	wire          measure_valid_pio_s1_agent_m0_write;                                                         // measure_valid_pio_s1_agent:m0_write -> measure_valid_pio_s1_translator:uav_write
	wire    [2:0] measure_valid_pio_s1_agent_m0_burstcount;                                                    // measure_valid_pio_s1_agent:m0_burstcount -> measure_valid_pio_s1_translator:uav_burstcount
	wire          measure_valid_pio_s1_agent_rf_source_valid;                                                  // measure_valid_pio_s1_agent:rf_source_valid -> measure_valid_pio_s1_agent_rsp_fifo:in_valid
	wire  [108:0] measure_valid_pio_s1_agent_rf_source_data;                                                   // measure_valid_pio_s1_agent:rf_source_data -> measure_valid_pio_s1_agent_rsp_fifo:in_data
	wire          measure_valid_pio_s1_agent_rf_source_ready;                                                  // measure_valid_pio_s1_agent_rsp_fifo:in_ready -> measure_valid_pio_s1_agent:rf_source_ready
	wire          measure_valid_pio_s1_agent_rf_source_startofpacket;                                          // measure_valid_pio_s1_agent:rf_source_startofpacket -> measure_valid_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          measure_valid_pio_s1_agent_rf_source_endofpacket;                                            // measure_valid_pio_s1_agent:rf_source_endofpacket -> measure_valid_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          measure_valid_pio_s1_agent_rsp_fifo_out_valid;                                               // measure_valid_pio_s1_agent_rsp_fifo:out_valid -> measure_valid_pio_s1_agent:rf_sink_valid
	wire  [108:0] measure_valid_pio_s1_agent_rsp_fifo_out_data;                                                // measure_valid_pio_s1_agent_rsp_fifo:out_data -> measure_valid_pio_s1_agent:rf_sink_data
	wire          measure_valid_pio_s1_agent_rsp_fifo_out_ready;                                               // measure_valid_pio_s1_agent:rf_sink_ready -> measure_valid_pio_s1_agent_rsp_fifo:out_ready
	wire          measure_valid_pio_s1_agent_rsp_fifo_out_startofpacket;                                       // measure_valid_pio_s1_agent_rsp_fifo:out_startofpacket -> measure_valid_pio_s1_agent:rf_sink_startofpacket
	wire          measure_valid_pio_s1_agent_rsp_fifo_out_endofpacket;                                         // measure_valid_pio_s1_agent_rsp_fifo:out_endofpacket -> measure_valid_pio_s1_agent:rf_sink_endofpacket
	wire          measure_valid_pio_s1_agent_rdata_fifo_src_valid;                                             // measure_valid_pio_s1_agent:rdata_fifo_src_valid -> measure_valid_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] measure_valid_pio_s1_agent_rdata_fifo_src_data;                                              // measure_valid_pio_s1_agent:rdata_fifo_src_data -> measure_valid_pio_s1_agent:rdata_fifo_sink_data
	wire          measure_valid_pio_s1_agent_rdata_fifo_src_ready;                                             // measure_valid_pio_s1_agent:rdata_fifo_sink_ready -> measure_valid_pio_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_013_src_valid;                                                                       // cmd_mux_013:src_valid -> measure_valid_pio_s1_agent:cp_valid
	wire  [107:0] cmd_mux_013_src_data;                                                                        // cmd_mux_013:src_data -> measure_valid_pio_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                                       // measure_valid_pio_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [26:0] cmd_mux_013_src_channel;                                                                     // cmd_mux_013:src_channel -> measure_valid_pio_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                               // cmd_mux_013:src_startofpacket -> measure_valid_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                                 // cmd_mux_013:src_endofpacket -> measure_valid_pio_s1_agent:cp_endofpacket
	wire   [31:0] tx_rst_pll_pio_s1_agent_m0_readdata;                                                         // tx_rst_pll_pio_s1_translator:uav_readdata -> tx_rst_pll_pio_s1_agent:m0_readdata
	wire          tx_rst_pll_pio_s1_agent_m0_waitrequest;                                                      // tx_rst_pll_pio_s1_translator:uav_waitrequest -> tx_rst_pll_pio_s1_agent:m0_waitrequest
	wire          tx_rst_pll_pio_s1_agent_m0_debugaccess;                                                      // tx_rst_pll_pio_s1_agent:m0_debugaccess -> tx_rst_pll_pio_s1_translator:uav_debugaccess
	wire   [18:0] tx_rst_pll_pio_s1_agent_m0_address;                                                          // tx_rst_pll_pio_s1_agent:m0_address -> tx_rst_pll_pio_s1_translator:uav_address
	wire    [3:0] tx_rst_pll_pio_s1_agent_m0_byteenable;                                                       // tx_rst_pll_pio_s1_agent:m0_byteenable -> tx_rst_pll_pio_s1_translator:uav_byteenable
	wire          tx_rst_pll_pio_s1_agent_m0_read;                                                             // tx_rst_pll_pio_s1_agent:m0_read -> tx_rst_pll_pio_s1_translator:uav_read
	wire          tx_rst_pll_pio_s1_agent_m0_readdatavalid;                                                    // tx_rst_pll_pio_s1_translator:uav_readdatavalid -> tx_rst_pll_pio_s1_agent:m0_readdatavalid
	wire          tx_rst_pll_pio_s1_agent_m0_lock;                                                             // tx_rst_pll_pio_s1_agent:m0_lock -> tx_rst_pll_pio_s1_translator:uav_lock
	wire   [31:0] tx_rst_pll_pio_s1_agent_m0_writedata;                                                        // tx_rst_pll_pio_s1_agent:m0_writedata -> tx_rst_pll_pio_s1_translator:uav_writedata
	wire          tx_rst_pll_pio_s1_agent_m0_write;                                                            // tx_rst_pll_pio_s1_agent:m0_write -> tx_rst_pll_pio_s1_translator:uav_write
	wire    [2:0] tx_rst_pll_pio_s1_agent_m0_burstcount;                                                       // tx_rst_pll_pio_s1_agent:m0_burstcount -> tx_rst_pll_pio_s1_translator:uav_burstcount
	wire          tx_rst_pll_pio_s1_agent_rf_source_valid;                                                     // tx_rst_pll_pio_s1_agent:rf_source_valid -> tx_rst_pll_pio_s1_agent_rsp_fifo:in_valid
	wire  [108:0] tx_rst_pll_pio_s1_agent_rf_source_data;                                                      // tx_rst_pll_pio_s1_agent:rf_source_data -> tx_rst_pll_pio_s1_agent_rsp_fifo:in_data
	wire          tx_rst_pll_pio_s1_agent_rf_source_ready;                                                     // tx_rst_pll_pio_s1_agent_rsp_fifo:in_ready -> tx_rst_pll_pio_s1_agent:rf_source_ready
	wire          tx_rst_pll_pio_s1_agent_rf_source_startofpacket;                                             // tx_rst_pll_pio_s1_agent:rf_source_startofpacket -> tx_rst_pll_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          tx_rst_pll_pio_s1_agent_rf_source_endofpacket;                                               // tx_rst_pll_pio_s1_agent:rf_source_endofpacket -> tx_rst_pll_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          tx_rst_pll_pio_s1_agent_rsp_fifo_out_valid;                                                  // tx_rst_pll_pio_s1_agent_rsp_fifo:out_valid -> tx_rst_pll_pio_s1_agent:rf_sink_valid
	wire  [108:0] tx_rst_pll_pio_s1_agent_rsp_fifo_out_data;                                                   // tx_rst_pll_pio_s1_agent_rsp_fifo:out_data -> tx_rst_pll_pio_s1_agent:rf_sink_data
	wire          tx_rst_pll_pio_s1_agent_rsp_fifo_out_ready;                                                  // tx_rst_pll_pio_s1_agent:rf_sink_ready -> tx_rst_pll_pio_s1_agent_rsp_fifo:out_ready
	wire          tx_rst_pll_pio_s1_agent_rsp_fifo_out_startofpacket;                                          // tx_rst_pll_pio_s1_agent_rsp_fifo:out_startofpacket -> tx_rst_pll_pio_s1_agent:rf_sink_startofpacket
	wire          tx_rst_pll_pio_s1_agent_rsp_fifo_out_endofpacket;                                            // tx_rst_pll_pio_s1_agent_rsp_fifo:out_endofpacket -> tx_rst_pll_pio_s1_agent:rf_sink_endofpacket
	wire          tx_rst_pll_pio_s1_agent_rdata_fifo_src_valid;                                                // tx_rst_pll_pio_s1_agent:rdata_fifo_src_valid -> tx_rst_pll_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_rst_pll_pio_s1_agent_rdata_fifo_src_data;                                                 // tx_rst_pll_pio_s1_agent:rdata_fifo_src_data -> tx_rst_pll_pio_s1_agent:rdata_fifo_sink_data
	wire          tx_rst_pll_pio_s1_agent_rdata_fifo_src_ready;                                                // tx_rst_pll_pio_s1_agent:rdata_fifo_sink_ready -> tx_rst_pll_pio_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_014_src_valid;                                                                       // cmd_mux_014:src_valid -> tx_rst_pll_pio_s1_agent:cp_valid
	wire  [107:0] cmd_mux_014_src_data;                                                                        // cmd_mux_014:src_data -> tx_rst_pll_pio_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                                       // tx_rst_pll_pio_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [26:0] cmd_mux_014_src_channel;                                                                     // cmd_mux_014:src_channel -> tx_rst_pll_pio_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                               // cmd_mux_014:src_startofpacket -> tx_rst_pll_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                                 // cmd_mux_014:src_endofpacket -> tx_rst_pll_pio_s1_agent:cp_endofpacket
	wire   [31:0] tx_rst_xcvr_pio_s1_agent_m0_readdata;                                                        // tx_rst_xcvr_pio_s1_translator:uav_readdata -> tx_rst_xcvr_pio_s1_agent:m0_readdata
	wire          tx_rst_xcvr_pio_s1_agent_m0_waitrequest;                                                     // tx_rst_xcvr_pio_s1_translator:uav_waitrequest -> tx_rst_xcvr_pio_s1_agent:m0_waitrequest
	wire          tx_rst_xcvr_pio_s1_agent_m0_debugaccess;                                                     // tx_rst_xcvr_pio_s1_agent:m0_debugaccess -> tx_rst_xcvr_pio_s1_translator:uav_debugaccess
	wire   [18:0] tx_rst_xcvr_pio_s1_agent_m0_address;                                                         // tx_rst_xcvr_pio_s1_agent:m0_address -> tx_rst_xcvr_pio_s1_translator:uav_address
	wire    [3:0] tx_rst_xcvr_pio_s1_agent_m0_byteenable;                                                      // tx_rst_xcvr_pio_s1_agent:m0_byteenable -> tx_rst_xcvr_pio_s1_translator:uav_byteenable
	wire          tx_rst_xcvr_pio_s1_agent_m0_read;                                                            // tx_rst_xcvr_pio_s1_agent:m0_read -> tx_rst_xcvr_pio_s1_translator:uav_read
	wire          tx_rst_xcvr_pio_s1_agent_m0_readdatavalid;                                                   // tx_rst_xcvr_pio_s1_translator:uav_readdatavalid -> tx_rst_xcvr_pio_s1_agent:m0_readdatavalid
	wire          tx_rst_xcvr_pio_s1_agent_m0_lock;                                                            // tx_rst_xcvr_pio_s1_agent:m0_lock -> tx_rst_xcvr_pio_s1_translator:uav_lock
	wire   [31:0] tx_rst_xcvr_pio_s1_agent_m0_writedata;                                                       // tx_rst_xcvr_pio_s1_agent:m0_writedata -> tx_rst_xcvr_pio_s1_translator:uav_writedata
	wire          tx_rst_xcvr_pio_s1_agent_m0_write;                                                           // tx_rst_xcvr_pio_s1_agent:m0_write -> tx_rst_xcvr_pio_s1_translator:uav_write
	wire    [2:0] tx_rst_xcvr_pio_s1_agent_m0_burstcount;                                                      // tx_rst_xcvr_pio_s1_agent:m0_burstcount -> tx_rst_xcvr_pio_s1_translator:uav_burstcount
	wire          tx_rst_xcvr_pio_s1_agent_rf_source_valid;                                                    // tx_rst_xcvr_pio_s1_agent:rf_source_valid -> tx_rst_xcvr_pio_s1_agent_rsp_fifo:in_valid
	wire  [108:0] tx_rst_xcvr_pio_s1_agent_rf_source_data;                                                     // tx_rst_xcvr_pio_s1_agent:rf_source_data -> tx_rst_xcvr_pio_s1_agent_rsp_fifo:in_data
	wire          tx_rst_xcvr_pio_s1_agent_rf_source_ready;                                                    // tx_rst_xcvr_pio_s1_agent_rsp_fifo:in_ready -> tx_rst_xcvr_pio_s1_agent:rf_source_ready
	wire          tx_rst_xcvr_pio_s1_agent_rf_source_startofpacket;                                            // tx_rst_xcvr_pio_s1_agent:rf_source_startofpacket -> tx_rst_xcvr_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          tx_rst_xcvr_pio_s1_agent_rf_source_endofpacket;                                              // tx_rst_xcvr_pio_s1_agent:rf_source_endofpacket -> tx_rst_xcvr_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          tx_rst_xcvr_pio_s1_agent_rsp_fifo_out_valid;                                                 // tx_rst_xcvr_pio_s1_agent_rsp_fifo:out_valid -> tx_rst_xcvr_pio_s1_agent:rf_sink_valid
	wire  [108:0] tx_rst_xcvr_pio_s1_agent_rsp_fifo_out_data;                                                  // tx_rst_xcvr_pio_s1_agent_rsp_fifo:out_data -> tx_rst_xcvr_pio_s1_agent:rf_sink_data
	wire          tx_rst_xcvr_pio_s1_agent_rsp_fifo_out_ready;                                                 // tx_rst_xcvr_pio_s1_agent:rf_sink_ready -> tx_rst_xcvr_pio_s1_agent_rsp_fifo:out_ready
	wire          tx_rst_xcvr_pio_s1_agent_rsp_fifo_out_startofpacket;                                         // tx_rst_xcvr_pio_s1_agent_rsp_fifo:out_startofpacket -> tx_rst_xcvr_pio_s1_agent:rf_sink_startofpacket
	wire          tx_rst_xcvr_pio_s1_agent_rsp_fifo_out_endofpacket;                                           // tx_rst_xcvr_pio_s1_agent_rsp_fifo:out_endofpacket -> tx_rst_xcvr_pio_s1_agent:rf_sink_endofpacket
	wire          tx_rst_xcvr_pio_s1_agent_rdata_fifo_src_valid;                                               // tx_rst_xcvr_pio_s1_agent:rdata_fifo_src_valid -> tx_rst_xcvr_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_rst_xcvr_pio_s1_agent_rdata_fifo_src_data;                                                // tx_rst_xcvr_pio_s1_agent:rdata_fifo_src_data -> tx_rst_xcvr_pio_s1_agent:rdata_fifo_sink_data
	wire          tx_rst_xcvr_pio_s1_agent_rdata_fifo_src_ready;                                               // tx_rst_xcvr_pio_s1_agent:rdata_fifo_sink_ready -> tx_rst_xcvr_pio_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_015_src_valid;                                                                       // cmd_mux_015:src_valid -> tx_rst_xcvr_pio_s1_agent:cp_valid
	wire  [107:0] cmd_mux_015_src_data;                                                                        // cmd_mux_015:src_data -> tx_rst_xcvr_pio_s1_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                                       // tx_rst_xcvr_pio_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [26:0] cmd_mux_015_src_channel;                                                                     // cmd_mux_015:src_channel -> tx_rst_xcvr_pio_s1_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                               // cmd_mux_015:src_startofpacket -> tx_rst_xcvr_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                                 // cmd_mux_015:src_endofpacket -> tx_rst_xcvr_pio_s1_agent:cp_endofpacket
	wire   [31:0] tmds_bit_clock_ratio_pio_s1_agent_m0_readdata;                                               // tmds_bit_clock_ratio_pio_s1_translator:uav_readdata -> tmds_bit_clock_ratio_pio_s1_agent:m0_readdata
	wire          tmds_bit_clock_ratio_pio_s1_agent_m0_waitrequest;                                            // tmds_bit_clock_ratio_pio_s1_translator:uav_waitrequest -> tmds_bit_clock_ratio_pio_s1_agent:m0_waitrequest
	wire          tmds_bit_clock_ratio_pio_s1_agent_m0_debugaccess;                                            // tmds_bit_clock_ratio_pio_s1_agent:m0_debugaccess -> tmds_bit_clock_ratio_pio_s1_translator:uav_debugaccess
	wire   [18:0] tmds_bit_clock_ratio_pio_s1_agent_m0_address;                                                // tmds_bit_clock_ratio_pio_s1_agent:m0_address -> tmds_bit_clock_ratio_pio_s1_translator:uav_address
	wire    [3:0] tmds_bit_clock_ratio_pio_s1_agent_m0_byteenable;                                             // tmds_bit_clock_ratio_pio_s1_agent:m0_byteenable -> tmds_bit_clock_ratio_pio_s1_translator:uav_byteenable
	wire          tmds_bit_clock_ratio_pio_s1_agent_m0_read;                                                   // tmds_bit_clock_ratio_pio_s1_agent:m0_read -> tmds_bit_clock_ratio_pio_s1_translator:uav_read
	wire          tmds_bit_clock_ratio_pio_s1_agent_m0_readdatavalid;                                          // tmds_bit_clock_ratio_pio_s1_translator:uav_readdatavalid -> tmds_bit_clock_ratio_pio_s1_agent:m0_readdatavalid
	wire          tmds_bit_clock_ratio_pio_s1_agent_m0_lock;                                                   // tmds_bit_clock_ratio_pio_s1_agent:m0_lock -> tmds_bit_clock_ratio_pio_s1_translator:uav_lock
	wire   [31:0] tmds_bit_clock_ratio_pio_s1_agent_m0_writedata;                                              // tmds_bit_clock_ratio_pio_s1_agent:m0_writedata -> tmds_bit_clock_ratio_pio_s1_translator:uav_writedata
	wire          tmds_bit_clock_ratio_pio_s1_agent_m0_write;                                                  // tmds_bit_clock_ratio_pio_s1_agent:m0_write -> tmds_bit_clock_ratio_pio_s1_translator:uav_write
	wire    [2:0] tmds_bit_clock_ratio_pio_s1_agent_m0_burstcount;                                             // tmds_bit_clock_ratio_pio_s1_agent:m0_burstcount -> tmds_bit_clock_ratio_pio_s1_translator:uav_burstcount
	wire          tmds_bit_clock_ratio_pio_s1_agent_rf_source_valid;                                           // tmds_bit_clock_ratio_pio_s1_agent:rf_source_valid -> tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo:in_valid
	wire  [108:0] tmds_bit_clock_ratio_pio_s1_agent_rf_source_data;                                            // tmds_bit_clock_ratio_pio_s1_agent:rf_source_data -> tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo:in_data
	wire          tmds_bit_clock_ratio_pio_s1_agent_rf_source_ready;                                           // tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo:in_ready -> tmds_bit_clock_ratio_pio_s1_agent:rf_source_ready
	wire          tmds_bit_clock_ratio_pio_s1_agent_rf_source_startofpacket;                                   // tmds_bit_clock_ratio_pio_s1_agent:rf_source_startofpacket -> tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          tmds_bit_clock_ratio_pio_s1_agent_rf_source_endofpacket;                                     // tmds_bit_clock_ratio_pio_s1_agent:rf_source_endofpacket -> tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo_out_valid;                                        // tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo:out_valid -> tmds_bit_clock_ratio_pio_s1_agent:rf_sink_valid
	wire  [108:0] tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo_out_data;                                         // tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo:out_data -> tmds_bit_clock_ratio_pio_s1_agent:rf_sink_data
	wire          tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo_out_ready;                                        // tmds_bit_clock_ratio_pio_s1_agent:rf_sink_ready -> tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo:out_ready
	wire          tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo_out_startofpacket;                                // tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo:out_startofpacket -> tmds_bit_clock_ratio_pio_s1_agent:rf_sink_startofpacket
	wire          tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo_out_endofpacket;                                  // tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo:out_endofpacket -> tmds_bit_clock_ratio_pio_s1_agent:rf_sink_endofpacket
	wire          tmds_bit_clock_ratio_pio_s1_agent_rdata_fifo_src_valid;                                      // tmds_bit_clock_ratio_pio_s1_agent:rdata_fifo_src_valid -> tmds_bit_clock_ratio_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] tmds_bit_clock_ratio_pio_s1_agent_rdata_fifo_src_data;                                       // tmds_bit_clock_ratio_pio_s1_agent:rdata_fifo_src_data -> tmds_bit_clock_ratio_pio_s1_agent:rdata_fifo_sink_data
	wire          tmds_bit_clock_ratio_pio_s1_agent_rdata_fifo_src_ready;                                      // tmds_bit_clock_ratio_pio_s1_agent:rdata_fifo_sink_ready -> tmds_bit_clock_ratio_pio_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_016_src_valid;                                                                       // cmd_mux_016:src_valid -> tmds_bit_clock_ratio_pio_s1_agent:cp_valid
	wire  [107:0] cmd_mux_016_src_data;                                                                        // cmd_mux_016:src_data -> tmds_bit_clock_ratio_pio_s1_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                                       // tmds_bit_clock_ratio_pio_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [26:0] cmd_mux_016_src_channel;                                                                     // cmd_mux_016:src_channel -> tmds_bit_clock_ratio_pio_s1_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                               // cmd_mux_016:src_startofpacket -> tmds_bit_clock_ratio_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                                 // cmd_mux_016:src_endofpacket -> tmds_bit_clock_ratio_pio_s1_agent:cp_endofpacket
	wire   [31:0] tx_iopll_waitrequest_pio_s1_agent_m0_readdata;                                               // tx_iopll_waitrequest_pio_s1_translator:uav_readdata -> tx_iopll_waitrequest_pio_s1_agent:m0_readdata
	wire          tx_iopll_waitrequest_pio_s1_agent_m0_waitrequest;                                            // tx_iopll_waitrequest_pio_s1_translator:uav_waitrequest -> tx_iopll_waitrequest_pio_s1_agent:m0_waitrequest
	wire          tx_iopll_waitrequest_pio_s1_agent_m0_debugaccess;                                            // tx_iopll_waitrequest_pio_s1_agent:m0_debugaccess -> tx_iopll_waitrequest_pio_s1_translator:uav_debugaccess
	wire   [18:0] tx_iopll_waitrequest_pio_s1_agent_m0_address;                                                // tx_iopll_waitrequest_pio_s1_agent:m0_address -> tx_iopll_waitrequest_pio_s1_translator:uav_address
	wire    [3:0] tx_iopll_waitrequest_pio_s1_agent_m0_byteenable;                                             // tx_iopll_waitrequest_pio_s1_agent:m0_byteenable -> tx_iopll_waitrequest_pio_s1_translator:uav_byteenable
	wire          tx_iopll_waitrequest_pio_s1_agent_m0_read;                                                   // tx_iopll_waitrequest_pio_s1_agent:m0_read -> tx_iopll_waitrequest_pio_s1_translator:uav_read
	wire          tx_iopll_waitrequest_pio_s1_agent_m0_readdatavalid;                                          // tx_iopll_waitrequest_pio_s1_translator:uav_readdatavalid -> tx_iopll_waitrequest_pio_s1_agent:m0_readdatavalid
	wire          tx_iopll_waitrequest_pio_s1_agent_m0_lock;                                                   // tx_iopll_waitrequest_pio_s1_agent:m0_lock -> tx_iopll_waitrequest_pio_s1_translator:uav_lock
	wire   [31:0] tx_iopll_waitrequest_pio_s1_agent_m0_writedata;                                              // tx_iopll_waitrequest_pio_s1_agent:m0_writedata -> tx_iopll_waitrequest_pio_s1_translator:uav_writedata
	wire          tx_iopll_waitrequest_pio_s1_agent_m0_write;                                                  // tx_iopll_waitrequest_pio_s1_agent:m0_write -> tx_iopll_waitrequest_pio_s1_translator:uav_write
	wire    [2:0] tx_iopll_waitrequest_pio_s1_agent_m0_burstcount;                                             // tx_iopll_waitrequest_pio_s1_agent:m0_burstcount -> tx_iopll_waitrequest_pio_s1_translator:uav_burstcount
	wire          tx_iopll_waitrequest_pio_s1_agent_rf_source_valid;                                           // tx_iopll_waitrequest_pio_s1_agent:rf_source_valid -> tx_iopll_waitrequest_pio_s1_agent_rsp_fifo:in_valid
	wire  [108:0] tx_iopll_waitrequest_pio_s1_agent_rf_source_data;                                            // tx_iopll_waitrequest_pio_s1_agent:rf_source_data -> tx_iopll_waitrequest_pio_s1_agent_rsp_fifo:in_data
	wire          tx_iopll_waitrequest_pio_s1_agent_rf_source_ready;                                           // tx_iopll_waitrequest_pio_s1_agent_rsp_fifo:in_ready -> tx_iopll_waitrequest_pio_s1_agent:rf_source_ready
	wire          tx_iopll_waitrequest_pio_s1_agent_rf_source_startofpacket;                                   // tx_iopll_waitrequest_pio_s1_agent:rf_source_startofpacket -> tx_iopll_waitrequest_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          tx_iopll_waitrequest_pio_s1_agent_rf_source_endofpacket;                                     // tx_iopll_waitrequest_pio_s1_agent:rf_source_endofpacket -> tx_iopll_waitrequest_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          tx_iopll_waitrequest_pio_s1_agent_rsp_fifo_out_valid;                                        // tx_iopll_waitrequest_pio_s1_agent_rsp_fifo:out_valid -> tx_iopll_waitrequest_pio_s1_agent:rf_sink_valid
	wire  [108:0] tx_iopll_waitrequest_pio_s1_agent_rsp_fifo_out_data;                                         // tx_iopll_waitrequest_pio_s1_agent_rsp_fifo:out_data -> tx_iopll_waitrequest_pio_s1_agent:rf_sink_data
	wire          tx_iopll_waitrequest_pio_s1_agent_rsp_fifo_out_ready;                                        // tx_iopll_waitrequest_pio_s1_agent:rf_sink_ready -> tx_iopll_waitrequest_pio_s1_agent_rsp_fifo:out_ready
	wire          tx_iopll_waitrequest_pio_s1_agent_rsp_fifo_out_startofpacket;                                // tx_iopll_waitrequest_pio_s1_agent_rsp_fifo:out_startofpacket -> tx_iopll_waitrequest_pio_s1_agent:rf_sink_startofpacket
	wire          tx_iopll_waitrequest_pio_s1_agent_rsp_fifo_out_endofpacket;                                  // tx_iopll_waitrequest_pio_s1_agent_rsp_fifo:out_endofpacket -> tx_iopll_waitrequest_pio_s1_agent:rf_sink_endofpacket
	wire          tx_iopll_waitrequest_pio_s1_agent_rdata_fifo_src_valid;                                      // tx_iopll_waitrequest_pio_s1_agent:rdata_fifo_src_valid -> tx_iopll_waitrequest_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_iopll_waitrequest_pio_s1_agent_rdata_fifo_src_data;                                       // tx_iopll_waitrequest_pio_s1_agent:rdata_fifo_src_data -> tx_iopll_waitrequest_pio_s1_agent:rdata_fifo_sink_data
	wire          tx_iopll_waitrequest_pio_s1_agent_rdata_fifo_src_ready;                                      // tx_iopll_waitrequest_pio_s1_agent:rdata_fifo_sink_ready -> tx_iopll_waitrequest_pio_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_017_src_valid;                                                                       // cmd_mux_017:src_valid -> tx_iopll_waitrequest_pio_s1_agent:cp_valid
	wire  [107:0] cmd_mux_017_src_data;                                                                        // cmd_mux_017:src_data -> tx_iopll_waitrequest_pio_s1_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                                       // tx_iopll_waitrequest_pio_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [26:0] cmd_mux_017_src_channel;                                                                     // cmd_mux_017:src_channel -> tx_iopll_waitrequest_pio_s1_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                               // cmd_mux_017:src_startofpacket -> tx_iopll_waitrequest_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                                 // cmd_mux_017:src_endofpacket -> tx_iopll_waitrequest_pio_s1_agent:cp_endofpacket
	wire   [31:0] tx_pll_waitrequest_pio_s1_agent_m0_readdata;                                                 // tx_pll_waitrequest_pio_s1_translator:uav_readdata -> tx_pll_waitrequest_pio_s1_agent:m0_readdata
	wire          tx_pll_waitrequest_pio_s1_agent_m0_waitrequest;                                              // tx_pll_waitrequest_pio_s1_translator:uav_waitrequest -> tx_pll_waitrequest_pio_s1_agent:m0_waitrequest
	wire          tx_pll_waitrequest_pio_s1_agent_m0_debugaccess;                                              // tx_pll_waitrequest_pio_s1_agent:m0_debugaccess -> tx_pll_waitrequest_pio_s1_translator:uav_debugaccess
	wire   [18:0] tx_pll_waitrequest_pio_s1_agent_m0_address;                                                  // tx_pll_waitrequest_pio_s1_agent:m0_address -> tx_pll_waitrequest_pio_s1_translator:uav_address
	wire    [3:0] tx_pll_waitrequest_pio_s1_agent_m0_byteenable;                                               // tx_pll_waitrequest_pio_s1_agent:m0_byteenable -> tx_pll_waitrequest_pio_s1_translator:uav_byteenable
	wire          tx_pll_waitrequest_pio_s1_agent_m0_read;                                                     // tx_pll_waitrequest_pio_s1_agent:m0_read -> tx_pll_waitrequest_pio_s1_translator:uav_read
	wire          tx_pll_waitrequest_pio_s1_agent_m0_readdatavalid;                                            // tx_pll_waitrequest_pio_s1_translator:uav_readdatavalid -> tx_pll_waitrequest_pio_s1_agent:m0_readdatavalid
	wire          tx_pll_waitrequest_pio_s1_agent_m0_lock;                                                     // tx_pll_waitrequest_pio_s1_agent:m0_lock -> tx_pll_waitrequest_pio_s1_translator:uav_lock
	wire   [31:0] tx_pll_waitrequest_pio_s1_agent_m0_writedata;                                                // tx_pll_waitrequest_pio_s1_agent:m0_writedata -> tx_pll_waitrequest_pio_s1_translator:uav_writedata
	wire          tx_pll_waitrequest_pio_s1_agent_m0_write;                                                    // tx_pll_waitrequest_pio_s1_agent:m0_write -> tx_pll_waitrequest_pio_s1_translator:uav_write
	wire    [2:0] tx_pll_waitrequest_pio_s1_agent_m0_burstcount;                                               // tx_pll_waitrequest_pio_s1_agent:m0_burstcount -> tx_pll_waitrequest_pio_s1_translator:uav_burstcount
	wire          tx_pll_waitrequest_pio_s1_agent_rf_source_valid;                                             // tx_pll_waitrequest_pio_s1_agent:rf_source_valid -> tx_pll_waitrequest_pio_s1_agent_rsp_fifo:in_valid
	wire  [108:0] tx_pll_waitrequest_pio_s1_agent_rf_source_data;                                              // tx_pll_waitrequest_pio_s1_agent:rf_source_data -> tx_pll_waitrequest_pio_s1_agent_rsp_fifo:in_data
	wire          tx_pll_waitrequest_pio_s1_agent_rf_source_ready;                                             // tx_pll_waitrequest_pio_s1_agent_rsp_fifo:in_ready -> tx_pll_waitrequest_pio_s1_agent:rf_source_ready
	wire          tx_pll_waitrequest_pio_s1_agent_rf_source_startofpacket;                                     // tx_pll_waitrequest_pio_s1_agent:rf_source_startofpacket -> tx_pll_waitrequest_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          tx_pll_waitrequest_pio_s1_agent_rf_source_endofpacket;                                       // tx_pll_waitrequest_pio_s1_agent:rf_source_endofpacket -> tx_pll_waitrequest_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          tx_pll_waitrequest_pio_s1_agent_rsp_fifo_out_valid;                                          // tx_pll_waitrequest_pio_s1_agent_rsp_fifo:out_valid -> tx_pll_waitrequest_pio_s1_agent:rf_sink_valid
	wire  [108:0] tx_pll_waitrequest_pio_s1_agent_rsp_fifo_out_data;                                           // tx_pll_waitrequest_pio_s1_agent_rsp_fifo:out_data -> tx_pll_waitrequest_pio_s1_agent:rf_sink_data
	wire          tx_pll_waitrequest_pio_s1_agent_rsp_fifo_out_ready;                                          // tx_pll_waitrequest_pio_s1_agent:rf_sink_ready -> tx_pll_waitrequest_pio_s1_agent_rsp_fifo:out_ready
	wire          tx_pll_waitrequest_pio_s1_agent_rsp_fifo_out_startofpacket;                                  // tx_pll_waitrequest_pio_s1_agent_rsp_fifo:out_startofpacket -> tx_pll_waitrequest_pio_s1_agent:rf_sink_startofpacket
	wire          tx_pll_waitrequest_pio_s1_agent_rsp_fifo_out_endofpacket;                                    // tx_pll_waitrequest_pio_s1_agent_rsp_fifo:out_endofpacket -> tx_pll_waitrequest_pio_s1_agent:rf_sink_endofpacket
	wire          tx_pll_waitrequest_pio_s1_agent_rdata_fifo_src_valid;                                        // tx_pll_waitrequest_pio_s1_agent:rdata_fifo_src_valid -> tx_pll_waitrequest_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_pll_waitrequest_pio_s1_agent_rdata_fifo_src_data;                                         // tx_pll_waitrequest_pio_s1_agent:rdata_fifo_src_data -> tx_pll_waitrequest_pio_s1_agent:rdata_fifo_sink_data
	wire          tx_pll_waitrequest_pio_s1_agent_rdata_fifo_src_ready;                                        // tx_pll_waitrequest_pio_s1_agent:rdata_fifo_sink_ready -> tx_pll_waitrequest_pio_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_018_src_valid;                                                                       // cmd_mux_018:src_valid -> tx_pll_waitrequest_pio_s1_agent:cp_valid
	wire  [107:0] cmd_mux_018_src_data;                                                                        // cmd_mux_018:src_data -> tx_pll_waitrequest_pio_s1_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                                       // tx_pll_waitrequest_pio_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [26:0] cmd_mux_018_src_channel;                                                                     // cmd_mux_018:src_channel -> tx_pll_waitrequest_pio_s1_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                               // cmd_mux_018:src_startofpacket -> tx_pll_waitrequest_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                                 // cmd_mux_018:src_endofpacket -> tx_pll_waitrequest_pio_s1_agent:cp_endofpacket
	wire   [31:0] tx_pma_ch_s1_agent_m0_readdata;                                                              // tx_pma_ch_s1_translator:uav_readdata -> tx_pma_ch_s1_agent:m0_readdata
	wire          tx_pma_ch_s1_agent_m0_waitrequest;                                                           // tx_pma_ch_s1_translator:uav_waitrequest -> tx_pma_ch_s1_agent:m0_waitrequest
	wire          tx_pma_ch_s1_agent_m0_debugaccess;                                                           // tx_pma_ch_s1_agent:m0_debugaccess -> tx_pma_ch_s1_translator:uav_debugaccess
	wire   [18:0] tx_pma_ch_s1_agent_m0_address;                                                               // tx_pma_ch_s1_agent:m0_address -> tx_pma_ch_s1_translator:uav_address
	wire    [3:0] tx_pma_ch_s1_agent_m0_byteenable;                                                            // tx_pma_ch_s1_agent:m0_byteenable -> tx_pma_ch_s1_translator:uav_byteenable
	wire          tx_pma_ch_s1_agent_m0_read;                                                                  // tx_pma_ch_s1_agent:m0_read -> tx_pma_ch_s1_translator:uav_read
	wire          tx_pma_ch_s1_agent_m0_readdatavalid;                                                         // tx_pma_ch_s1_translator:uav_readdatavalid -> tx_pma_ch_s1_agent:m0_readdatavalid
	wire          tx_pma_ch_s1_agent_m0_lock;                                                                  // tx_pma_ch_s1_agent:m0_lock -> tx_pma_ch_s1_translator:uav_lock
	wire   [31:0] tx_pma_ch_s1_agent_m0_writedata;                                                             // tx_pma_ch_s1_agent:m0_writedata -> tx_pma_ch_s1_translator:uav_writedata
	wire          tx_pma_ch_s1_agent_m0_write;                                                                 // tx_pma_ch_s1_agent:m0_write -> tx_pma_ch_s1_translator:uav_write
	wire    [2:0] tx_pma_ch_s1_agent_m0_burstcount;                                                            // tx_pma_ch_s1_agent:m0_burstcount -> tx_pma_ch_s1_translator:uav_burstcount
	wire          tx_pma_ch_s1_agent_rf_source_valid;                                                          // tx_pma_ch_s1_agent:rf_source_valid -> tx_pma_ch_s1_agent_rsp_fifo:in_valid
	wire  [108:0] tx_pma_ch_s1_agent_rf_source_data;                                                           // tx_pma_ch_s1_agent:rf_source_data -> tx_pma_ch_s1_agent_rsp_fifo:in_data
	wire          tx_pma_ch_s1_agent_rf_source_ready;                                                          // tx_pma_ch_s1_agent_rsp_fifo:in_ready -> tx_pma_ch_s1_agent:rf_source_ready
	wire          tx_pma_ch_s1_agent_rf_source_startofpacket;                                                  // tx_pma_ch_s1_agent:rf_source_startofpacket -> tx_pma_ch_s1_agent_rsp_fifo:in_startofpacket
	wire          tx_pma_ch_s1_agent_rf_source_endofpacket;                                                    // tx_pma_ch_s1_agent:rf_source_endofpacket -> tx_pma_ch_s1_agent_rsp_fifo:in_endofpacket
	wire          tx_pma_ch_s1_agent_rsp_fifo_out_valid;                                                       // tx_pma_ch_s1_agent_rsp_fifo:out_valid -> tx_pma_ch_s1_agent:rf_sink_valid
	wire  [108:0] tx_pma_ch_s1_agent_rsp_fifo_out_data;                                                        // tx_pma_ch_s1_agent_rsp_fifo:out_data -> tx_pma_ch_s1_agent:rf_sink_data
	wire          tx_pma_ch_s1_agent_rsp_fifo_out_ready;                                                       // tx_pma_ch_s1_agent:rf_sink_ready -> tx_pma_ch_s1_agent_rsp_fifo:out_ready
	wire          tx_pma_ch_s1_agent_rsp_fifo_out_startofpacket;                                               // tx_pma_ch_s1_agent_rsp_fifo:out_startofpacket -> tx_pma_ch_s1_agent:rf_sink_startofpacket
	wire          tx_pma_ch_s1_agent_rsp_fifo_out_endofpacket;                                                 // tx_pma_ch_s1_agent_rsp_fifo:out_endofpacket -> tx_pma_ch_s1_agent:rf_sink_endofpacket
	wire          tx_pma_ch_s1_agent_rdata_fifo_src_valid;                                                     // tx_pma_ch_s1_agent:rdata_fifo_src_valid -> tx_pma_ch_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_pma_ch_s1_agent_rdata_fifo_src_data;                                                      // tx_pma_ch_s1_agent:rdata_fifo_src_data -> tx_pma_ch_s1_agent:rdata_fifo_sink_data
	wire          tx_pma_ch_s1_agent_rdata_fifo_src_ready;                                                     // tx_pma_ch_s1_agent:rdata_fifo_sink_ready -> tx_pma_ch_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_019_src_valid;                                                                       // cmd_mux_019:src_valid -> tx_pma_ch_s1_agent:cp_valid
	wire  [107:0] cmd_mux_019_src_data;                                                                        // cmd_mux_019:src_data -> tx_pma_ch_s1_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                                       // tx_pma_ch_s1_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [26:0] cmd_mux_019_src_channel;                                                                     // cmd_mux_019:src_channel -> tx_pma_ch_s1_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                                               // cmd_mux_019:src_startofpacket -> tx_pma_ch_s1_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                                 // cmd_mux_019:src_endofpacket -> tx_pma_ch_s1_agent:cp_endofpacket
	wire   [31:0] tx_pma_cal_busy_pio_s1_agent_m0_readdata;                                                    // tx_pma_cal_busy_pio_s1_translator:uav_readdata -> tx_pma_cal_busy_pio_s1_agent:m0_readdata
	wire          tx_pma_cal_busy_pio_s1_agent_m0_waitrequest;                                                 // tx_pma_cal_busy_pio_s1_translator:uav_waitrequest -> tx_pma_cal_busy_pio_s1_agent:m0_waitrequest
	wire          tx_pma_cal_busy_pio_s1_agent_m0_debugaccess;                                                 // tx_pma_cal_busy_pio_s1_agent:m0_debugaccess -> tx_pma_cal_busy_pio_s1_translator:uav_debugaccess
	wire   [18:0] tx_pma_cal_busy_pio_s1_agent_m0_address;                                                     // tx_pma_cal_busy_pio_s1_agent:m0_address -> tx_pma_cal_busy_pio_s1_translator:uav_address
	wire    [3:0] tx_pma_cal_busy_pio_s1_agent_m0_byteenable;                                                  // tx_pma_cal_busy_pio_s1_agent:m0_byteenable -> tx_pma_cal_busy_pio_s1_translator:uav_byteenable
	wire          tx_pma_cal_busy_pio_s1_agent_m0_read;                                                        // tx_pma_cal_busy_pio_s1_agent:m0_read -> tx_pma_cal_busy_pio_s1_translator:uav_read
	wire          tx_pma_cal_busy_pio_s1_agent_m0_readdatavalid;                                               // tx_pma_cal_busy_pio_s1_translator:uav_readdatavalid -> tx_pma_cal_busy_pio_s1_agent:m0_readdatavalid
	wire          tx_pma_cal_busy_pio_s1_agent_m0_lock;                                                        // tx_pma_cal_busy_pio_s1_agent:m0_lock -> tx_pma_cal_busy_pio_s1_translator:uav_lock
	wire   [31:0] tx_pma_cal_busy_pio_s1_agent_m0_writedata;                                                   // tx_pma_cal_busy_pio_s1_agent:m0_writedata -> tx_pma_cal_busy_pio_s1_translator:uav_writedata
	wire          tx_pma_cal_busy_pio_s1_agent_m0_write;                                                       // tx_pma_cal_busy_pio_s1_agent:m0_write -> tx_pma_cal_busy_pio_s1_translator:uav_write
	wire    [2:0] tx_pma_cal_busy_pio_s1_agent_m0_burstcount;                                                  // tx_pma_cal_busy_pio_s1_agent:m0_burstcount -> tx_pma_cal_busy_pio_s1_translator:uav_burstcount
	wire          tx_pma_cal_busy_pio_s1_agent_rf_source_valid;                                                // tx_pma_cal_busy_pio_s1_agent:rf_source_valid -> tx_pma_cal_busy_pio_s1_agent_rsp_fifo:in_valid
	wire  [108:0] tx_pma_cal_busy_pio_s1_agent_rf_source_data;                                                 // tx_pma_cal_busy_pio_s1_agent:rf_source_data -> tx_pma_cal_busy_pio_s1_agent_rsp_fifo:in_data
	wire          tx_pma_cal_busy_pio_s1_agent_rf_source_ready;                                                // tx_pma_cal_busy_pio_s1_agent_rsp_fifo:in_ready -> tx_pma_cal_busy_pio_s1_agent:rf_source_ready
	wire          tx_pma_cal_busy_pio_s1_agent_rf_source_startofpacket;                                        // tx_pma_cal_busy_pio_s1_agent:rf_source_startofpacket -> tx_pma_cal_busy_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          tx_pma_cal_busy_pio_s1_agent_rf_source_endofpacket;                                          // tx_pma_cal_busy_pio_s1_agent:rf_source_endofpacket -> tx_pma_cal_busy_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          tx_pma_cal_busy_pio_s1_agent_rsp_fifo_out_valid;                                             // tx_pma_cal_busy_pio_s1_agent_rsp_fifo:out_valid -> tx_pma_cal_busy_pio_s1_agent:rf_sink_valid
	wire  [108:0] tx_pma_cal_busy_pio_s1_agent_rsp_fifo_out_data;                                              // tx_pma_cal_busy_pio_s1_agent_rsp_fifo:out_data -> tx_pma_cal_busy_pio_s1_agent:rf_sink_data
	wire          tx_pma_cal_busy_pio_s1_agent_rsp_fifo_out_ready;                                             // tx_pma_cal_busy_pio_s1_agent:rf_sink_ready -> tx_pma_cal_busy_pio_s1_agent_rsp_fifo:out_ready
	wire          tx_pma_cal_busy_pio_s1_agent_rsp_fifo_out_startofpacket;                                     // tx_pma_cal_busy_pio_s1_agent_rsp_fifo:out_startofpacket -> tx_pma_cal_busy_pio_s1_agent:rf_sink_startofpacket
	wire          tx_pma_cal_busy_pio_s1_agent_rsp_fifo_out_endofpacket;                                       // tx_pma_cal_busy_pio_s1_agent_rsp_fifo:out_endofpacket -> tx_pma_cal_busy_pio_s1_agent:rf_sink_endofpacket
	wire          tx_pma_cal_busy_pio_s1_agent_rdata_fifo_src_valid;                                           // tx_pma_cal_busy_pio_s1_agent:rdata_fifo_src_valid -> tx_pma_cal_busy_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_pma_cal_busy_pio_s1_agent_rdata_fifo_src_data;                                            // tx_pma_cal_busy_pio_s1_agent:rdata_fifo_src_data -> tx_pma_cal_busy_pio_s1_agent:rdata_fifo_sink_data
	wire          tx_pma_cal_busy_pio_s1_agent_rdata_fifo_src_ready;                                           // tx_pma_cal_busy_pio_s1_agent:rdata_fifo_sink_ready -> tx_pma_cal_busy_pio_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_020_src_valid;                                                                       // cmd_mux_020:src_valid -> tx_pma_cal_busy_pio_s1_agent:cp_valid
	wire  [107:0] cmd_mux_020_src_data;                                                                        // cmd_mux_020:src_data -> tx_pma_cal_busy_pio_s1_agent:cp_data
	wire          cmd_mux_020_src_ready;                                                                       // tx_pma_cal_busy_pio_s1_agent:cp_ready -> cmd_mux_020:src_ready
	wire   [26:0] cmd_mux_020_src_channel;                                                                     // cmd_mux_020:src_channel -> tx_pma_cal_busy_pio_s1_agent:cp_channel
	wire          cmd_mux_020_src_startofpacket;                                                               // cmd_mux_020:src_startofpacket -> tx_pma_cal_busy_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                                 // cmd_mux_020:src_endofpacket -> tx_pma_cal_busy_pio_s1_agent:cp_endofpacket
	wire   [31:0] tx_rcfg_en_pio_s1_agent_m0_readdata;                                                         // tx_rcfg_en_pio_s1_translator:uav_readdata -> tx_rcfg_en_pio_s1_agent:m0_readdata
	wire          tx_rcfg_en_pio_s1_agent_m0_waitrequest;                                                      // tx_rcfg_en_pio_s1_translator:uav_waitrequest -> tx_rcfg_en_pio_s1_agent:m0_waitrequest
	wire          tx_rcfg_en_pio_s1_agent_m0_debugaccess;                                                      // tx_rcfg_en_pio_s1_agent:m0_debugaccess -> tx_rcfg_en_pio_s1_translator:uav_debugaccess
	wire   [18:0] tx_rcfg_en_pio_s1_agent_m0_address;                                                          // tx_rcfg_en_pio_s1_agent:m0_address -> tx_rcfg_en_pio_s1_translator:uav_address
	wire    [3:0] tx_rcfg_en_pio_s1_agent_m0_byteenable;                                                       // tx_rcfg_en_pio_s1_agent:m0_byteenable -> tx_rcfg_en_pio_s1_translator:uav_byteenable
	wire          tx_rcfg_en_pio_s1_agent_m0_read;                                                             // tx_rcfg_en_pio_s1_agent:m0_read -> tx_rcfg_en_pio_s1_translator:uav_read
	wire          tx_rcfg_en_pio_s1_agent_m0_readdatavalid;                                                    // tx_rcfg_en_pio_s1_translator:uav_readdatavalid -> tx_rcfg_en_pio_s1_agent:m0_readdatavalid
	wire          tx_rcfg_en_pio_s1_agent_m0_lock;                                                             // tx_rcfg_en_pio_s1_agent:m0_lock -> tx_rcfg_en_pio_s1_translator:uav_lock
	wire   [31:0] tx_rcfg_en_pio_s1_agent_m0_writedata;                                                        // tx_rcfg_en_pio_s1_agent:m0_writedata -> tx_rcfg_en_pio_s1_translator:uav_writedata
	wire          tx_rcfg_en_pio_s1_agent_m0_write;                                                            // tx_rcfg_en_pio_s1_agent:m0_write -> tx_rcfg_en_pio_s1_translator:uav_write
	wire    [2:0] tx_rcfg_en_pio_s1_agent_m0_burstcount;                                                       // tx_rcfg_en_pio_s1_agent:m0_burstcount -> tx_rcfg_en_pio_s1_translator:uav_burstcount
	wire          tx_rcfg_en_pio_s1_agent_rf_source_valid;                                                     // tx_rcfg_en_pio_s1_agent:rf_source_valid -> tx_rcfg_en_pio_s1_agent_rsp_fifo:in_valid
	wire  [108:0] tx_rcfg_en_pio_s1_agent_rf_source_data;                                                      // tx_rcfg_en_pio_s1_agent:rf_source_data -> tx_rcfg_en_pio_s1_agent_rsp_fifo:in_data
	wire          tx_rcfg_en_pio_s1_agent_rf_source_ready;                                                     // tx_rcfg_en_pio_s1_agent_rsp_fifo:in_ready -> tx_rcfg_en_pio_s1_agent:rf_source_ready
	wire          tx_rcfg_en_pio_s1_agent_rf_source_startofpacket;                                             // tx_rcfg_en_pio_s1_agent:rf_source_startofpacket -> tx_rcfg_en_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          tx_rcfg_en_pio_s1_agent_rf_source_endofpacket;                                               // tx_rcfg_en_pio_s1_agent:rf_source_endofpacket -> tx_rcfg_en_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          tx_rcfg_en_pio_s1_agent_rsp_fifo_out_valid;                                                  // tx_rcfg_en_pio_s1_agent_rsp_fifo:out_valid -> tx_rcfg_en_pio_s1_agent:rf_sink_valid
	wire  [108:0] tx_rcfg_en_pio_s1_agent_rsp_fifo_out_data;                                                   // tx_rcfg_en_pio_s1_agent_rsp_fifo:out_data -> tx_rcfg_en_pio_s1_agent:rf_sink_data
	wire          tx_rcfg_en_pio_s1_agent_rsp_fifo_out_ready;                                                  // tx_rcfg_en_pio_s1_agent:rf_sink_ready -> tx_rcfg_en_pio_s1_agent_rsp_fifo:out_ready
	wire          tx_rcfg_en_pio_s1_agent_rsp_fifo_out_startofpacket;                                          // tx_rcfg_en_pio_s1_agent_rsp_fifo:out_startofpacket -> tx_rcfg_en_pio_s1_agent:rf_sink_startofpacket
	wire          tx_rcfg_en_pio_s1_agent_rsp_fifo_out_endofpacket;                                            // tx_rcfg_en_pio_s1_agent_rsp_fifo:out_endofpacket -> tx_rcfg_en_pio_s1_agent:rf_sink_endofpacket
	wire          tx_rcfg_en_pio_s1_agent_rdata_fifo_src_valid;                                                // tx_rcfg_en_pio_s1_agent:rdata_fifo_src_valid -> tx_rcfg_en_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_rcfg_en_pio_s1_agent_rdata_fifo_src_data;                                                 // tx_rcfg_en_pio_s1_agent:rdata_fifo_src_data -> tx_rcfg_en_pio_s1_agent:rdata_fifo_sink_data
	wire          tx_rcfg_en_pio_s1_agent_rdata_fifo_src_ready;                                                // tx_rcfg_en_pio_s1_agent:rdata_fifo_sink_ready -> tx_rcfg_en_pio_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_021_src_valid;                                                                       // cmd_mux_021:src_valid -> tx_rcfg_en_pio_s1_agent:cp_valid
	wire  [107:0] cmd_mux_021_src_data;                                                                        // cmd_mux_021:src_data -> tx_rcfg_en_pio_s1_agent:cp_data
	wire          cmd_mux_021_src_ready;                                                                       // tx_rcfg_en_pio_s1_agent:cp_ready -> cmd_mux_021:src_ready
	wire   [26:0] cmd_mux_021_src_channel;                                                                     // cmd_mux_021:src_channel -> tx_rcfg_en_pio_s1_agent:cp_channel
	wire          cmd_mux_021_src_startofpacket;                                                               // cmd_mux_021:src_startofpacket -> tx_rcfg_en_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                                 // cmd_mux_021:src_endofpacket -> tx_rcfg_en_pio_s1_agent:cp_endofpacket
	wire   [31:0] tx_pma_waitrequest_pio_s1_agent_m0_readdata;                                                 // tx_pma_waitrequest_pio_s1_translator:uav_readdata -> tx_pma_waitrequest_pio_s1_agent:m0_readdata
	wire          tx_pma_waitrequest_pio_s1_agent_m0_waitrequest;                                              // tx_pma_waitrequest_pio_s1_translator:uav_waitrequest -> tx_pma_waitrequest_pio_s1_agent:m0_waitrequest
	wire          tx_pma_waitrequest_pio_s1_agent_m0_debugaccess;                                              // tx_pma_waitrequest_pio_s1_agent:m0_debugaccess -> tx_pma_waitrequest_pio_s1_translator:uav_debugaccess
	wire   [18:0] tx_pma_waitrequest_pio_s1_agent_m0_address;                                                  // tx_pma_waitrequest_pio_s1_agent:m0_address -> tx_pma_waitrequest_pio_s1_translator:uav_address
	wire    [3:0] tx_pma_waitrequest_pio_s1_agent_m0_byteenable;                                               // tx_pma_waitrequest_pio_s1_agent:m0_byteenable -> tx_pma_waitrequest_pio_s1_translator:uav_byteenable
	wire          tx_pma_waitrequest_pio_s1_agent_m0_read;                                                     // tx_pma_waitrequest_pio_s1_agent:m0_read -> tx_pma_waitrequest_pio_s1_translator:uav_read
	wire          tx_pma_waitrequest_pio_s1_agent_m0_readdatavalid;                                            // tx_pma_waitrequest_pio_s1_translator:uav_readdatavalid -> tx_pma_waitrequest_pio_s1_agent:m0_readdatavalid
	wire          tx_pma_waitrequest_pio_s1_agent_m0_lock;                                                     // tx_pma_waitrequest_pio_s1_agent:m0_lock -> tx_pma_waitrequest_pio_s1_translator:uav_lock
	wire   [31:0] tx_pma_waitrequest_pio_s1_agent_m0_writedata;                                                // tx_pma_waitrequest_pio_s1_agent:m0_writedata -> tx_pma_waitrequest_pio_s1_translator:uav_writedata
	wire          tx_pma_waitrequest_pio_s1_agent_m0_write;                                                    // tx_pma_waitrequest_pio_s1_agent:m0_write -> tx_pma_waitrequest_pio_s1_translator:uav_write
	wire    [2:0] tx_pma_waitrequest_pio_s1_agent_m0_burstcount;                                               // tx_pma_waitrequest_pio_s1_agent:m0_burstcount -> tx_pma_waitrequest_pio_s1_translator:uav_burstcount
	wire          tx_pma_waitrequest_pio_s1_agent_rf_source_valid;                                             // tx_pma_waitrequest_pio_s1_agent:rf_source_valid -> tx_pma_waitrequest_pio_s1_agent_rsp_fifo:in_valid
	wire  [108:0] tx_pma_waitrequest_pio_s1_agent_rf_source_data;                                              // tx_pma_waitrequest_pio_s1_agent:rf_source_data -> tx_pma_waitrequest_pio_s1_agent_rsp_fifo:in_data
	wire          tx_pma_waitrequest_pio_s1_agent_rf_source_ready;                                             // tx_pma_waitrequest_pio_s1_agent_rsp_fifo:in_ready -> tx_pma_waitrequest_pio_s1_agent:rf_source_ready
	wire          tx_pma_waitrequest_pio_s1_agent_rf_source_startofpacket;                                     // tx_pma_waitrequest_pio_s1_agent:rf_source_startofpacket -> tx_pma_waitrequest_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          tx_pma_waitrequest_pio_s1_agent_rf_source_endofpacket;                                       // tx_pma_waitrequest_pio_s1_agent:rf_source_endofpacket -> tx_pma_waitrequest_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          tx_pma_waitrequest_pio_s1_agent_rsp_fifo_out_valid;                                          // tx_pma_waitrequest_pio_s1_agent_rsp_fifo:out_valid -> tx_pma_waitrequest_pio_s1_agent:rf_sink_valid
	wire  [108:0] tx_pma_waitrequest_pio_s1_agent_rsp_fifo_out_data;                                           // tx_pma_waitrequest_pio_s1_agent_rsp_fifo:out_data -> tx_pma_waitrequest_pio_s1_agent:rf_sink_data
	wire          tx_pma_waitrequest_pio_s1_agent_rsp_fifo_out_ready;                                          // tx_pma_waitrequest_pio_s1_agent:rf_sink_ready -> tx_pma_waitrequest_pio_s1_agent_rsp_fifo:out_ready
	wire          tx_pma_waitrequest_pio_s1_agent_rsp_fifo_out_startofpacket;                                  // tx_pma_waitrequest_pio_s1_agent_rsp_fifo:out_startofpacket -> tx_pma_waitrequest_pio_s1_agent:rf_sink_startofpacket
	wire          tx_pma_waitrequest_pio_s1_agent_rsp_fifo_out_endofpacket;                                    // tx_pma_waitrequest_pio_s1_agent_rsp_fifo:out_endofpacket -> tx_pma_waitrequest_pio_s1_agent:rf_sink_endofpacket
	wire          tx_pma_waitrequest_pio_s1_agent_rdata_fifo_src_valid;                                        // tx_pma_waitrequest_pio_s1_agent:rdata_fifo_src_valid -> tx_pma_waitrequest_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_pma_waitrequest_pio_s1_agent_rdata_fifo_src_data;                                         // tx_pma_waitrequest_pio_s1_agent:rdata_fifo_src_data -> tx_pma_waitrequest_pio_s1_agent:rdata_fifo_sink_data
	wire          tx_pma_waitrequest_pio_s1_agent_rdata_fifo_src_ready;                                        // tx_pma_waitrequest_pio_s1_agent:rdata_fifo_sink_ready -> tx_pma_waitrequest_pio_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_022_src_valid;                                                                       // cmd_mux_022:src_valid -> tx_pma_waitrequest_pio_s1_agent:cp_valid
	wire  [107:0] cmd_mux_022_src_data;                                                                        // cmd_mux_022:src_data -> tx_pma_waitrequest_pio_s1_agent:cp_data
	wire          cmd_mux_022_src_ready;                                                                       // tx_pma_waitrequest_pio_s1_agent:cp_ready -> cmd_mux_022:src_ready
	wire   [26:0] cmd_mux_022_src_channel;                                                                     // cmd_mux_022:src_channel -> tx_pma_waitrequest_pio_s1_agent:cp_channel
	wire          cmd_mux_022_src_startofpacket;                                                               // cmd_mux_022:src_startofpacket -> tx_pma_waitrequest_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                                 // cmd_mux_022:src_endofpacket -> tx_pma_waitrequest_pio_s1_agent:cp_endofpacket
	wire   [31:0] wd_timer_s1_agent_m0_readdata;                                                               // wd_timer_s1_translator:uav_readdata -> wd_timer_s1_agent:m0_readdata
	wire          wd_timer_s1_agent_m0_waitrequest;                                                            // wd_timer_s1_translator:uav_waitrequest -> wd_timer_s1_agent:m0_waitrequest
	wire          wd_timer_s1_agent_m0_debugaccess;                                                            // wd_timer_s1_agent:m0_debugaccess -> wd_timer_s1_translator:uav_debugaccess
	wire   [18:0] wd_timer_s1_agent_m0_address;                                                                // wd_timer_s1_agent:m0_address -> wd_timer_s1_translator:uav_address
	wire    [3:0] wd_timer_s1_agent_m0_byteenable;                                                             // wd_timer_s1_agent:m0_byteenable -> wd_timer_s1_translator:uav_byteenable
	wire          wd_timer_s1_agent_m0_read;                                                                   // wd_timer_s1_agent:m0_read -> wd_timer_s1_translator:uav_read
	wire          wd_timer_s1_agent_m0_readdatavalid;                                                          // wd_timer_s1_translator:uav_readdatavalid -> wd_timer_s1_agent:m0_readdatavalid
	wire          wd_timer_s1_agent_m0_lock;                                                                   // wd_timer_s1_agent:m0_lock -> wd_timer_s1_translator:uav_lock
	wire   [31:0] wd_timer_s1_agent_m0_writedata;                                                              // wd_timer_s1_agent:m0_writedata -> wd_timer_s1_translator:uav_writedata
	wire          wd_timer_s1_agent_m0_write;                                                                  // wd_timer_s1_agent:m0_write -> wd_timer_s1_translator:uav_write
	wire    [2:0] wd_timer_s1_agent_m0_burstcount;                                                             // wd_timer_s1_agent:m0_burstcount -> wd_timer_s1_translator:uav_burstcount
	wire          wd_timer_s1_agent_rf_source_valid;                                                           // wd_timer_s1_agent:rf_source_valid -> wd_timer_s1_agent_rsp_fifo:in_valid
	wire  [108:0] wd_timer_s1_agent_rf_source_data;                                                            // wd_timer_s1_agent:rf_source_data -> wd_timer_s1_agent_rsp_fifo:in_data
	wire          wd_timer_s1_agent_rf_source_ready;                                                           // wd_timer_s1_agent_rsp_fifo:in_ready -> wd_timer_s1_agent:rf_source_ready
	wire          wd_timer_s1_agent_rf_source_startofpacket;                                                   // wd_timer_s1_agent:rf_source_startofpacket -> wd_timer_s1_agent_rsp_fifo:in_startofpacket
	wire          wd_timer_s1_agent_rf_source_endofpacket;                                                     // wd_timer_s1_agent:rf_source_endofpacket -> wd_timer_s1_agent_rsp_fifo:in_endofpacket
	wire          wd_timer_s1_agent_rsp_fifo_out_valid;                                                        // wd_timer_s1_agent_rsp_fifo:out_valid -> wd_timer_s1_agent:rf_sink_valid
	wire  [108:0] wd_timer_s1_agent_rsp_fifo_out_data;                                                         // wd_timer_s1_agent_rsp_fifo:out_data -> wd_timer_s1_agent:rf_sink_data
	wire          wd_timer_s1_agent_rsp_fifo_out_ready;                                                        // wd_timer_s1_agent:rf_sink_ready -> wd_timer_s1_agent_rsp_fifo:out_ready
	wire          wd_timer_s1_agent_rsp_fifo_out_startofpacket;                                                // wd_timer_s1_agent_rsp_fifo:out_startofpacket -> wd_timer_s1_agent:rf_sink_startofpacket
	wire          wd_timer_s1_agent_rsp_fifo_out_endofpacket;                                                  // wd_timer_s1_agent_rsp_fifo:out_endofpacket -> wd_timer_s1_agent:rf_sink_endofpacket
	wire          wd_timer_s1_agent_rdata_fifo_src_valid;                                                      // wd_timer_s1_agent:rdata_fifo_src_valid -> wd_timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] wd_timer_s1_agent_rdata_fifo_src_data;                                                       // wd_timer_s1_agent:rdata_fifo_src_data -> wd_timer_s1_agent:rdata_fifo_sink_data
	wire          wd_timer_s1_agent_rdata_fifo_src_ready;                                                      // wd_timer_s1_agent:rdata_fifo_sink_ready -> wd_timer_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_023_src_valid;                                                                       // cmd_mux_023:src_valid -> wd_timer_s1_agent:cp_valid
	wire  [107:0] cmd_mux_023_src_data;                                                                        // cmd_mux_023:src_data -> wd_timer_s1_agent:cp_data
	wire          cmd_mux_023_src_ready;                                                                       // wd_timer_s1_agent:cp_ready -> cmd_mux_023:src_ready
	wire   [26:0] cmd_mux_023_src_channel;                                                                     // cmd_mux_023:src_channel -> wd_timer_s1_agent:cp_channel
	wire          cmd_mux_023_src_startofpacket;                                                               // cmd_mux_023:src_startofpacket -> wd_timer_s1_agent:cp_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                                 // cmd_mux_023:src_endofpacket -> wd_timer_s1_agent:cp_endofpacket
	wire   [31:0] tx_hpd_req_pio_s1_agent_m0_readdata;                                                         // tx_hpd_req_pio_s1_translator:uav_readdata -> tx_hpd_req_pio_s1_agent:m0_readdata
	wire          tx_hpd_req_pio_s1_agent_m0_waitrequest;                                                      // tx_hpd_req_pio_s1_translator:uav_waitrequest -> tx_hpd_req_pio_s1_agent:m0_waitrequest
	wire          tx_hpd_req_pio_s1_agent_m0_debugaccess;                                                      // tx_hpd_req_pio_s1_agent:m0_debugaccess -> tx_hpd_req_pio_s1_translator:uav_debugaccess
	wire   [18:0] tx_hpd_req_pio_s1_agent_m0_address;                                                          // tx_hpd_req_pio_s1_agent:m0_address -> tx_hpd_req_pio_s1_translator:uav_address
	wire    [3:0] tx_hpd_req_pio_s1_agent_m0_byteenable;                                                       // tx_hpd_req_pio_s1_agent:m0_byteenable -> tx_hpd_req_pio_s1_translator:uav_byteenable
	wire          tx_hpd_req_pio_s1_agent_m0_read;                                                             // tx_hpd_req_pio_s1_agent:m0_read -> tx_hpd_req_pio_s1_translator:uav_read
	wire          tx_hpd_req_pio_s1_agent_m0_readdatavalid;                                                    // tx_hpd_req_pio_s1_translator:uav_readdatavalid -> tx_hpd_req_pio_s1_agent:m0_readdatavalid
	wire          tx_hpd_req_pio_s1_agent_m0_lock;                                                             // tx_hpd_req_pio_s1_agent:m0_lock -> tx_hpd_req_pio_s1_translator:uav_lock
	wire   [31:0] tx_hpd_req_pio_s1_agent_m0_writedata;                                                        // tx_hpd_req_pio_s1_agent:m0_writedata -> tx_hpd_req_pio_s1_translator:uav_writedata
	wire          tx_hpd_req_pio_s1_agent_m0_write;                                                            // tx_hpd_req_pio_s1_agent:m0_write -> tx_hpd_req_pio_s1_translator:uav_write
	wire    [2:0] tx_hpd_req_pio_s1_agent_m0_burstcount;                                                       // tx_hpd_req_pio_s1_agent:m0_burstcount -> tx_hpd_req_pio_s1_translator:uav_burstcount
	wire          tx_hpd_req_pio_s1_agent_rf_source_valid;                                                     // tx_hpd_req_pio_s1_agent:rf_source_valid -> tx_hpd_req_pio_s1_agent_rsp_fifo:in_valid
	wire  [108:0] tx_hpd_req_pio_s1_agent_rf_source_data;                                                      // tx_hpd_req_pio_s1_agent:rf_source_data -> tx_hpd_req_pio_s1_agent_rsp_fifo:in_data
	wire          tx_hpd_req_pio_s1_agent_rf_source_ready;                                                     // tx_hpd_req_pio_s1_agent_rsp_fifo:in_ready -> tx_hpd_req_pio_s1_agent:rf_source_ready
	wire          tx_hpd_req_pio_s1_agent_rf_source_startofpacket;                                             // tx_hpd_req_pio_s1_agent:rf_source_startofpacket -> tx_hpd_req_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          tx_hpd_req_pio_s1_agent_rf_source_endofpacket;                                               // tx_hpd_req_pio_s1_agent:rf_source_endofpacket -> tx_hpd_req_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          tx_hpd_req_pio_s1_agent_rsp_fifo_out_valid;                                                  // tx_hpd_req_pio_s1_agent_rsp_fifo:out_valid -> tx_hpd_req_pio_s1_agent:rf_sink_valid
	wire  [108:0] tx_hpd_req_pio_s1_agent_rsp_fifo_out_data;                                                   // tx_hpd_req_pio_s1_agent_rsp_fifo:out_data -> tx_hpd_req_pio_s1_agent:rf_sink_data
	wire          tx_hpd_req_pio_s1_agent_rsp_fifo_out_ready;                                                  // tx_hpd_req_pio_s1_agent:rf_sink_ready -> tx_hpd_req_pio_s1_agent_rsp_fifo:out_ready
	wire          tx_hpd_req_pio_s1_agent_rsp_fifo_out_startofpacket;                                          // tx_hpd_req_pio_s1_agent_rsp_fifo:out_startofpacket -> tx_hpd_req_pio_s1_agent:rf_sink_startofpacket
	wire          tx_hpd_req_pio_s1_agent_rsp_fifo_out_endofpacket;                                            // tx_hpd_req_pio_s1_agent_rsp_fifo:out_endofpacket -> tx_hpd_req_pio_s1_agent:rf_sink_endofpacket
	wire          tx_hpd_req_pio_s1_agent_rdata_fifo_src_valid;                                                // tx_hpd_req_pio_s1_agent:rdata_fifo_src_valid -> tx_hpd_req_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_hpd_req_pio_s1_agent_rdata_fifo_src_data;                                                 // tx_hpd_req_pio_s1_agent:rdata_fifo_src_data -> tx_hpd_req_pio_s1_agent:rdata_fifo_sink_data
	wire          tx_hpd_req_pio_s1_agent_rdata_fifo_src_ready;                                                // tx_hpd_req_pio_s1_agent:rdata_fifo_sink_ready -> tx_hpd_req_pio_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_024_src_valid;                                                                       // cmd_mux_024:src_valid -> tx_hpd_req_pio_s1_agent:cp_valid
	wire  [107:0] cmd_mux_024_src_data;                                                                        // cmd_mux_024:src_data -> tx_hpd_req_pio_s1_agent:cp_data
	wire          cmd_mux_024_src_ready;                                                                       // tx_hpd_req_pio_s1_agent:cp_ready -> cmd_mux_024:src_ready
	wire   [26:0] cmd_mux_024_src_channel;                                                                     // cmd_mux_024:src_channel -> tx_hpd_req_pio_s1_agent:cp_channel
	wire          cmd_mux_024_src_startofpacket;                                                               // cmd_mux_024:src_startofpacket -> tx_hpd_req_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                                                 // cmd_mux_024:src_endofpacket -> tx_hpd_req_pio_s1_agent:cp_endofpacket
	wire   [31:0] tx_hpd_ack_pio_s1_agent_m0_readdata;                                                         // tx_hpd_ack_pio_s1_translator:uav_readdata -> tx_hpd_ack_pio_s1_agent:m0_readdata
	wire          tx_hpd_ack_pio_s1_agent_m0_waitrequest;                                                      // tx_hpd_ack_pio_s1_translator:uav_waitrequest -> tx_hpd_ack_pio_s1_agent:m0_waitrequest
	wire          tx_hpd_ack_pio_s1_agent_m0_debugaccess;                                                      // tx_hpd_ack_pio_s1_agent:m0_debugaccess -> tx_hpd_ack_pio_s1_translator:uav_debugaccess
	wire   [18:0] tx_hpd_ack_pio_s1_agent_m0_address;                                                          // tx_hpd_ack_pio_s1_agent:m0_address -> tx_hpd_ack_pio_s1_translator:uav_address
	wire    [3:0] tx_hpd_ack_pio_s1_agent_m0_byteenable;                                                       // tx_hpd_ack_pio_s1_agent:m0_byteenable -> tx_hpd_ack_pio_s1_translator:uav_byteenable
	wire          tx_hpd_ack_pio_s1_agent_m0_read;                                                             // tx_hpd_ack_pio_s1_agent:m0_read -> tx_hpd_ack_pio_s1_translator:uav_read
	wire          tx_hpd_ack_pio_s1_agent_m0_readdatavalid;                                                    // tx_hpd_ack_pio_s1_translator:uav_readdatavalid -> tx_hpd_ack_pio_s1_agent:m0_readdatavalid
	wire          tx_hpd_ack_pio_s1_agent_m0_lock;                                                             // tx_hpd_ack_pio_s1_agent:m0_lock -> tx_hpd_ack_pio_s1_translator:uav_lock
	wire   [31:0] tx_hpd_ack_pio_s1_agent_m0_writedata;                                                        // tx_hpd_ack_pio_s1_agent:m0_writedata -> tx_hpd_ack_pio_s1_translator:uav_writedata
	wire          tx_hpd_ack_pio_s1_agent_m0_write;                                                            // tx_hpd_ack_pio_s1_agent:m0_write -> tx_hpd_ack_pio_s1_translator:uav_write
	wire    [2:0] tx_hpd_ack_pio_s1_agent_m0_burstcount;                                                       // tx_hpd_ack_pio_s1_agent:m0_burstcount -> tx_hpd_ack_pio_s1_translator:uav_burstcount
	wire          tx_hpd_ack_pio_s1_agent_rf_source_valid;                                                     // tx_hpd_ack_pio_s1_agent:rf_source_valid -> tx_hpd_ack_pio_s1_agent_rsp_fifo:in_valid
	wire  [108:0] tx_hpd_ack_pio_s1_agent_rf_source_data;                                                      // tx_hpd_ack_pio_s1_agent:rf_source_data -> tx_hpd_ack_pio_s1_agent_rsp_fifo:in_data
	wire          tx_hpd_ack_pio_s1_agent_rf_source_ready;                                                     // tx_hpd_ack_pio_s1_agent_rsp_fifo:in_ready -> tx_hpd_ack_pio_s1_agent:rf_source_ready
	wire          tx_hpd_ack_pio_s1_agent_rf_source_startofpacket;                                             // tx_hpd_ack_pio_s1_agent:rf_source_startofpacket -> tx_hpd_ack_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          tx_hpd_ack_pio_s1_agent_rf_source_endofpacket;                                               // tx_hpd_ack_pio_s1_agent:rf_source_endofpacket -> tx_hpd_ack_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          tx_hpd_ack_pio_s1_agent_rsp_fifo_out_valid;                                                  // tx_hpd_ack_pio_s1_agent_rsp_fifo:out_valid -> tx_hpd_ack_pio_s1_agent:rf_sink_valid
	wire  [108:0] tx_hpd_ack_pio_s1_agent_rsp_fifo_out_data;                                                   // tx_hpd_ack_pio_s1_agent_rsp_fifo:out_data -> tx_hpd_ack_pio_s1_agent:rf_sink_data
	wire          tx_hpd_ack_pio_s1_agent_rsp_fifo_out_ready;                                                  // tx_hpd_ack_pio_s1_agent:rf_sink_ready -> tx_hpd_ack_pio_s1_agent_rsp_fifo:out_ready
	wire          tx_hpd_ack_pio_s1_agent_rsp_fifo_out_startofpacket;                                          // tx_hpd_ack_pio_s1_agent_rsp_fifo:out_startofpacket -> tx_hpd_ack_pio_s1_agent:rf_sink_startofpacket
	wire          tx_hpd_ack_pio_s1_agent_rsp_fifo_out_endofpacket;                                            // tx_hpd_ack_pio_s1_agent_rsp_fifo:out_endofpacket -> tx_hpd_ack_pio_s1_agent:rf_sink_endofpacket
	wire          tx_hpd_ack_pio_s1_agent_rdata_fifo_src_valid;                                                // tx_hpd_ack_pio_s1_agent:rdata_fifo_src_valid -> tx_hpd_ack_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_hpd_ack_pio_s1_agent_rdata_fifo_src_data;                                                 // tx_hpd_ack_pio_s1_agent:rdata_fifo_src_data -> tx_hpd_ack_pio_s1_agent:rdata_fifo_sink_data
	wire          tx_hpd_ack_pio_s1_agent_rdata_fifo_src_ready;                                                // tx_hpd_ack_pio_s1_agent:rdata_fifo_sink_ready -> tx_hpd_ack_pio_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_025_src_valid;                                                                       // cmd_mux_025:src_valid -> tx_hpd_ack_pio_s1_agent:cp_valid
	wire  [107:0] cmd_mux_025_src_data;                                                                        // cmd_mux_025:src_data -> tx_hpd_ack_pio_s1_agent:cp_data
	wire          cmd_mux_025_src_ready;                                                                       // tx_hpd_ack_pio_s1_agent:cp_ready -> cmd_mux_025:src_ready
	wire   [26:0] cmd_mux_025_src_channel;                                                                     // cmd_mux_025:src_channel -> tx_hpd_ack_pio_s1_agent:cp_channel
	wire          cmd_mux_025_src_startofpacket;                                                               // cmd_mux_025:src_startofpacket -> tx_hpd_ack_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_025_src_endofpacket;                                                                 // cmd_mux_025:src_endofpacket -> tx_hpd_ack_pio_s1_agent:cp_endofpacket
	wire   [31:0] color_depth_pio_s1_agent_m0_readdata;                                                        // color_depth_pio_s1_translator:uav_readdata -> color_depth_pio_s1_agent:m0_readdata
	wire          color_depth_pio_s1_agent_m0_waitrequest;                                                     // color_depth_pio_s1_translator:uav_waitrequest -> color_depth_pio_s1_agent:m0_waitrequest
	wire          color_depth_pio_s1_agent_m0_debugaccess;                                                     // color_depth_pio_s1_agent:m0_debugaccess -> color_depth_pio_s1_translator:uav_debugaccess
	wire   [18:0] color_depth_pio_s1_agent_m0_address;                                                         // color_depth_pio_s1_agent:m0_address -> color_depth_pio_s1_translator:uav_address
	wire    [3:0] color_depth_pio_s1_agent_m0_byteenable;                                                      // color_depth_pio_s1_agent:m0_byteenable -> color_depth_pio_s1_translator:uav_byteenable
	wire          color_depth_pio_s1_agent_m0_read;                                                            // color_depth_pio_s1_agent:m0_read -> color_depth_pio_s1_translator:uav_read
	wire          color_depth_pio_s1_agent_m0_readdatavalid;                                                   // color_depth_pio_s1_translator:uav_readdatavalid -> color_depth_pio_s1_agent:m0_readdatavalid
	wire          color_depth_pio_s1_agent_m0_lock;                                                            // color_depth_pio_s1_agent:m0_lock -> color_depth_pio_s1_translator:uav_lock
	wire   [31:0] color_depth_pio_s1_agent_m0_writedata;                                                       // color_depth_pio_s1_agent:m0_writedata -> color_depth_pio_s1_translator:uav_writedata
	wire          color_depth_pio_s1_agent_m0_write;                                                           // color_depth_pio_s1_agent:m0_write -> color_depth_pio_s1_translator:uav_write
	wire    [2:0] color_depth_pio_s1_agent_m0_burstcount;                                                      // color_depth_pio_s1_agent:m0_burstcount -> color_depth_pio_s1_translator:uav_burstcount
	wire          color_depth_pio_s1_agent_rf_source_valid;                                                    // color_depth_pio_s1_agent:rf_source_valid -> color_depth_pio_s1_agent_rsp_fifo:in_valid
	wire  [108:0] color_depth_pio_s1_agent_rf_source_data;                                                     // color_depth_pio_s1_agent:rf_source_data -> color_depth_pio_s1_agent_rsp_fifo:in_data
	wire          color_depth_pio_s1_agent_rf_source_ready;                                                    // color_depth_pio_s1_agent_rsp_fifo:in_ready -> color_depth_pio_s1_agent:rf_source_ready
	wire          color_depth_pio_s1_agent_rf_source_startofpacket;                                            // color_depth_pio_s1_agent:rf_source_startofpacket -> color_depth_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          color_depth_pio_s1_agent_rf_source_endofpacket;                                              // color_depth_pio_s1_agent:rf_source_endofpacket -> color_depth_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          color_depth_pio_s1_agent_rsp_fifo_out_valid;                                                 // color_depth_pio_s1_agent_rsp_fifo:out_valid -> color_depth_pio_s1_agent:rf_sink_valid
	wire  [108:0] color_depth_pio_s1_agent_rsp_fifo_out_data;                                                  // color_depth_pio_s1_agent_rsp_fifo:out_data -> color_depth_pio_s1_agent:rf_sink_data
	wire          color_depth_pio_s1_agent_rsp_fifo_out_ready;                                                 // color_depth_pio_s1_agent:rf_sink_ready -> color_depth_pio_s1_agent_rsp_fifo:out_ready
	wire          color_depth_pio_s1_agent_rsp_fifo_out_startofpacket;                                         // color_depth_pio_s1_agent_rsp_fifo:out_startofpacket -> color_depth_pio_s1_agent:rf_sink_startofpacket
	wire          color_depth_pio_s1_agent_rsp_fifo_out_endofpacket;                                           // color_depth_pio_s1_agent_rsp_fifo:out_endofpacket -> color_depth_pio_s1_agent:rf_sink_endofpacket
	wire          color_depth_pio_s1_agent_rdata_fifo_src_valid;                                               // color_depth_pio_s1_agent:rdata_fifo_src_valid -> color_depth_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] color_depth_pio_s1_agent_rdata_fifo_src_data;                                                // color_depth_pio_s1_agent:rdata_fifo_src_data -> color_depth_pio_s1_agent:rdata_fifo_sink_data
	wire          color_depth_pio_s1_agent_rdata_fifo_src_ready;                                               // color_depth_pio_s1_agent:rdata_fifo_sink_ready -> color_depth_pio_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_026_src_valid;                                                                       // cmd_mux_026:src_valid -> color_depth_pio_s1_agent:cp_valid
	wire  [107:0] cmd_mux_026_src_data;                                                                        // cmd_mux_026:src_data -> color_depth_pio_s1_agent:cp_data
	wire          cmd_mux_026_src_ready;                                                                       // color_depth_pio_s1_agent:cp_ready -> cmd_mux_026:src_ready
	wire   [26:0] cmd_mux_026_src_channel;                                                                     // cmd_mux_026:src_channel -> color_depth_pio_s1_agent:cp_channel
	wire          cmd_mux_026_src_startofpacket;                                                               // cmd_mux_026:src_startofpacket -> color_depth_pio_s1_agent:cp_startofpacket
	wire          cmd_mux_026_src_endofpacket;                                                                 // cmd_mux_026:src_endofpacket -> color_depth_pio_s1_agent:cp_endofpacket
	wire          cpu_data_master_agent_cp_valid;                                                              // cpu_data_master_agent:cp_valid -> router:sink_valid
	wire  [107:0] cpu_data_master_agent_cp_data;                                                               // cpu_data_master_agent:cp_data -> router:sink_data
	wire          cpu_data_master_agent_cp_ready;                                                              // router:sink_ready -> cpu_data_master_agent:cp_ready
	wire          cpu_data_master_agent_cp_startofpacket;                                                      // cpu_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          cpu_data_master_agent_cp_endofpacket;                                                        // cpu_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                            // router:src_valid -> cmd_demux:sink_valid
	wire  [107:0] router_src_data;                                                                             // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                            // cmd_demux:sink_ready -> router:src_ready
	wire   [26:0] router_src_channel;                                                                          // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                    // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                      // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          cpu_instruction_master_agent_cp_valid;                                                       // cpu_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [107:0] cpu_instruction_master_agent_cp_data;                                                        // cpu_instruction_master_agent:cp_data -> router_001:sink_data
	wire          cpu_instruction_master_agent_cp_ready;                                                       // router_001:sink_ready -> cpu_instruction_master_agent:cp_ready
	wire          cpu_instruction_master_agent_cp_startofpacket;                                               // cpu_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          cpu_instruction_master_agent_cp_endofpacket;                                                 // cpu_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                        // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [107:0] router_001_src_data;                                                                         // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                                        // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [26:0] router_001_src_channel;                                                                      // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                                // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                                  // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                                                // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [107:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                                                 // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                                                // router_002:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                                        // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                                          // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                        // router_002:src_valid -> rsp_demux:sink_valid
	wire  [107:0] router_002_src_data;                                                                         // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                                        // rsp_demux:sink_ready -> router_002:src_ready
	wire   [26:0] router_002_src_channel;                                                                      // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                                // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                                  // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_valid;                       // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rp_valid -> router_003:sink_valid
	wire  [107:0] tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_data;                        // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rp_data -> router_003:sink_data
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_ready;                       // router_003:sink_ready -> tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rp_ready
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_startofpacket;               // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_endofpacket;                 // tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                        // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [107:0] router_003_src_data;                                                                         // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                                        // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [26:0] router_003_src_channel;                                                                      // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                                // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                  // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_valid;                         // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rp_valid -> router_004:sink_valid
	wire  [107:0] tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_data;                          // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rp_data -> router_004:sink_data
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_ready;                         // router_004:sink_ready -> tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rp_ready
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_startofpacket;                 // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_endofpacket;                   // tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                        // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [107:0] router_004_src_data;                                                                         // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                                        // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [26:0] router_004_src_channel;                                                                      // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                                // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                  // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_valid;                         // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rp_valid -> router_005:sink_valid
	wire  [107:0] tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_data;                          // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rp_data -> router_005:sink_data
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_ready;                         // router_005:sink_ready -> tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rp_ready
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_startofpacket;                 // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_endofpacket;                   // tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                        // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [107:0] router_005_src_data;                                                                         // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                                        // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [26:0] router_005_src_channel;                                                                      // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                                // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                  // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_rp_valid;                           // edid_ram_slave_translator_avalon_universal_slave_0_agent:rp_valid -> router_006:sink_valid
	wire   [80:0] edid_ram_slave_translator_avalon_universal_slave_0_agent_rp_data;                            // edid_ram_slave_translator_avalon_universal_slave_0_agent:rp_data -> router_006:sink_data
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_rp_ready;                           // router_006:sink_ready -> edid_ram_slave_translator_avalon_universal_slave_0_agent:rp_ready
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket;                   // edid_ram_slave_translator_avalon_universal_slave_0_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          edid_ram_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket;                     // edid_ram_slave_translator_avalon_universal_slave_0_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rp_valid;                   // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rp_valid -> router_007:sink_valid
	wire  [107:0] oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rp_data;                    // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rp_data -> router_007:sink_data
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rp_ready;                   // router_007:sink_ready -> oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rp_ready
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                        // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [107:0] router_007_src_data;                                                                         // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                                        // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [26:0] router_007_src_channel;                                                                      // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                                // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                  // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_rp_valid;                                    // oc_i2c_master_ti_avalon_universal_slave_0_agent:rp_valid -> router_008:sink_valid
	wire  [107:0] oc_i2c_master_ti_avalon_universal_slave_0_agent_rp_data;                                     // oc_i2c_master_ti_avalon_universal_slave_0_agent:rp_data -> router_008:sink_data
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_rp_ready;                                    // router_008:sink_ready -> oc_i2c_master_ti_avalon_universal_slave_0_agent:rp_ready
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_rp_startofpacket;                            // oc_i2c_master_ti_avalon_universal_slave_0_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          oc_i2c_master_ti_avalon_universal_slave_0_agent_rp_endofpacket;                              // oc_i2c_master_ti_avalon_universal_slave_0_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                        // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [107:0] router_008_src_data;                                                                         // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                                        // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [26:0] router_008_src_channel;                                                                      // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                                // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                  // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_valid;                                                   // sysid_qsys_0_control_slave_agent:rp_valid -> router_009:sink_valid
	wire  [107:0] sysid_qsys_0_control_slave_agent_rp_data;                                                    // sysid_qsys_0_control_slave_agent:rp_data -> router_009:sink_data
	wire          sysid_qsys_0_control_slave_agent_rp_ready;                                                   // router_009:sink_ready -> sysid_qsys_0_control_slave_agent:rp_ready
	wire          sysid_qsys_0_control_slave_agent_rp_startofpacket;                                           // sysid_qsys_0_control_slave_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_endofpacket;                                             // sysid_qsys_0_control_slave_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                        // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [107:0] router_009_src_data;                                                                         // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                                        // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [26:0] router_009_src_channel;                                                                      // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                                // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                  // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          cpu_debug_mem_slave_agent_rp_valid;                                                          // cpu_debug_mem_slave_agent:rp_valid -> router_010:sink_valid
	wire  [107:0] cpu_debug_mem_slave_agent_rp_data;                                                           // cpu_debug_mem_slave_agent:rp_data -> router_010:sink_data
	wire          cpu_debug_mem_slave_agent_rp_ready;                                                          // router_010:sink_ready -> cpu_debug_mem_slave_agent:rp_ready
	wire          cpu_debug_mem_slave_agent_rp_startofpacket;                                                  // cpu_debug_mem_slave_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          cpu_debug_mem_slave_agent_rp_endofpacket;                                                    // cpu_debug_mem_slave_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                        // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [107:0] router_010_src_data;                                                                         // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                                        // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [26:0] router_010_src_channel;                                                                      // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                                // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                  // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          cpu_ram_s1_agent_rp_valid;                                                                   // cpu_ram_s1_agent:rp_valid -> router_011:sink_valid
	wire  [107:0] cpu_ram_s1_agent_rp_data;                                                                    // cpu_ram_s1_agent:rp_data -> router_011:sink_data
	wire          cpu_ram_s1_agent_rp_ready;                                                                   // router_011:sink_ready -> cpu_ram_s1_agent:rp_ready
	wire          cpu_ram_s1_agent_rp_startofpacket;                                                           // cpu_ram_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          cpu_ram_s1_agent_rp_endofpacket;                                                             // cpu_ram_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                        // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [107:0] router_011_src_data;                                                                         // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                                        // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [26:0] router_011_src_channel;                                                                      // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                                                // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                  // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          edid_ram_access_pio_s1_agent_rp_valid;                                                       // edid_ram_access_pio_s1_agent:rp_valid -> router_012:sink_valid
	wire  [107:0] edid_ram_access_pio_s1_agent_rp_data;                                                        // edid_ram_access_pio_s1_agent:rp_data -> router_012:sink_data
	wire          edid_ram_access_pio_s1_agent_rp_ready;                                                       // router_012:sink_ready -> edid_ram_access_pio_s1_agent:rp_ready
	wire          edid_ram_access_pio_s1_agent_rp_startofpacket;                                               // edid_ram_access_pio_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          edid_ram_access_pio_s1_agent_rp_endofpacket;                                                 // edid_ram_access_pio_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                        // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [107:0] router_012_src_data;                                                                         // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                                        // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [26:0] router_012_src_channel;                                                                      // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                                                // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                  // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          measure_pio_s1_agent_rp_valid;                                                               // measure_pio_s1_agent:rp_valid -> router_013:sink_valid
	wire  [107:0] measure_pio_s1_agent_rp_data;                                                                // measure_pio_s1_agent:rp_data -> router_013:sink_data
	wire          measure_pio_s1_agent_rp_ready;                                                               // router_013:sink_ready -> measure_pio_s1_agent:rp_ready
	wire          measure_pio_s1_agent_rp_startofpacket;                                                       // measure_pio_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          measure_pio_s1_agent_rp_endofpacket;                                                         // measure_pio_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                        // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [107:0] router_013_src_data;                                                                         // router_013:src_data -> rsp_demux_011:sink_data
	wire          router_013_src_ready;                                                                        // rsp_demux_011:sink_ready -> router_013:src_ready
	wire   [26:0] router_013_src_channel;                                                                      // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_startofpacket;                                                                // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                  // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          tx_os_pio_s1_agent_rp_valid;                                                                 // tx_os_pio_s1_agent:rp_valid -> router_014:sink_valid
	wire  [107:0] tx_os_pio_s1_agent_rp_data;                                                                  // tx_os_pio_s1_agent:rp_data -> router_014:sink_data
	wire          tx_os_pio_s1_agent_rp_ready;                                                                 // router_014:sink_ready -> tx_os_pio_s1_agent:rp_ready
	wire          tx_os_pio_s1_agent_rp_startofpacket;                                                         // tx_os_pio_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          tx_os_pio_s1_agent_rp_endofpacket;                                                           // tx_os_pio_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                        // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [107:0] router_014_src_data;                                                                         // router_014:src_data -> rsp_demux_012:sink_data
	wire          router_014_src_ready;                                                                        // rsp_demux_012:sink_ready -> router_014:src_ready
	wire   [26:0] router_014_src_channel;                                                                      // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_startofpacket;                                                                // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                  // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          measure_valid_pio_s1_agent_rp_valid;                                                         // measure_valid_pio_s1_agent:rp_valid -> router_015:sink_valid
	wire  [107:0] measure_valid_pio_s1_agent_rp_data;                                                          // measure_valid_pio_s1_agent:rp_data -> router_015:sink_data
	wire          measure_valid_pio_s1_agent_rp_ready;                                                         // router_015:sink_ready -> measure_valid_pio_s1_agent:rp_ready
	wire          measure_valid_pio_s1_agent_rp_startofpacket;                                                 // measure_valid_pio_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          measure_valid_pio_s1_agent_rp_endofpacket;                                                   // measure_valid_pio_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                        // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [107:0] router_015_src_data;                                                                         // router_015:src_data -> rsp_demux_013:sink_data
	wire          router_015_src_ready;                                                                        // rsp_demux_013:sink_ready -> router_015:src_ready
	wire   [26:0] router_015_src_channel;                                                                      // router_015:src_channel -> rsp_demux_013:sink_channel
	wire          router_015_src_startofpacket;                                                                // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                  // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          tx_rst_pll_pio_s1_agent_rp_valid;                                                            // tx_rst_pll_pio_s1_agent:rp_valid -> router_016:sink_valid
	wire  [107:0] tx_rst_pll_pio_s1_agent_rp_data;                                                             // tx_rst_pll_pio_s1_agent:rp_data -> router_016:sink_data
	wire          tx_rst_pll_pio_s1_agent_rp_ready;                                                            // router_016:sink_ready -> tx_rst_pll_pio_s1_agent:rp_ready
	wire          tx_rst_pll_pio_s1_agent_rp_startofpacket;                                                    // tx_rst_pll_pio_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          tx_rst_pll_pio_s1_agent_rp_endofpacket;                                                      // tx_rst_pll_pio_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                        // router_016:src_valid -> rsp_demux_014:sink_valid
	wire  [107:0] router_016_src_data;                                                                         // router_016:src_data -> rsp_demux_014:sink_data
	wire          router_016_src_ready;                                                                        // rsp_demux_014:sink_ready -> router_016:src_ready
	wire   [26:0] router_016_src_channel;                                                                      // router_016:src_channel -> rsp_demux_014:sink_channel
	wire          router_016_src_startofpacket;                                                                // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                  // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          tx_rst_xcvr_pio_s1_agent_rp_valid;                                                           // tx_rst_xcvr_pio_s1_agent:rp_valid -> router_017:sink_valid
	wire  [107:0] tx_rst_xcvr_pio_s1_agent_rp_data;                                                            // tx_rst_xcvr_pio_s1_agent:rp_data -> router_017:sink_data
	wire          tx_rst_xcvr_pio_s1_agent_rp_ready;                                                           // router_017:sink_ready -> tx_rst_xcvr_pio_s1_agent:rp_ready
	wire          tx_rst_xcvr_pio_s1_agent_rp_startofpacket;                                                   // tx_rst_xcvr_pio_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          tx_rst_xcvr_pio_s1_agent_rp_endofpacket;                                                     // tx_rst_xcvr_pio_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                        // router_017:src_valid -> rsp_demux_015:sink_valid
	wire  [107:0] router_017_src_data;                                                                         // router_017:src_data -> rsp_demux_015:sink_data
	wire          router_017_src_ready;                                                                        // rsp_demux_015:sink_ready -> router_017:src_ready
	wire   [26:0] router_017_src_channel;                                                                      // router_017:src_channel -> rsp_demux_015:sink_channel
	wire          router_017_src_startofpacket;                                                                // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                  // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          tmds_bit_clock_ratio_pio_s1_agent_rp_valid;                                                  // tmds_bit_clock_ratio_pio_s1_agent:rp_valid -> router_018:sink_valid
	wire  [107:0] tmds_bit_clock_ratio_pio_s1_agent_rp_data;                                                   // tmds_bit_clock_ratio_pio_s1_agent:rp_data -> router_018:sink_data
	wire          tmds_bit_clock_ratio_pio_s1_agent_rp_ready;                                                  // router_018:sink_ready -> tmds_bit_clock_ratio_pio_s1_agent:rp_ready
	wire          tmds_bit_clock_ratio_pio_s1_agent_rp_startofpacket;                                          // tmds_bit_clock_ratio_pio_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          tmds_bit_clock_ratio_pio_s1_agent_rp_endofpacket;                                            // tmds_bit_clock_ratio_pio_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                        // router_018:src_valid -> rsp_demux_016:sink_valid
	wire  [107:0] router_018_src_data;                                                                         // router_018:src_data -> rsp_demux_016:sink_data
	wire          router_018_src_ready;                                                                        // rsp_demux_016:sink_ready -> router_018:src_ready
	wire   [26:0] router_018_src_channel;                                                                      // router_018:src_channel -> rsp_demux_016:sink_channel
	wire          router_018_src_startofpacket;                                                                // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                  // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          tx_iopll_waitrequest_pio_s1_agent_rp_valid;                                                  // tx_iopll_waitrequest_pio_s1_agent:rp_valid -> router_019:sink_valid
	wire  [107:0] tx_iopll_waitrequest_pio_s1_agent_rp_data;                                                   // tx_iopll_waitrequest_pio_s1_agent:rp_data -> router_019:sink_data
	wire          tx_iopll_waitrequest_pio_s1_agent_rp_ready;                                                  // router_019:sink_ready -> tx_iopll_waitrequest_pio_s1_agent:rp_ready
	wire          tx_iopll_waitrequest_pio_s1_agent_rp_startofpacket;                                          // tx_iopll_waitrequest_pio_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          tx_iopll_waitrequest_pio_s1_agent_rp_endofpacket;                                            // tx_iopll_waitrequest_pio_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                        // router_019:src_valid -> rsp_demux_017:sink_valid
	wire  [107:0] router_019_src_data;                                                                         // router_019:src_data -> rsp_demux_017:sink_data
	wire          router_019_src_ready;                                                                        // rsp_demux_017:sink_ready -> router_019:src_ready
	wire   [26:0] router_019_src_channel;                                                                      // router_019:src_channel -> rsp_demux_017:sink_channel
	wire          router_019_src_startofpacket;                                                                // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_019_src_endofpacket;                                                                  // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          tx_pll_waitrequest_pio_s1_agent_rp_valid;                                                    // tx_pll_waitrequest_pio_s1_agent:rp_valid -> router_020:sink_valid
	wire  [107:0] tx_pll_waitrequest_pio_s1_agent_rp_data;                                                     // tx_pll_waitrequest_pio_s1_agent:rp_data -> router_020:sink_data
	wire          tx_pll_waitrequest_pio_s1_agent_rp_ready;                                                    // router_020:sink_ready -> tx_pll_waitrequest_pio_s1_agent:rp_ready
	wire          tx_pll_waitrequest_pio_s1_agent_rp_startofpacket;                                            // tx_pll_waitrequest_pio_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          tx_pll_waitrequest_pio_s1_agent_rp_endofpacket;                                              // tx_pll_waitrequest_pio_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                        // router_020:src_valid -> rsp_demux_018:sink_valid
	wire  [107:0] router_020_src_data;                                                                         // router_020:src_data -> rsp_demux_018:sink_data
	wire          router_020_src_ready;                                                                        // rsp_demux_018:sink_ready -> router_020:src_ready
	wire   [26:0] router_020_src_channel;                                                                      // router_020:src_channel -> rsp_demux_018:sink_channel
	wire          router_020_src_startofpacket;                                                                // router_020:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_020_src_endofpacket;                                                                  // router_020:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          tx_pma_ch_s1_agent_rp_valid;                                                                 // tx_pma_ch_s1_agent:rp_valid -> router_021:sink_valid
	wire  [107:0] tx_pma_ch_s1_agent_rp_data;                                                                  // tx_pma_ch_s1_agent:rp_data -> router_021:sink_data
	wire          tx_pma_ch_s1_agent_rp_ready;                                                                 // router_021:sink_ready -> tx_pma_ch_s1_agent:rp_ready
	wire          tx_pma_ch_s1_agent_rp_startofpacket;                                                         // tx_pma_ch_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          tx_pma_ch_s1_agent_rp_endofpacket;                                                           // tx_pma_ch_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                                        // router_021:src_valid -> rsp_demux_019:sink_valid
	wire  [107:0] router_021_src_data;                                                                         // router_021:src_data -> rsp_demux_019:sink_data
	wire          router_021_src_ready;                                                                        // rsp_demux_019:sink_ready -> router_021:src_ready
	wire   [26:0] router_021_src_channel;                                                                      // router_021:src_channel -> rsp_demux_019:sink_channel
	wire          router_021_src_startofpacket;                                                                // router_021:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_021_src_endofpacket;                                                                  // router_021:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          tx_pma_cal_busy_pio_s1_agent_rp_valid;                                                       // tx_pma_cal_busy_pio_s1_agent:rp_valid -> router_022:sink_valid
	wire  [107:0] tx_pma_cal_busy_pio_s1_agent_rp_data;                                                        // tx_pma_cal_busy_pio_s1_agent:rp_data -> router_022:sink_data
	wire          tx_pma_cal_busy_pio_s1_agent_rp_ready;                                                       // router_022:sink_ready -> tx_pma_cal_busy_pio_s1_agent:rp_ready
	wire          tx_pma_cal_busy_pio_s1_agent_rp_startofpacket;                                               // tx_pma_cal_busy_pio_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          tx_pma_cal_busy_pio_s1_agent_rp_endofpacket;                                                 // tx_pma_cal_busy_pio_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                                        // router_022:src_valid -> rsp_demux_020:sink_valid
	wire  [107:0] router_022_src_data;                                                                         // router_022:src_data -> rsp_demux_020:sink_data
	wire          router_022_src_ready;                                                                        // rsp_demux_020:sink_ready -> router_022:src_ready
	wire   [26:0] router_022_src_channel;                                                                      // router_022:src_channel -> rsp_demux_020:sink_channel
	wire          router_022_src_startofpacket;                                                                // router_022:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_022_src_endofpacket;                                                                  // router_022:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          tx_rcfg_en_pio_s1_agent_rp_valid;                                                            // tx_rcfg_en_pio_s1_agent:rp_valid -> router_023:sink_valid
	wire  [107:0] tx_rcfg_en_pio_s1_agent_rp_data;                                                             // tx_rcfg_en_pio_s1_agent:rp_data -> router_023:sink_data
	wire          tx_rcfg_en_pio_s1_agent_rp_ready;                                                            // router_023:sink_ready -> tx_rcfg_en_pio_s1_agent:rp_ready
	wire          tx_rcfg_en_pio_s1_agent_rp_startofpacket;                                                    // tx_rcfg_en_pio_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          tx_rcfg_en_pio_s1_agent_rp_endofpacket;                                                      // tx_rcfg_en_pio_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                                        // router_023:src_valid -> rsp_demux_021:sink_valid
	wire  [107:0] router_023_src_data;                                                                         // router_023:src_data -> rsp_demux_021:sink_data
	wire          router_023_src_ready;                                                                        // rsp_demux_021:sink_ready -> router_023:src_ready
	wire   [26:0] router_023_src_channel;                                                                      // router_023:src_channel -> rsp_demux_021:sink_channel
	wire          router_023_src_startofpacket;                                                                // router_023:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_023_src_endofpacket;                                                                  // router_023:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          tx_pma_waitrequest_pio_s1_agent_rp_valid;                                                    // tx_pma_waitrequest_pio_s1_agent:rp_valid -> router_024:sink_valid
	wire  [107:0] tx_pma_waitrequest_pio_s1_agent_rp_data;                                                     // tx_pma_waitrequest_pio_s1_agent:rp_data -> router_024:sink_data
	wire          tx_pma_waitrequest_pio_s1_agent_rp_ready;                                                    // router_024:sink_ready -> tx_pma_waitrequest_pio_s1_agent:rp_ready
	wire          tx_pma_waitrequest_pio_s1_agent_rp_startofpacket;                                            // tx_pma_waitrequest_pio_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          tx_pma_waitrequest_pio_s1_agent_rp_endofpacket;                                              // tx_pma_waitrequest_pio_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                                        // router_024:src_valid -> rsp_demux_022:sink_valid
	wire  [107:0] router_024_src_data;                                                                         // router_024:src_data -> rsp_demux_022:sink_data
	wire          router_024_src_ready;                                                                        // rsp_demux_022:sink_ready -> router_024:src_ready
	wire   [26:0] router_024_src_channel;                                                                      // router_024:src_channel -> rsp_demux_022:sink_channel
	wire          router_024_src_startofpacket;                                                                // router_024:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_024_src_endofpacket;                                                                  // router_024:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          wd_timer_s1_agent_rp_valid;                                                                  // wd_timer_s1_agent:rp_valid -> router_025:sink_valid
	wire  [107:0] wd_timer_s1_agent_rp_data;                                                                   // wd_timer_s1_agent:rp_data -> router_025:sink_data
	wire          wd_timer_s1_agent_rp_ready;                                                                  // router_025:sink_ready -> wd_timer_s1_agent:rp_ready
	wire          wd_timer_s1_agent_rp_startofpacket;                                                          // wd_timer_s1_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          wd_timer_s1_agent_rp_endofpacket;                                                            // wd_timer_s1_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                                        // router_025:src_valid -> rsp_demux_023:sink_valid
	wire  [107:0] router_025_src_data;                                                                         // router_025:src_data -> rsp_demux_023:sink_data
	wire          router_025_src_ready;                                                                        // rsp_demux_023:sink_ready -> router_025:src_ready
	wire   [26:0] router_025_src_channel;                                                                      // router_025:src_channel -> rsp_demux_023:sink_channel
	wire          router_025_src_startofpacket;                                                                // router_025:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_025_src_endofpacket;                                                                  // router_025:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          tx_hpd_req_pio_s1_agent_rp_valid;                                                            // tx_hpd_req_pio_s1_agent:rp_valid -> router_026:sink_valid
	wire  [107:0] tx_hpd_req_pio_s1_agent_rp_data;                                                             // tx_hpd_req_pio_s1_agent:rp_data -> router_026:sink_data
	wire          tx_hpd_req_pio_s1_agent_rp_ready;                                                            // router_026:sink_ready -> tx_hpd_req_pio_s1_agent:rp_ready
	wire          tx_hpd_req_pio_s1_agent_rp_startofpacket;                                                    // tx_hpd_req_pio_s1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          tx_hpd_req_pio_s1_agent_rp_endofpacket;                                                      // tx_hpd_req_pio_s1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                                        // router_026:src_valid -> rsp_demux_024:sink_valid
	wire  [107:0] router_026_src_data;                                                                         // router_026:src_data -> rsp_demux_024:sink_data
	wire          router_026_src_ready;                                                                        // rsp_demux_024:sink_ready -> router_026:src_ready
	wire   [26:0] router_026_src_channel;                                                                      // router_026:src_channel -> rsp_demux_024:sink_channel
	wire          router_026_src_startofpacket;                                                                // router_026:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_026_src_endofpacket;                                                                  // router_026:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          tx_hpd_ack_pio_s1_agent_rp_valid;                                                            // tx_hpd_ack_pio_s1_agent:rp_valid -> router_027:sink_valid
	wire  [107:0] tx_hpd_ack_pio_s1_agent_rp_data;                                                             // tx_hpd_ack_pio_s1_agent:rp_data -> router_027:sink_data
	wire          tx_hpd_ack_pio_s1_agent_rp_ready;                                                            // router_027:sink_ready -> tx_hpd_ack_pio_s1_agent:rp_ready
	wire          tx_hpd_ack_pio_s1_agent_rp_startofpacket;                                                    // tx_hpd_ack_pio_s1_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          tx_hpd_ack_pio_s1_agent_rp_endofpacket;                                                      // tx_hpd_ack_pio_s1_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                                        // router_027:src_valid -> rsp_demux_025:sink_valid
	wire  [107:0] router_027_src_data;                                                                         // router_027:src_data -> rsp_demux_025:sink_data
	wire          router_027_src_ready;                                                                        // rsp_demux_025:sink_ready -> router_027:src_ready
	wire   [26:0] router_027_src_channel;                                                                      // router_027:src_channel -> rsp_demux_025:sink_channel
	wire          router_027_src_startofpacket;                                                                // router_027:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire          router_027_src_endofpacket;                                                                  // router_027:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          color_depth_pio_s1_agent_rp_valid;                                                           // color_depth_pio_s1_agent:rp_valid -> router_028:sink_valid
	wire  [107:0] color_depth_pio_s1_agent_rp_data;                                                            // color_depth_pio_s1_agent:rp_data -> router_028:sink_data
	wire          color_depth_pio_s1_agent_rp_ready;                                                           // router_028:sink_ready -> color_depth_pio_s1_agent:rp_ready
	wire          color_depth_pio_s1_agent_rp_startofpacket;                                                   // color_depth_pio_s1_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire          color_depth_pio_s1_agent_rp_endofpacket;                                                     // color_depth_pio_s1_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          router_028_src_valid;                                                                        // router_028:src_valid -> rsp_demux_026:sink_valid
	wire  [107:0] router_028_src_data;                                                                         // router_028:src_data -> rsp_demux_026:sink_data
	wire          router_028_src_ready;                                                                        // rsp_demux_026:sink_ready -> router_028:src_ready
	wire   [26:0] router_028_src_channel;                                                                      // router_028:src_channel -> rsp_demux_026:sink_channel
	wire          router_028_src_startofpacket;                                                                // router_028:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire          router_028_src_endofpacket;                                                                  // router_028:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                                        // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [107:0] cmd_demux_src0_data;                                                                         // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                        // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [26:0] cmd_demux_src0_channel;                                                                      // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                                // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                  // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                        // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [107:0] cmd_demux_src1_data;                                                                         // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                        // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [26:0] cmd_demux_src1_channel;                                                                      // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                                // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                  // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                        // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [107:0] cmd_demux_src2_data;                                                                         // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                        // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [26:0] cmd_demux_src2_channel;                                                                      // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                                // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                  // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                        // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [107:0] cmd_demux_src3_data;                                                                         // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                                        // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [26:0] cmd_demux_src3_channel;                                                                      // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                                // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                                  // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                        // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [107:0] cmd_demux_src4_data;                                                                         // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                                        // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [26:0] cmd_demux_src4_channel;                                                                      // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                                // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                                  // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                        // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [107:0] cmd_demux_src5_data;                                                                         // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                                        // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [26:0] cmd_demux_src5_channel;                                                                      // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                                // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                                  // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                        // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [107:0] cmd_demux_src6_data;                                                                         // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                                        // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [26:0] cmd_demux_src6_channel;                                                                      // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                                // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                                  // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                        // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [107:0] cmd_demux_src7_data;                                                                         // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                                        // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [26:0] cmd_demux_src7_channel;                                                                      // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                                // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                                  // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                                        // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [107:0] cmd_demux_src8_data;                                                                         // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                                        // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [26:0] cmd_demux_src8_channel;                                                                      // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                                // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                                  // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                                        // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [107:0] cmd_demux_src9_data;                                                                         // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                                        // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [26:0] cmd_demux_src9_channel;                                                                      // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                                // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                                  // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                                       // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [107:0] cmd_demux_src10_data;                                                                        // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                                       // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [26:0] cmd_demux_src10_channel;                                                                     // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                               // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                                 // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                                       // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [107:0] cmd_demux_src11_data;                                                                        // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                                       // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [26:0] cmd_demux_src11_channel;                                                                     // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                               // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                                 // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                                       // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [107:0] cmd_demux_src12_data;                                                                        // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                                       // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [26:0] cmd_demux_src12_channel;                                                                     // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                               // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                                 // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                                       // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [107:0] cmd_demux_src13_data;                                                                        // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                                       // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [26:0] cmd_demux_src13_channel;                                                                     // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                                               // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                                 // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                                       // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [107:0] cmd_demux_src14_data;                                                                        // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                                       // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [26:0] cmd_demux_src14_channel;                                                                     // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                                               // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                                 // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                                       // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [107:0] cmd_demux_src15_data;                                                                        // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                                       // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [26:0] cmd_demux_src15_channel;                                                                     // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                                               // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                                 // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                                       // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [107:0] cmd_demux_src16_data;                                                                        // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                                       // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [26:0] cmd_demux_src16_channel;                                                                     // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                                               // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                                 // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                                       // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [107:0] cmd_demux_src17_data;                                                                        // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src17_ready;                                                                       // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire   [26:0] cmd_demux_src17_channel;                                                                     // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_startofpacket;                                                               // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src17_endofpacket;                                                                 // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                                       // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [107:0] cmd_demux_src18_data;                                                                        // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_src18_ready;                                                                       // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire   [26:0] cmd_demux_src18_channel;                                                                     // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_startofpacket;                                                               // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_src18_endofpacket;                                                                 // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                                       // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [107:0] cmd_demux_src19_data;                                                                        // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_src19_ready;                                                                       // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire   [26:0] cmd_demux_src19_channel;                                                                     // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_startofpacket;                                                               // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_src19_endofpacket;                                                                 // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                                                       // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire  [107:0] cmd_demux_src20_data;                                                                        // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_src20_ready;                                                                       // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire   [26:0] cmd_demux_src20_channel;                                                                     // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_startofpacket;                                                               // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_src20_endofpacket;                                                                 // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_src21_valid;                                                                       // cmd_demux:src21_valid -> cmd_mux_021:sink0_valid
	wire  [107:0] cmd_demux_src21_data;                                                                        // cmd_demux:src21_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_src21_ready;                                                                       // cmd_mux_021:sink0_ready -> cmd_demux:src21_ready
	wire   [26:0] cmd_demux_src21_channel;                                                                     // cmd_demux:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_src21_startofpacket;                                                               // cmd_demux:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_src21_endofpacket;                                                                 // cmd_demux:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_src22_valid;                                                                       // cmd_demux:src22_valid -> cmd_mux_022:sink0_valid
	wire  [107:0] cmd_demux_src22_data;                                                                        // cmd_demux:src22_data -> cmd_mux_022:sink0_data
	wire          cmd_demux_src22_ready;                                                                       // cmd_mux_022:sink0_ready -> cmd_demux:src22_ready
	wire   [26:0] cmd_demux_src22_channel;                                                                     // cmd_demux:src22_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_src22_startofpacket;                                                               // cmd_demux:src22_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          cmd_demux_src22_endofpacket;                                                                 // cmd_demux:src22_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_src23_valid;                                                                       // cmd_demux:src23_valid -> cmd_mux_023:sink0_valid
	wire  [107:0] cmd_demux_src23_data;                                                                        // cmd_demux:src23_data -> cmd_mux_023:sink0_data
	wire          cmd_demux_src23_ready;                                                                       // cmd_mux_023:sink0_ready -> cmd_demux:src23_ready
	wire   [26:0] cmd_demux_src23_channel;                                                                     // cmd_demux:src23_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_src23_startofpacket;                                                               // cmd_demux:src23_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          cmd_demux_src23_endofpacket;                                                                 // cmd_demux:src23_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_src24_valid;                                                                       // cmd_demux:src24_valid -> cmd_mux_024:sink0_valid
	wire  [107:0] cmd_demux_src24_data;                                                                        // cmd_demux:src24_data -> cmd_mux_024:sink0_data
	wire          cmd_demux_src24_ready;                                                                       // cmd_mux_024:sink0_ready -> cmd_demux:src24_ready
	wire   [26:0] cmd_demux_src24_channel;                                                                     // cmd_demux:src24_channel -> cmd_mux_024:sink0_channel
	wire          cmd_demux_src24_startofpacket;                                                               // cmd_demux:src24_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          cmd_demux_src24_endofpacket;                                                                 // cmd_demux:src24_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_src25_valid;                                                                       // cmd_demux:src25_valid -> cmd_mux_025:sink0_valid
	wire  [107:0] cmd_demux_src25_data;                                                                        // cmd_demux:src25_data -> cmd_mux_025:sink0_data
	wire          cmd_demux_src25_ready;                                                                       // cmd_mux_025:sink0_ready -> cmd_demux:src25_ready
	wire   [26:0] cmd_demux_src25_channel;                                                                     // cmd_demux:src25_channel -> cmd_mux_025:sink0_channel
	wire          cmd_demux_src25_startofpacket;                                                               // cmd_demux:src25_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire          cmd_demux_src25_endofpacket;                                                                 // cmd_demux:src25_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          cmd_demux_src26_valid;                                                                       // cmd_demux:src26_valid -> cmd_mux_026:sink0_valid
	wire  [107:0] cmd_demux_src26_data;                                                                        // cmd_demux:src26_data -> cmd_mux_026:sink0_data
	wire          cmd_demux_src26_ready;                                                                       // cmd_mux_026:sink0_ready -> cmd_demux:src26_ready
	wire   [26:0] cmd_demux_src26_channel;                                                                     // cmd_demux:src26_channel -> cmd_mux_026:sink0_channel
	wire          cmd_demux_src26_startofpacket;                                                               // cmd_demux:src26_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire          cmd_demux_src26_endofpacket;                                                                 // cmd_demux:src26_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                    // cmd_demux_001:src0_valid -> cmd_mux_008:sink1_valid
	wire  [107:0] cmd_demux_001_src0_data;                                                                     // cmd_demux_001:src0_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src0_ready;                                                                    // cmd_mux_008:sink1_ready -> cmd_demux_001:src0_ready
	wire   [26:0] cmd_demux_001_src0_channel;                                                                  // cmd_demux_001:src0_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                            // cmd_demux_001:src0_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                              // cmd_demux_001:src0_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                    // cmd_demux_001:src1_valid -> cmd_mux_009:sink1_valid
	wire  [107:0] cmd_demux_001_src1_data;                                                                     // cmd_demux_001:src1_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src1_ready;                                                                    // cmd_mux_009:sink1_ready -> cmd_demux_001:src1_ready
	wire   [26:0] cmd_demux_001_src1_channel;                                                                  // cmd_demux_001:src1_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                            // cmd_demux_001:src1_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                              // cmd_demux_001:src1_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                        // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [107:0] rsp_demux_src0_data;                                                                         // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                        // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [26:0] rsp_demux_src0_channel;                                                                      // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                                // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                  // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                    // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [107:0] rsp_demux_001_src0_data;                                                                     // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                    // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [26:0] rsp_demux_001_src0_channel;                                                                  // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                            // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                              // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                    // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [107:0] rsp_demux_002_src0_data;                                                                     // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                    // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [26:0] rsp_demux_002_src0_channel;                                                                  // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                            // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                              // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                    // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [107:0] rsp_demux_003_src0_data;                                                                     // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                    // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [26:0] rsp_demux_003_src0_channel;                                                                  // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                            // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                              // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                    // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [107:0] rsp_demux_004_src0_data;                                                                     // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                    // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [26:0] rsp_demux_004_src0_channel;                                                                  // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                            // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                              // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                    // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [107:0] rsp_demux_005_src0_data;                                                                     // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                    // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [26:0] rsp_demux_005_src0_channel;                                                                  // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                            // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                              // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                    // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [107:0] rsp_demux_006_src0_data;                                                                     // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                    // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [26:0] rsp_demux_006_src0_channel;                                                                  // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                            // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                              // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                    // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [107:0] rsp_demux_007_src0_data;                                                                     // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                    // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [26:0] rsp_demux_007_src0_channel;                                                                  // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                            // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                              // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                    // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [107:0] rsp_demux_008_src0_data;                                                                     // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                                    // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [26:0] rsp_demux_008_src0_channel;                                                                  // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                            // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                              // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                                    // rsp_demux_008:src1_valid -> rsp_mux_001:sink0_valid
	wire  [107:0] rsp_demux_008_src1_data;                                                                     // rsp_demux_008:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_008_src1_ready;                                                                    // rsp_mux_001:sink0_ready -> rsp_demux_008:src1_ready
	wire   [26:0] rsp_demux_008_src1_channel;                                                                  // rsp_demux_008:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_008_src1_startofpacket;                                                            // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                              // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                    // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [107:0] rsp_demux_009_src0_data;                                                                     // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                                    // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [26:0] rsp_demux_009_src0_channel;                                                                  // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                            // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                              // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                                                    // rsp_demux_009:src1_valid -> rsp_mux_001:sink1_valid
	wire  [107:0] rsp_demux_009_src1_data;                                                                     // rsp_demux_009:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_009_src1_ready;                                                                    // rsp_mux_001:sink1_ready -> rsp_demux_009:src1_ready
	wire   [26:0] rsp_demux_009_src1_channel;                                                                  // rsp_demux_009:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_009_src1_startofpacket;                                                            // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                              // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                    // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [107:0] rsp_demux_010_src0_data;                                                                     // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                                    // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [26:0] rsp_demux_010_src0_channel;                                                                  // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                            // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                              // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                    // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [107:0] rsp_demux_011_src0_data;                                                                     // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                                    // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [26:0] rsp_demux_011_src0_channel;                                                                  // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                            // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                              // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                    // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [107:0] rsp_demux_012_src0_data;                                                                     // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                                    // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [26:0] rsp_demux_012_src0_channel;                                                                  // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                            // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                              // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                                    // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [107:0] rsp_demux_013_src0_data;                                                                     // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                                    // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [26:0] rsp_demux_013_src0_channel;                                                                  // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                            // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                              // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                                    // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [107:0] rsp_demux_014_src0_data;                                                                     // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                                    // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [26:0] rsp_demux_014_src0_channel;                                                                  // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                            // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                              // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                                    // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [107:0] rsp_demux_015_src0_data;                                                                     // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                                    // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [26:0] rsp_demux_015_src0_channel;                                                                  // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                            // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                              // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                                    // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [107:0] rsp_demux_016_src0_data;                                                                     // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                                                    // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [26:0] rsp_demux_016_src0_channel;                                                                  // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                            // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                              // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                                    // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [107:0] rsp_demux_017_src0_data;                                                                     // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire          rsp_demux_017_src0_ready;                                                                    // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire   [26:0] rsp_demux_017_src0_channel;                                                                  // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                                            // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                              // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                                    // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [107:0] rsp_demux_018_src0_data;                                                                     // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire          rsp_demux_018_src0_ready;                                                                    // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire   [26:0] rsp_demux_018_src0_channel;                                                                  // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                                            // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                              // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                                                    // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [107:0] rsp_demux_019_src0_data;                                                                     // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire          rsp_demux_019_src0_ready;                                                                    // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire   [26:0] rsp_demux_019_src0_channel;                                                                  // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                                            // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                              // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_020_src0_valid;                                                                    // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire  [107:0] rsp_demux_020_src0_data;                                                                     // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire          rsp_demux_020_src0_ready;                                                                    // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire   [26:0] rsp_demux_020_src0_channel;                                                                  // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                                            // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                              // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_021_src0_valid;                                                                    // rsp_demux_021:src0_valid -> rsp_mux:sink21_valid
	wire  [107:0] rsp_demux_021_src0_data;                                                                     // rsp_demux_021:src0_data -> rsp_mux:sink21_data
	wire          rsp_demux_021_src0_ready;                                                                    // rsp_mux:sink21_ready -> rsp_demux_021:src0_ready
	wire   [26:0] rsp_demux_021_src0_channel;                                                                  // rsp_demux_021:src0_channel -> rsp_mux:sink21_channel
	wire          rsp_demux_021_src0_startofpacket;                                                            // rsp_demux_021:src0_startofpacket -> rsp_mux:sink21_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                              // rsp_demux_021:src0_endofpacket -> rsp_mux:sink21_endofpacket
	wire          rsp_demux_022_src0_valid;                                                                    // rsp_demux_022:src0_valid -> rsp_mux:sink22_valid
	wire  [107:0] rsp_demux_022_src0_data;                                                                     // rsp_demux_022:src0_data -> rsp_mux:sink22_data
	wire          rsp_demux_022_src0_ready;                                                                    // rsp_mux:sink22_ready -> rsp_demux_022:src0_ready
	wire   [26:0] rsp_demux_022_src0_channel;                                                                  // rsp_demux_022:src0_channel -> rsp_mux:sink22_channel
	wire          rsp_demux_022_src0_startofpacket;                                                            // rsp_demux_022:src0_startofpacket -> rsp_mux:sink22_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                                              // rsp_demux_022:src0_endofpacket -> rsp_mux:sink22_endofpacket
	wire          rsp_demux_023_src0_valid;                                                                    // rsp_demux_023:src0_valid -> rsp_mux:sink23_valid
	wire  [107:0] rsp_demux_023_src0_data;                                                                     // rsp_demux_023:src0_data -> rsp_mux:sink23_data
	wire          rsp_demux_023_src0_ready;                                                                    // rsp_mux:sink23_ready -> rsp_demux_023:src0_ready
	wire   [26:0] rsp_demux_023_src0_channel;                                                                  // rsp_demux_023:src0_channel -> rsp_mux:sink23_channel
	wire          rsp_demux_023_src0_startofpacket;                                                            // rsp_demux_023:src0_startofpacket -> rsp_mux:sink23_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                                              // rsp_demux_023:src0_endofpacket -> rsp_mux:sink23_endofpacket
	wire          rsp_demux_024_src0_valid;                                                                    // rsp_demux_024:src0_valid -> rsp_mux:sink24_valid
	wire  [107:0] rsp_demux_024_src0_data;                                                                     // rsp_demux_024:src0_data -> rsp_mux:sink24_data
	wire          rsp_demux_024_src0_ready;                                                                    // rsp_mux:sink24_ready -> rsp_demux_024:src0_ready
	wire   [26:0] rsp_demux_024_src0_channel;                                                                  // rsp_demux_024:src0_channel -> rsp_mux:sink24_channel
	wire          rsp_demux_024_src0_startofpacket;                                                            // rsp_demux_024:src0_startofpacket -> rsp_mux:sink24_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                                              // rsp_demux_024:src0_endofpacket -> rsp_mux:sink24_endofpacket
	wire          rsp_demux_025_src0_valid;                                                                    // rsp_demux_025:src0_valid -> rsp_mux:sink25_valid
	wire  [107:0] rsp_demux_025_src0_data;                                                                     // rsp_demux_025:src0_data -> rsp_mux:sink25_data
	wire          rsp_demux_025_src0_ready;                                                                    // rsp_mux:sink25_ready -> rsp_demux_025:src0_ready
	wire   [26:0] rsp_demux_025_src0_channel;                                                                  // rsp_demux_025:src0_channel -> rsp_mux:sink25_channel
	wire          rsp_demux_025_src0_startofpacket;                                                            // rsp_demux_025:src0_startofpacket -> rsp_mux:sink25_startofpacket
	wire          rsp_demux_025_src0_endofpacket;                                                              // rsp_demux_025:src0_endofpacket -> rsp_mux:sink25_endofpacket
	wire          rsp_demux_026_src0_valid;                                                                    // rsp_demux_026:src0_valid -> rsp_mux:sink26_valid
	wire  [107:0] rsp_demux_026_src0_data;                                                                     // rsp_demux_026:src0_data -> rsp_mux:sink26_data
	wire          rsp_demux_026_src0_ready;                                                                    // rsp_mux:sink26_ready -> rsp_demux_026:src0_ready
	wire   [26:0] rsp_demux_026_src0_channel;                                                                  // rsp_demux_026:src0_channel -> rsp_mux:sink26_channel
	wire          rsp_demux_026_src0_startofpacket;                                                            // rsp_demux_026:src0_startofpacket -> rsp_mux:sink26_startofpacket
	wire          rsp_demux_026_src0_endofpacket;                                                              // rsp_demux_026:src0_endofpacket -> rsp_mux:sink26_endofpacket
	wire          cmd_mux_004_src_valid;                                                                       // cmd_mux_004:src_valid -> edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter:in_valid
	wire  [107:0] cmd_mux_004_src_data;                                                                        // cmd_mux_004:src_data -> edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter:in_data
	wire          cmd_mux_004_src_ready;                                                                       // edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter:in_ready -> cmd_mux_004:src_ready
	wire   [26:0] cmd_mux_004_src_channel;                                                                     // cmd_mux_004:src_channel -> edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter:in_channel
	wire          cmd_mux_004_src_startofpacket;                                                               // cmd_mux_004:src_startofpacket -> edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                 // cmd_mux_004:src_endofpacket -> edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter:in_endofpacket
	wire          edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter_src_valid;              // edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter:out_valid -> edid_ram_slave_translator_avalon_universal_slave_0_agent:cp_valid
	wire   [80:0] edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter_src_data;               // edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter:out_data -> edid_ram_slave_translator_avalon_universal_slave_0_agent:cp_data
	wire          edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter_src_ready;              // edid_ram_slave_translator_avalon_universal_slave_0_agent:cp_ready -> edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter:out_ready
	wire   [26:0] edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter_src_channel;            // edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter:out_channel -> edid_ram_slave_translator_avalon_universal_slave_0_agent:cp_channel
	wire          edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter_src_startofpacket;      // edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter:out_startofpacket -> edid_ram_slave_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire          edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter_src_endofpacket;        // edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter:out_endofpacket -> edid_ram_slave_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          router_006_src_valid;                                                                        // router_006:src_valid -> edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter:in_valid
	wire   [80:0] router_006_src_data;                                                                         // router_006:src_data -> edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter:in_data
	wire          router_006_src_ready;                                                                        // edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter:in_ready -> router_006:src_ready
	wire   [26:0] router_006_src_channel;                                                                      // router_006:src_channel -> edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter:in_channel
	wire          router_006_src_startofpacket;                                                                // router_006:src_startofpacket -> edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter:in_startofpacket
	wire          router_006_src_endofpacket;                                                                  // router_006:src_endofpacket -> edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter:in_endofpacket
	wire          edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter_src_valid;              // edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter:out_valid -> rsp_demux_004:sink_valid
	wire  [107:0] edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter_src_data;               // edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter:out_data -> rsp_demux_004:sink_data
	wire          edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter_src_ready;              // rsp_demux_004:sink_ready -> edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter:out_ready
	wire   [26:0] edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter_src_channel;            // edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter:out_channel -> rsp_demux_004:sink_channel
	wire          edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter_src_startofpacket;      // edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter:out_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter_src_endofpacket;        // edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter:out_endofpacket -> rsp_demux_004:sink_endofpacket

	nios_altera_merlin_master_translator_181_mhudjri #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (19),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) cpu_data_master_translator (
		.clk                    (cpu_clk_clk_clk),                                                    //   input,   width = 1,                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                              //   input,   width = 1,                     reset.reset
		.uav_address            (cpu_data_master_translator_avalon_universal_master_0_address),       //  output,  width = 19, avalon_universal_master_0.address
		.uav_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (cpu_data_master_address),                                            //   input,  width = 19,      avalon_anti_master_0.address
		.av_waitrequest         (cpu_data_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (cpu_data_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (cpu_data_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (cpu_data_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_write               (cpu_data_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (cpu_data_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (cpu_data_master_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_burstcount          (1'b1),                                                               // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                               // (terminated),                                        
		.av_begintransfer       (1'b0),                                                               // (terminated),                                        
		.av_chipselect          (1'b0),                                                               // (terminated),                                        
		.av_readdatavalid       (),                                                                   // (terminated),                                        
		.av_lock                (1'b0),                                                               // (terminated),                                        
		.uav_clken              (),                                                                   // (terminated),                                        
		.av_clken               (1'b1),                                                               // (terminated),                                        
		.uav_response           (2'b00),                                                              // (terminated),                                        
		.av_response            (),                                                                   // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                               // (terminated),                                        
		.av_writeresponsevalid  ()                                                                    // (terminated),                                        
	);

	nios_altera_merlin_master_translator_181_mhudjri #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (19),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) cpu_instruction_master_translator (
		.clk                    (cpu_clk_clk_clk),                                                           //   input,   width = 1,                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                                     //   input,   width = 1,                     reset.reset
		.uav_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       //  output,  width = 19, avalon_universal_master_0.address
		.uav_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (cpu_instruction_master_address),                                            //   input,  width = 19,      avalon_anti_master_0.address
		.av_waitrequest         (cpu_instruction_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_read                (cpu_instruction_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (cpu_instruction_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_burstcount          (1'b1),                                                                      // (terminated),                                        
		.av_byteenable          (4'b1111),                                                                   // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                      // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                      // (terminated),                                        
		.av_chipselect          (1'b0),                                                                      // (terminated),                                        
		.av_readdatavalid       (),                                                                          // (terminated),                                        
		.av_write               (1'b0),                                                                      // (terminated),                                        
		.av_writedata           (32'b00000000000000000000000000000000),                                      // (terminated),                                        
		.av_lock                (1'b0),                                                                      // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                      // (terminated),                                        
		.uav_clken              (),                                                                          // (terminated),                                        
		.av_clken               (1'b1),                                                                      // (terminated),                                        
		.uav_response           (2'b00),                                                                     // (terminated),                                        
		.av_response            (),                                                                          // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                      // (terminated),                                        
		.av_writeresponsevalid  ()                                                                           // (terminated),                                        
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (cpu_clk_clk_clk),                                      //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //   input,   width = 1,                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                //  output,   width = 1,      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                  //  output,   width = 1,                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                   //  output,   width = 1,                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),              //  output,  width = 32,                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),             //  output,   width = 1,                         .chipselect
		.av_begintransfer       (),                                                     // (terminated),                                       
		.av_beginbursttransfer  (),                                                     // (terminated),                                       
		.av_burstcount          (),                                                     // (terminated),                                       
		.av_byteenable          (),                                                     // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                 // (terminated),                                       
		.av_writebyteenable     (),                                                     // (terminated),                                       
		.av_lock                (),                                                     // (terminated),                                       
		.av_clken               (),                                                     // (terminated),                                       
		.uav_clken              (1'b0),                                                 // (terminated),                                       
		.av_debugaccess         (),                                                     // (terminated),                                       
		.av_outputenable        (),                                                     // (terminated),                                       
		.uav_response           (),                                                     // (terminated),                                       
		.av_response            (2'b00),                                                // (terminated),                                       
		.uav_writeresponsevalid (),                                                     // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                  // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_translator (
		.clk                    (cpu_clk_clk_clk),                                                               //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                 //   input,   width = 1,                    reset.reset
		.uav_address            (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_address),                //  output,  width = 12,      avalon_anti_slave_0.address
		.av_write               (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount),             //  output,   width = 3,                         .burstcount
		.av_byteenable          (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                                              // (terminated),                                       
		.av_chipselect          (),                                                                              // (terminated),                                       
		.av_clken               (),                                                                              // (terminated),                                       
		.uav_clken              (1'b0),                                                                          // (terminated),                                       
		.av_outputenable        (),                                                                              // (terminated),                                       
		.uav_response           (),                                                                              // (terminated),                                       
		.av_response            (2'b00),                                                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                           // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_translator (
		.clk                    (cpu_clk_clk_clk),                                                             //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                               //   input,   width = 1,                    reset.reset
		.uav_address            (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_address),                //  output,  width = 12,      avalon_anti_slave_0.address
		.av_write               (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount),             //  output,   width = 3,                         .burstcount
		.av_byteenable          (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                                            // (terminated),                                       
		.av_beginbursttransfer  (),                                                                            // (terminated),                                       
		.av_writebyteenable     (),                                                                            // (terminated),                                       
		.av_chipselect          (),                                                                            // (terminated),                                       
		.av_clken               (),                                                                            // (terminated),                                       
		.uav_clken              (1'b0),                                                                        // (terminated),                                       
		.av_outputenable        (),                                                                            // (terminated),                                       
		.uav_response           (),                                                                            // (terminated),                                       
		.av_response            (2'b00),                                                                       // (terminated),                                       
		.uav_writeresponsevalid (),                                                                            // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                         // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_translator (
		.clk                    (cpu_clk_clk_clk),                                                             //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                               //   input,   width = 1,                    reset.reset
		.uav_address            (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_address),                //  output,  width = 14,      avalon_anti_slave_0.address
		.av_write               (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount),             //  output,   width = 3,                         .burstcount
		.av_byteenable          (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                                            // (terminated),                                       
		.av_beginbursttransfer  (),                                                                            // (terminated),                                       
		.av_writebyteenable     (),                                                                            // (terminated),                                       
		.av_chipselect          (),                                                                            // (terminated),                                       
		.av_clken               (),                                                                            // (terminated),                                       
		.uav_clken              (1'b0),                                                                        // (terminated),                                       
		.av_outputenable        (),                                                                            // (terminated),                                       
		.uav_response           (),                                                                            // (terminated),                                       
		.av_response            (2'b00),                                                                       // (terminated),                                       
		.uav_writeresponsevalid (),                                                                            // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                         // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) edid_ram_slave_translator_avalon_universal_slave_0_translator (
		.clk                    (cpu_clk_clk_clk),                                                           //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                             //   input,   width = 1,                    reset.reset
		.uav_address            (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 1,                         .byteenable
		.uav_readdata           (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_readdata),      //  output,   width = 8,                         .readdata
		.uav_writedata          (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_writedata),     //   input,   width = 8,                         .writedata
		.uav_lock               (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (edid_ram_slave_translator_avalon_universal_slave_0_address),                //  output,  width = 11,      avalon_anti_slave_0.address
		.av_write               (edid_ram_slave_translator_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (edid_ram_slave_translator_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (edid_ram_slave_translator_avalon_universal_slave_0_readdata),               //   input,   width = 8,                         .readdata
		.av_writedata           (edid_ram_slave_translator_avalon_universal_slave_0_writedata),              //  output,   width = 8,                         .writedata
		.av_burstcount          (edid_ram_slave_translator_avalon_universal_slave_0_burstcount),             //  output,   width = 3,                         .burstcount
		.av_byteenable          (edid_ram_slave_translator_avalon_universal_slave_0_byteenable),             //  output,   width = 1,                         .byteenable
		.av_readdatavalid       (edid_ram_slave_translator_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (edid_ram_slave_translator_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (edid_ram_slave_translator_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (edid_ram_slave_translator_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                                          // (terminated),                                       
		.av_beginbursttransfer  (),                                                                          // (terminated),                                       
		.av_writebyteenable     (),                                                                          // (terminated),                                       
		.av_chipselect          (),                                                                          // (terminated),                                       
		.av_clken               (),                                                                          // (terminated),                                       
		.uav_clken              (1'b0),                                                                      // (terminated),                                       
		.av_outputenable        (),                                                                          // (terminated),                                       
		.uav_response           (),                                                                          // (terminated),                                       
		.av_response            (2'b00),                                                                     // (terminated),                                       
		.uav_writeresponsevalid (),                                                                          // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                       // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) oc_i2c_master_av_slave_translator_avalon_universal_slave_0_translator (
		.clk                    (cpu_clk_clk_clk),                                                                   //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                     //   input,   width = 1,                    reset.reset
		.uav_address            (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_burstcount),             //  output,   width = 3,                         .burstcount
		.av_byteenable          (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                                                  // (terminated),                                       
		.av_beginbursttransfer  (),                                                                                  // (terminated),                                       
		.av_writebyteenable     (),                                                                                  // (terminated),                                       
		.av_chipselect          (),                                                                                  // (terminated),                                       
		.av_clken               (),                                                                                  // (terminated),                                       
		.uav_clken              (1'b0),                                                                              // (terminated),                                       
		.av_outputenable        (),                                                                                  // (terminated),                                       
		.uav_response           (),                                                                                  // (terminated),                                       
		.av_response            (2'b00),                                                                             // (terminated),                                       
		.uav_writeresponsevalid (),                                                                                  // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                               // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) oc_i2c_master_ti_avalon_universal_slave_0_translator (
		.clk                    (cpu_clk_clk_clk),                                                  //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),                    //   input,   width = 1,                    reset.reset
		.uav_address            (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_address),       //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (oc_i2c_master_ti_avalon_universal_slave_0_address),                //  output,   width = 5,      avalon_anti_slave_0.address
		.av_write               (oc_i2c_master_ti_avalon_universal_slave_0_write),                  //  output,   width = 1,                         .write
		.av_read                (oc_i2c_master_ti_avalon_universal_slave_0_read),                   //  output,   width = 1,                         .read
		.av_readdata            (oc_i2c_master_ti_avalon_universal_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (oc_i2c_master_ti_avalon_universal_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_burstcount          (oc_i2c_master_ti_avalon_universal_slave_0_burstcount),             //  output,   width = 3,                         .burstcount
		.av_byteenable          (oc_i2c_master_ti_avalon_universal_slave_0_byteenable),             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (oc_i2c_master_ti_avalon_universal_slave_0_readdatavalid),          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (oc_i2c_master_ti_avalon_universal_slave_0_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_lock                (oc_i2c_master_ti_avalon_universal_slave_0_lock),                   //  output,   width = 1,                         .lock
		.av_debugaccess         (oc_i2c_master_ti_avalon_universal_slave_0_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                                 // (terminated),                                       
		.av_beginbursttransfer  (),                                                                 // (terminated),                                       
		.av_writebyteenable     (),                                                                 // (terminated),                                       
		.av_chipselect          (),                                                                 // (terminated),                                       
		.av_clken               (),                                                                 // (terminated),                                       
		.uav_clken              (1'b0),                                                             // (terminated),                                       
		.av_outputenable        (),                                                                 // (terminated),                                       
		.uav_response           (),                                                                 // (terminated),                                       
		.av_response            (2'b00),                                                            // (terminated),                                       
		.uav_writeresponsevalid (),                                                                 // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                              // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) sysid_qsys_0_control_slave_translator (
		.clk                    (cpu_clk_clk_clk),                                   //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),     //   input,   width = 1,                    reset.reset
		.uav_address            (sysid_qsys_0_control_slave_agent_m0_address),       //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_0_control_slave_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (sysid_qsys_0_control_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (sysid_qsys_0_control_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (sysid_qsys_0_control_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_0_control_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (sysid_qsys_0_control_slave_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (sysid_qsys_0_control_slave_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (sysid_qsys_0_control_slave_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (sysid_qsys_0_control_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (sysid_qsys_0_control_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (sysid_qsys_0_control_slave_address),                //  output,   width = 1,      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_0_control_slave_readdata),               //   input,  width = 32,                         .readdata
		.av_write               (),                                                  // (terminated),                                       
		.av_read                (),                                                  // (terminated),                                       
		.av_writedata           (),                                                  // (terminated),                                       
		.av_begintransfer       (),                                                  // (terminated),                                       
		.av_beginbursttransfer  (),                                                  // (terminated),                                       
		.av_burstcount          (),                                                  // (terminated),                                       
		.av_byteenable          (),                                                  // (terminated),                                       
		.av_readdatavalid       (1'b0),                                              // (terminated),                                       
		.av_waitrequest         (1'b0),                                              // (terminated),                                       
		.av_writebyteenable     (),                                                  // (terminated),                                       
		.av_lock                (),                                                  // (terminated),                                       
		.av_chipselect          (),                                                  // (terminated),                                       
		.av_clken               (),                                                  // (terminated),                                       
		.uav_clken              (1'b0),                                              // (terminated),                                       
		.av_debugaccess         (),                                                  // (terminated),                                       
		.av_outputenable        (),                                                  // (terminated),                                       
		.uav_response           (),                                                  // (terminated),                                       
		.av_response            (2'b00),                                             // (terminated),                                       
		.uav_writeresponsevalid (),                                                  // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                               // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) cpu_debug_mem_slave_translator (
		.clk                    (cpu_clk_clk_clk),                            //   input,   width = 1,                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),      //   input,   width = 1,                    reset.reset
		.uav_address            (cpu_debug_mem_slave_agent_m0_address),       //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (cpu_debug_mem_slave_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (cpu_debug_mem_slave_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (cpu_debug_mem_slave_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (cpu_debug_mem_slave_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (cpu_debug_mem_slave_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (cpu_debug_mem_slave_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (cpu_debug_mem_slave_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (cpu_debug_mem_slave_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (cpu_debug_mem_slave_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (cpu_debug_mem_slave_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (cpu_debug_mem_slave_address),                //  output,   width = 9,      avalon_anti_slave_0.address
		.av_write               (cpu_debug_mem_slave_write),                  //  output,   width = 1,                         .write
		.av_read                (cpu_debug_mem_slave_read),                   //  output,   width = 1,                         .read
		.av_readdata            (cpu_debug_mem_slave_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (cpu_debug_mem_slave_writedata),              //  output,  width = 32,                         .writedata
		.av_byteenable          (cpu_debug_mem_slave_byteenable),             //  output,   width = 4,                         .byteenable
		.av_waitrequest         (cpu_debug_mem_slave_waitrequest),            //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (cpu_debug_mem_slave_debugaccess),            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                           // (terminated),                                       
		.av_beginbursttransfer  (),                                           // (terminated),                                       
		.av_burstcount          (),                                           // (terminated),                                       
		.av_readdatavalid       (1'b0),                                       // (terminated),                                       
		.av_writebyteenable     (),                                           // (terminated),                                       
		.av_lock                (),                                           // (terminated),                                       
		.av_chipselect          (),                                           // (terminated),                                       
		.av_clken               (),                                           // (terminated),                                       
		.uav_clken              (1'b0),                                       // (terminated),                                       
		.av_outputenable        (),                                           // (terminated),                                       
		.uav_response           (),                                           // (terminated),                                       
		.av_response            (2'b00),                                      // (terminated),                                       
		.uav_writeresponsevalid (),                                           // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                        // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) cpu_ram_s1_translator (
		.clk                    (cpu_clk_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (cpu_ram_s1_agent_m0_address),                   //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (cpu_ram_s1_agent_m0_burstcount),                //   input,   width = 3,                         .burstcount
		.uav_read               (cpu_ram_s1_agent_m0_read),                      //   input,   width = 1,                         .read
		.uav_write              (cpu_ram_s1_agent_m0_write),                     //   input,   width = 1,                         .write
		.uav_waitrequest        (cpu_ram_s1_agent_m0_waitrequest),               //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (cpu_ram_s1_agent_m0_readdatavalid),             //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (cpu_ram_s1_agent_m0_byteenable),                //   input,   width = 4,                         .byteenable
		.uav_readdata           (cpu_ram_s1_agent_m0_readdata),                  //  output,  width = 32,                         .readdata
		.uav_writedata          (cpu_ram_s1_agent_m0_writedata),                 //   input,  width = 32,                         .writedata
		.uav_lock               (cpu_ram_s1_agent_m0_lock),                      //   input,   width = 1,                         .lock
		.uav_debugaccess        (cpu_ram_s1_agent_m0_debugaccess),               //   input,   width = 1,                         .debugaccess
		.av_address             (cpu_ram_s1_address),                            //  output,  width = 15,      avalon_anti_slave_0.address
		.av_write               (cpu_ram_s1_write),                              //  output,   width = 1,                         .write
		.av_readdata            (cpu_ram_s1_readdata),                           //   input,  width = 32,                         .readdata
		.av_writedata           (cpu_ram_s1_writedata),                          //  output,  width = 32,                         .writedata
		.av_byteenable          (cpu_ram_s1_byteenable),                         //  output,   width = 4,                         .byteenable
		.av_chipselect          (cpu_ram_s1_chipselect),                         //  output,   width = 1,                         .chipselect
		.av_clken               (cpu_ram_s1_clken),                              //  output,   width = 1,                         .clken
		.av_read                (),                                              // (terminated),                                       
		.av_begintransfer       (),                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                              // (terminated),                                       
		.av_burstcount          (),                                              // (terminated),                                       
		.av_readdatavalid       (1'b0),                                          // (terminated),                                       
		.av_waitrequest         (1'b0),                                          // (terminated),                                       
		.av_writebyteenable     (),                                              // (terminated),                                       
		.av_lock                (),                                              // (terminated),                                       
		.uav_clken              (1'b0),                                          // (terminated),                                       
		.av_debugaccess         (),                                              // (terminated),                                       
		.av_outputenable        (),                                              // (terminated),                                       
		.uav_response           (),                                              // (terminated),                                       
		.av_response            (2'b00),                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                           // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) edid_ram_access_pio_s1_translator (
		.clk                    (cpu_clk_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (edid_ram_access_pio_s1_agent_m0_address),       //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (edid_ram_access_pio_s1_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (edid_ram_access_pio_s1_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (edid_ram_access_pio_s1_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (edid_ram_access_pio_s1_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (edid_ram_access_pio_s1_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (edid_ram_access_pio_s1_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (edid_ram_access_pio_s1_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (edid_ram_access_pio_s1_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (edid_ram_access_pio_s1_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (edid_ram_access_pio_s1_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (edid_ram_access_pio_s1_address),                //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (edid_ram_access_pio_s1_write),                  //  output,   width = 1,                         .write
		.av_readdata            (edid_ram_access_pio_s1_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (edid_ram_access_pio_s1_writedata),              //  output,  width = 32,                         .writedata
		.av_chipselect          (edid_ram_access_pio_s1_chipselect),             //  output,   width = 1,                         .chipselect
		.av_read                (),                                              // (terminated),                                       
		.av_begintransfer       (),                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                              // (terminated),                                       
		.av_burstcount          (),                                              // (terminated),                                       
		.av_byteenable          (),                                              // (terminated),                                       
		.av_readdatavalid       (1'b0),                                          // (terminated),                                       
		.av_waitrequest         (1'b0),                                          // (terminated),                                       
		.av_writebyteenable     (),                                              // (terminated),                                       
		.av_lock                (),                                              // (terminated),                                       
		.av_clken               (),                                              // (terminated),                                       
		.uav_clken              (1'b0),                                          // (terminated),                                       
		.av_debugaccess         (),                                              // (terminated),                                       
		.av_outputenable        (),                                              // (terminated),                                       
		.uav_response           (),                                              // (terminated),                                       
		.av_response            (2'b00),                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                           // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) measure_pio_s1_translator (
		.clk                    (cpu_clk_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (measure_pio_s1_agent_m0_address),               //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (measure_pio_s1_agent_m0_burstcount),            //   input,   width = 3,                         .burstcount
		.uav_read               (measure_pio_s1_agent_m0_read),                  //   input,   width = 1,                         .read
		.uav_write              (measure_pio_s1_agent_m0_write),                 //   input,   width = 1,                         .write
		.uav_waitrequest        (measure_pio_s1_agent_m0_waitrequest),           //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (measure_pio_s1_agent_m0_readdatavalid),         //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (measure_pio_s1_agent_m0_byteenable),            //   input,   width = 4,                         .byteenable
		.uav_readdata           (measure_pio_s1_agent_m0_readdata),              //  output,  width = 32,                         .readdata
		.uav_writedata          (measure_pio_s1_agent_m0_writedata),             //   input,  width = 32,                         .writedata
		.uav_lock               (measure_pio_s1_agent_m0_lock),                  //   input,   width = 1,                         .lock
		.uav_debugaccess        (measure_pio_s1_agent_m0_debugaccess),           //   input,   width = 1,                         .debugaccess
		.av_address             (measure_pio_s1_address),                        //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (measure_pio_s1_write),                          //  output,   width = 1,                         .write
		.av_readdata            (measure_pio_s1_readdata),                       //   input,  width = 32,                         .readdata
		.av_writedata           (measure_pio_s1_writedata),                      //  output,  width = 32,                         .writedata
		.av_chipselect          (measure_pio_s1_chipselect),                     //  output,   width = 1,                         .chipselect
		.av_read                (),                                              // (terminated),                                       
		.av_begintransfer       (),                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                              // (terminated),                                       
		.av_burstcount          (),                                              // (terminated),                                       
		.av_byteenable          (),                                              // (terminated),                                       
		.av_readdatavalid       (1'b0),                                          // (terminated),                                       
		.av_waitrequest         (1'b0),                                          // (terminated),                                       
		.av_writebyteenable     (),                                              // (terminated),                                       
		.av_lock                (),                                              // (terminated),                                       
		.av_clken               (),                                              // (terminated),                                       
		.uav_clken              (1'b0),                                          // (terminated),                                       
		.av_debugaccess         (),                                              // (terminated),                                       
		.av_outputenable        (),                                              // (terminated),                                       
		.uav_response           (),                                              // (terminated),                                       
		.av_response            (2'b00),                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                           // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_os_pio_s1_translator (
		.clk                    (cpu_clk_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (tx_os_pio_s1_agent_m0_address),                 //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (tx_os_pio_s1_agent_m0_burstcount),              //   input,   width = 3,                         .burstcount
		.uav_read               (tx_os_pio_s1_agent_m0_read),                    //   input,   width = 1,                         .read
		.uav_write              (tx_os_pio_s1_agent_m0_write),                   //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_os_pio_s1_agent_m0_waitrequest),             //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_os_pio_s1_agent_m0_readdatavalid),           //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_os_pio_s1_agent_m0_byteenable),              //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_os_pio_s1_agent_m0_readdata),                //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_os_pio_s1_agent_m0_writedata),               //   input,  width = 32,                         .writedata
		.uav_lock               (tx_os_pio_s1_agent_m0_lock),                    //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_os_pio_s1_agent_m0_debugaccess),             //   input,   width = 1,                         .debugaccess
		.av_address             (tx_os_pio_s1_address),                          //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (tx_os_pio_s1_write),                            //  output,   width = 1,                         .write
		.av_readdata            (tx_os_pio_s1_readdata),                         //   input,  width = 32,                         .readdata
		.av_writedata           (tx_os_pio_s1_writedata),                        //  output,  width = 32,                         .writedata
		.av_chipselect          (tx_os_pio_s1_chipselect),                       //  output,   width = 1,                         .chipselect
		.av_read                (),                                              // (terminated),                                       
		.av_begintransfer       (),                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                              // (terminated),                                       
		.av_burstcount          (),                                              // (terminated),                                       
		.av_byteenable          (),                                              // (terminated),                                       
		.av_readdatavalid       (1'b0),                                          // (terminated),                                       
		.av_waitrequest         (1'b0),                                          // (terminated),                                       
		.av_writebyteenable     (),                                              // (terminated),                                       
		.av_lock                (),                                              // (terminated),                                       
		.av_clken               (),                                              // (terminated),                                       
		.uav_clken              (1'b0),                                          // (terminated),                                       
		.av_debugaccess         (),                                              // (terminated),                                       
		.av_outputenable        (),                                              // (terminated),                                       
		.uav_response           (),                                              // (terminated),                                       
		.av_response            (2'b00),                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                           // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) measure_valid_pio_s1_translator (
		.clk                    (cpu_clk_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (measure_valid_pio_s1_agent_m0_address),         //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (measure_valid_pio_s1_agent_m0_burstcount),      //   input,   width = 3,                         .burstcount
		.uav_read               (measure_valid_pio_s1_agent_m0_read),            //   input,   width = 1,                         .read
		.uav_write              (measure_valid_pio_s1_agent_m0_write),           //   input,   width = 1,                         .write
		.uav_waitrequest        (measure_valid_pio_s1_agent_m0_waitrequest),     //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (measure_valid_pio_s1_agent_m0_readdatavalid),   //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (measure_valid_pio_s1_agent_m0_byteenable),      //   input,   width = 4,                         .byteenable
		.uav_readdata           (measure_valid_pio_s1_agent_m0_readdata),        //  output,  width = 32,                         .readdata
		.uav_writedata          (measure_valid_pio_s1_agent_m0_writedata),       //   input,  width = 32,                         .writedata
		.uav_lock               (measure_valid_pio_s1_agent_m0_lock),            //   input,   width = 1,                         .lock
		.uav_debugaccess        (measure_valid_pio_s1_agent_m0_debugaccess),     //   input,   width = 1,                         .debugaccess
		.av_address             (measure_valid_pio_s1_address),                  //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (measure_valid_pio_s1_write),                    //  output,   width = 1,                         .write
		.av_readdata            (measure_valid_pio_s1_readdata),                 //   input,  width = 32,                         .readdata
		.av_writedata           (measure_valid_pio_s1_writedata),                //  output,  width = 32,                         .writedata
		.av_chipselect          (measure_valid_pio_s1_chipselect),               //  output,   width = 1,                         .chipselect
		.av_read                (),                                              // (terminated),                                       
		.av_begintransfer       (),                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                              // (terminated),                                       
		.av_burstcount          (),                                              // (terminated),                                       
		.av_byteenable          (),                                              // (terminated),                                       
		.av_readdatavalid       (1'b0),                                          // (terminated),                                       
		.av_waitrequest         (1'b0),                                          // (terminated),                                       
		.av_writebyteenable     (),                                              // (terminated),                                       
		.av_lock                (),                                              // (terminated),                                       
		.av_clken               (),                                              // (terminated),                                       
		.uav_clken              (1'b0),                                          // (terminated),                                       
		.av_debugaccess         (),                                              // (terminated),                                       
		.av_outputenable        (),                                              // (terminated),                                       
		.uav_response           (),                                              // (terminated),                                       
		.av_response            (2'b00),                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                           // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_rst_pll_pio_s1_translator (
		.clk                    (cpu_clk_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (tx_rst_pll_pio_s1_agent_m0_address),            //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (tx_rst_pll_pio_s1_agent_m0_burstcount),         //   input,   width = 3,                         .burstcount
		.uav_read               (tx_rst_pll_pio_s1_agent_m0_read),               //   input,   width = 1,                         .read
		.uav_write              (tx_rst_pll_pio_s1_agent_m0_write),              //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_rst_pll_pio_s1_agent_m0_waitrequest),        //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_rst_pll_pio_s1_agent_m0_readdatavalid),      //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_rst_pll_pio_s1_agent_m0_byteenable),         //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_rst_pll_pio_s1_agent_m0_readdata),           //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_rst_pll_pio_s1_agent_m0_writedata),          //   input,  width = 32,                         .writedata
		.uav_lock               (tx_rst_pll_pio_s1_agent_m0_lock),               //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_rst_pll_pio_s1_agent_m0_debugaccess),        //   input,   width = 1,                         .debugaccess
		.av_address             (tx_rst_pll_pio_s1_address),                     //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (tx_rst_pll_pio_s1_write),                       //  output,   width = 1,                         .write
		.av_readdata            (tx_rst_pll_pio_s1_readdata),                    //   input,  width = 32,                         .readdata
		.av_writedata           (tx_rst_pll_pio_s1_writedata),                   //  output,  width = 32,                         .writedata
		.av_chipselect          (tx_rst_pll_pio_s1_chipselect),                  //  output,   width = 1,                         .chipselect
		.av_read                (),                                              // (terminated),                                       
		.av_begintransfer       (),                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                              // (terminated),                                       
		.av_burstcount          (),                                              // (terminated),                                       
		.av_byteenable          (),                                              // (terminated),                                       
		.av_readdatavalid       (1'b0),                                          // (terminated),                                       
		.av_waitrequest         (1'b0),                                          // (terminated),                                       
		.av_writebyteenable     (),                                              // (terminated),                                       
		.av_lock                (),                                              // (terminated),                                       
		.av_clken               (),                                              // (terminated),                                       
		.uav_clken              (1'b0),                                          // (terminated),                                       
		.av_debugaccess         (),                                              // (terminated),                                       
		.av_outputenable        (),                                              // (terminated),                                       
		.uav_response           (),                                              // (terminated),                                       
		.av_response            (2'b00),                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                           // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_rst_xcvr_pio_s1_translator (
		.clk                    (cpu_clk_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (tx_rst_xcvr_pio_s1_agent_m0_address),           //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (tx_rst_xcvr_pio_s1_agent_m0_burstcount),        //   input,   width = 3,                         .burstcount
		.uav_read               (tx_rst_xcvr_pio_s1_agent_m0_read),              //   input,   width = 1,                         .read
		.uav_write              (tx_rst_xcvr_pio_s1_agent_m0_write),             //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_rst_xcvr_pio_s1_agent_m0_waitrequest),       //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_rst_xcvr_pio_s1_agent_m0_readdatavalid),     //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_rst_xcvr_pio_s1_agent_m0_byteenable),        //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_rst_xcvr_pio_s1_agent_m0_readdata),          //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_rst_xcvr_pio_s1_agent_m0_writedata),         //   input,  width = 32,                         .writedata
		.uav_lock               (tx_rst_xcvr_pio_s1_agent_m0_lock),              //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_rst_xcvr_pio_s1_agent_m0_debugaccess),       //   input,   width = 1,                         .debugaccess
		.av_address             (tx_rst_xcvr_pio_s1_address),                    //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (tx_rst_xcvr_pio_s1_write),                      //  output,   width = 1,                         .write
		.av_readdata            (tx_rst_xcvr_pio_s1_readdata),                   //   input,  width = 32,                         .readdata
		.av_writedata           (tx_rst_xcvr_pio_s1_writedata),                  //  output,  width = 32,                         .writedata
		.av_chipselect          (tx_rst_xcvr_pio_s1_chipselect),                 //  output,   width = 1,                         .chipselect
		.av_read                (),                                              // (terminated),                                       
		.av_begintransfer       (),                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                              // (terminated),                                       
		.av_burstcount          (),                                              // (terminated),                                       
		.av_byteenable          (),                                              // (terminated),                                       
		.av_readdatavalid       (1'b0),                                          // (terminated),                                       
		.av_waitrequest         (1'b0),                                          // (terminated),                                       
		.av_writebyteenable     (),                                              // (terminated),                                       
		.av_lock                (),                                              // (terminated),                                       
		.av_clken               (),                                              // (terminated),                                       
		.uav_clken              (1'b0),                                          // (terminated),                                       
		.av_debugaccess         (),                                              // (terminated),                                       
		.av_outputenable        (),                                              // (terminated),                                       
		.uav_response           (),                                              // (terminated),                                       
		.av_response            (2'b00),                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                           // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tmds_bit_clock_ratio_pio_s1_translator (
		.clk                    (cpu_clk_clk_clk),                                    //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),      //   input,   width = 1,                    reset.reset
		.uav_address            (tmds_bit_clock_ratio_pio_s1_agent_m0_address),       //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (tmds_bit_clock_ratio_pio_s1_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (tmds_bit_clock_ratio_pio_s1_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tmds_bit_clock_ratio_pio_s1_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tmds_bit_clock_ratio_pio_s1_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tmds_bit_clock_ratio_pio_s1_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tmds_bit_clock_ratio_pio_s1_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tmds_bit_clock_ratio_pio_s1_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tmds_bit_clock_ratio_pio_s1_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tmds_bit_clock_ratio_pio_s1_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tmds_bit_clock_ratio_pio_s1_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tmds_bit_clock_ratio_pio_s1_address),                //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (tmds_bit_clock_ratio_pio_s1_write),                  //  output,   width = 1,                         .write
		.av_readdata            (tmds_bit_clock_ratio_pio_s1_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tmds_bit_clock_ratio_pio_s1_writedata),              //  output,  width = 32,                         .writedata
		.av_chipselect          (tmds_bit_clock_ratio_pio_s1_chipselect),             //  output,   width = 1,                         .chipselect
		.av_read                (),                                                   // (terminated),                                       
		.av_begintransfer       (),                                                   // (terminated),                                       
		.av_beginbursttransfer  (),                                                   // (terminated),                                       
		.av_burstcount          (),                                                   // (terminated),                                       
		.av_byteenable          (),                                                   // (terminated),                                       
		.av_readdatavalid       (1'b0),                                               // (terminated),                                       
		.av_waitrequest         (1'b0),                                               // (terminated),                                       
		.av_writebyteenable     (),                                                   // (terminated),                                       
		.av_lock                (),                                                   // (terminated),                                       
		.av_clken               (),                                                   // (terminated),                                       
		.uav_clken              (1'b0),                                               // (terminated),                                       
		.av_debugaccess         (),                                                   // (terminated),                                       
		.av_outputenable        (),                                                   // (terminated),                                       
		.uav_response           (),                                                   // (terminated),                                       
		.av_response            (2'b00),                                              // (terminated),                                       
		.uav_writeresponsevalid (),                                                   // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_iopll_waitrequest_pio_s1_translator (
		.clk                    (cpu_clk_clk_clk),                                    //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),      //   input,   width = 1,                    reset.reset
		.uav_address            (tx_iopll_waitrequest_pio_s1_agent_m0_address),       //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (tx_iopll_waitrequest_pio_s1_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (tx_iopll_waitrequest_pio_s1_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tx_iopll_waitrequest_pio_s1_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_iopll_waitrequest_pio_s1_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_iopll_waitrequest_pio_s1_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_iopll_waitrequest_pio_s1_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_iopll_waitrequest_pio_s1_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_iopll_waitrequest_pio_s1_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tx_iopll_waitrequest_pio_s1_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_iopll_waitrequest_pio_s1_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tx_iopll_waitrequest_pio_s1_address),                //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (tx_iopll_waitrequest_pio_s1_write),                  //  output,   width = 1,                         .write
		.av_readdata            (tx_iopll_waitrequest_pio_s1_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tx_iopll_waitrequest_pio_s1_writedata),              //  output,  width = 32,                         .writedata
		.av_chipselect          (tx_iopll_waitrequest_pio_s1_chipselect),             //  output,   width = 1,                         .chipselect
		.av_read                (),                                                   // (terminated),                                       
		.av_begintransfer       (),                                                   // (terminated),                                       
		.av_beginbursttransfer  (),                                                   // (terminated),                                       
		.av_burstcount          (),                                                   // (terminated),                                       
		.av_byteenable          (),                                                   // (terminated),                                       
		.av_readdatavalid       (1'b0),                                               // (terminated),                                       
		.av_waitrequest         (1'b0),                                               // (terminated),                                       
		.av_writebyteenable     (),                                                   // (terminated),                                       
		.av_lock                (),                                                   // (terminated),                                       
		.av_clken               (),                                                   // (terminated),                                       
		.uav_clken              (1'b0),                                               // (terminated),                                       
		.av_debugaccess         (),                                                   // (terminated),                                       
		.av_outputenable        (),                                                   // (terminated),                                       
		.uav_response           (),                                                   // (terminated),                                       
		.av_response            (2'b00),                                              // (terminated),                                       
		.uav_writeresponsevalid (),                                                   // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_pll_waitrequest_pio_s1_translator (
		.clk                    (cpu_clk_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //   input,   width = 1,                    reset.reset
		.uav_address            (tx_pll_waitrequest_pio_s1_agent_m0_address),       //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (tx_pll_waitrequest_pio_s1_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (tx_pll_waitrequest_pio_s1_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tx_pll_waitrequest_pio_s1_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_pll_waitrequest_pio_s1_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_pll_waitrequest_pio_s1_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_pll_waitrequest_pio_s1_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_pll_waitrequest_pio_s1_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_pll_waitrequest_pio_s1_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tx_pll_waitrequest_pio_s1_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_pll_waitrequest_pio_s1_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tx_pll_waitrequest_pio_s1_address),                //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (tx_pll_waitrequest_pio_s1_write),                  //  output,   width = 1,                         .write
		.av_readdata            (tx_pll_waitrequest_pio_s1_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tx_pll_waitrequest_pio_s1_writedata),              //  output,  width = 32,                         .writedata
		.av_chipselect          (tx_pll_waitrequest_pio_s1_chipselect),             //  output,   width = 1,                         .chipselect
		.av_read                (),                                                 // (terminated),                                       
		.av_begintransfer       (),                                                 // (terminated),                                       
		.av_beginbursttransfer  (),                                                 // (terminated),                                       
		.av_burstcount          (),                                                 // (terminated),                                       
		.av_byteenable          (),                                                 // (terminated),                                       
		.av_readdatavalid       (1'b0),                                             // (terminated),                                       
		.av_waitrequest         (1'b0),                                             // (terminated),                                       
		.av_writebyteenable     (),                                                 // (terminated),                                       
		.av_lock                (),                                                 // (terminated),                                       
		.av_clken               (),                                                 // (terminated),                                       
		.uav_clken              (1'b0),                                             // (terminated),                                       
		.av_debugaccess         (),                                                 // (terminated),                                       
		.av_outputenable        (),                                                 // (terminated),                                       
		.uav_response           (),                                                 // (terminated),                                       
		.av_response            (2'b00),                                            // (terminated),                                       
		.uav_writeresponsevalid (),                                                 // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                              // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_pma_ch_s1_translator (
		.clk                    (cpu_clk_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (tx_pma_ch_s1_agent_m0_address),                 //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (tx_pma_ch_s1_agent_m0_burstcount),              //   input,   width = 3,                         .burstcount
		.uav_read               (tx_pma_ch_s1_agent_m0_read),                    //   input,   width = 1,                         .read
		.uav_write              (tx_pma_ch_s1_agent_m0_write),                   //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_pma_ch_s1_agent_m0_waitrequest),             //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_pma_ch_s1_agent_m0_readdatavalid),           //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_pma_ch_s1_agent_m0_byteenable),              //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_pma_ch_s1_agent_m0_readdata),                //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_pma_ch_s1_agent_m0_writedata),               //   input,  width = 32,                         .writedata
		.uav_lock               (tx_pma_ch_s1_agent_m0_lock),                    //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_pma_ch_s1_agent_m0_debugaccess),             //   input,   width = 1,                         .debugaccess
		.av_address             (tx_pma_ch_s1_address),                          //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (tx_pma_ch_s1_write),                            //  output,   width = 1,                         .write
		.av_readdata            (tx_pma_ch_s1_readdata),                         //   input,  width = 32,                         .readdata
		.av_writedata           (tx_pma_ch_s1_writedata),                        //  output,  width = 32,                         .writedata
		.av_chipselect          (tx_pma_ch_s1_chipselect),                       //  output,   width = 1,                         .chipselect
		.av_read                (),                                              // (terminated),                                       
		.av_begintransfer       (),                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                              // (terminated),                                       
		.av_burstcount          (),                                              // (terminated),                                       
		.av_byteenable          (),                                              // (terminated),                                       
		.av_readdatavalid       (1'b0),                                          // (terminated),                                       
		.av_waitrequest         (1'b0),                                          // (terminated),                                       
		.av_writebyteenable     (),                                              // (terminated),                                       
		.av_lock                (),                                              // (terminated),                                       
		.av_clken               (),                                              // (terminated),                                       
		.uav_clken              (1'b0),                                          // (terminated),                                       
		.av_debugaccess         (),                                              // (terminated),                                       
		.av_outputenable        (),                                              // (terminated),                                       
		.uav_response           (),                                              // (terminated),                                       
		.av_response            (2'b00),                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                           // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_pma_cal_busy_pio_s1_translator (
		.clk                    (cpu_clk_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (tx_pma_cal_busy_pio_s1_agent_m0_address),       //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (tx_pma_cal_busy_pio_s1_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (tx_pma_cal_busy_pio_s1_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tx_pma_cal_busy_pio_s1_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_pma_cal_busy_pio_s1_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_pma_cal_busy_pio_s1_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_pma_cal_busy_pio_s1_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_pma_cal_busy_pio_s1_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_pma_cal_busy_pio_s1_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tx_pma_cal_busy_pio_s1_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_pma_cal_busy_pio_s1_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tx_pma_cal_busy_pio_s1_address),                //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (tx_pma_cal_busy_pio_s1_write),                  //  output,   width = 1,                         .write
		.av_readdata            (tx_pma_cal_busy_pio_s1_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tx_pma_cal_busy_pio_s1_writedata),              //  output,  width = 32,                         .writedata
		.av_chipselect          (tx_pma_cal_busy_pio_s1_chipselect),             //  output,   width = 1,                         .chipselect
		.av_read                (),                                              // (terminated),                                       
		.av_begintransfer       (),                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                              // (terminated),                                       
		.av_burstcount          (),                                              // (terminated),                                       
		.av_byteenable          (),                                              // (terminated),                                       
		.av_readdatavalid       (1'b0),                                          // (terminated),                                       
		.av_waitrequest         (1'b0),                                          // (terminated),                                       
		.av_writebyteenable     (),                                              // (terminated),                                       
		.av_lock                (),                                              // (terminated),                                       
		.av_clken               (),                                              // (terminated),                                       
		.uav_clken              (1'b0),                                          // (terminated),                                       
		.av_debugaccess         (),                                              // (terminated),                                       
		.av_outputenable        (),                                              // (terminated),                                       
		.uav_response           (),                                              // (terminated),                                       
		.av_response            (2'b00),                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                           // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_rcfg_en_pio_s1_translator (
		.clk                    (cpu_clk_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (tx_rcfg_en_pio_s1_agent_m0_address),            //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (tx_rcfg_en_pio_s1_agent_m0_burstcount),         //   input,   width = 3,                         .burstcount
		.uav_read               (tx_rcfg_en_pio_s1_agent_m0_read),               //   input,   width = 1,                         .read
		.uav_write              (tx_rcfg_en_pio_s1_agent_m0_write),              //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_rcfg_en_pio_s1_agent_m0_waitrequest),        //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_rcfg_en_pio_s1_agent_m0_readdatavalid),      //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_rcfg_en_pio_s1_agent_m0_byteenable),         //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_rcfg_en_pio_s1_agent_m0_readdata),           //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_rcfg_en_pio_s1_agent_m0_writedata),          //   input,  width = 32,                         .writedata
		.uav_lock               (tx_rcfg_en_pio_s1_agent_m0_lock),               //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_rcfg_en_pio_s1_agent_m0_debugaccess),        //   input,   width = 1,                         .debugaccess
		.av_address             (tx_rcfg_en_pio_s1_address),                     //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (tx_rcfg_en_pio_s1_write),                       //  output,   width = 1,                         .write
		.av_readdata            (tx_rcfg_en_pio_s1_readdata),                    //   input,  width = 32,                         .readdata
		.av_writedata           (tx_rcfg_en_pio_s1_writedata),                   //  output,  width = 32,                         .writedata
		.av_chipselect          (tx_rcfg_en_pio_s1_chipselect),                  //  output,   width = 1,                         .chipselect
		.av_read                (),                                              // (terminated),                                       
		.av_begintransfer       (),                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                              // (terminated),                                       
		.av_burstcount          (),                                              // (terminated),                                       
		.av_byteenable          (),                                              // (terminated),                                       
		.av_readdatavalid       (1'b0),                                          // (terminated),                                       
		.av_waitrequest         (1'b0),                                          // (terminated),                                       
		.av_writebyteenable     (),                                              // (terminated),                                       
		.av_lock                (),                                              // (terminated),                                       
		.av_clken               (),                                              // (terminated),                                       
		.uav_clken              (1'b0),                                          // (terminated),                                       
		.av_debugaccess         (),                                              // (terminated),                                       
		.av_outputenable        (),                                              // (terminated),                                       
		.uav_response           (),                                              // (terminated),                                       
		.av_response            (2'b00),                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                           // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_pma_waitrequest_pio_s1_translator (
		.clk                    (cpu_clk_clk_clk),                                  //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //   input,   width = 1,                    reset.reset
		.uav_address            (tx_pma_waitrequest_pio_s1_agent_m0_address),       //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (tx_pma_waitrequest_pio_s1_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (tx_pma_waitrequest_pio_s1_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (tx_pma_waitrequest_pio_s1_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_pma_waitrequest_pio_s1_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_pma_waitrequest_pio_s1_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_pma_waitrequest_pio_s1_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_pma_waitrequest_pio_s1_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_pma_waitrequest_pio_s1_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (tx_pma_waitrequest_pio_s1_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_pma_waitrequest_pio_s1_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (tx_pma_waitrequest_pio_s1_address),                //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (tx_pma_waitrequest_pio_s1_write),                  //  output,   width = 1,                         .write
		.av_readdata            (tx_pma_waitrequest_pio_s1_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (tx_pma_waitrequest_pio_s1_writedata),              //  output,  width = 32,                         .writedata
		.av_chipselect          (tx_pma_waitrequest_pio_s1_chipselect),             //  output,   width = 1,                         .chipselect
		.av_read                (),                                                 // (terminated),                                       
		.av_begintransfer       (),                                                 // (terminated),                                       
		.av_beginbursttransfer  (),                                                 // (terminated),                                       
		.av_burstcount          (),                                                 // (terminated),                                       
		.av_byteenable          (),                                                 // (terminated),                                       
		.av_readdatavalid       (1'b0),                                             // (terminated),                                       
		.av_waitrequest         (1'b0),                                             // (terminated),                                       
		.av_writebyteenable     (),                                                 // (terminated),                                       
		.av_lock                (),                                                 // (terminated),                                       
		.av_clken               (),                                                 // (terminated),                                       
		.uav_clken              (1'b0),                                             // (terminated),                                       
		.av_debugaccess         (),                                                 // (terminated),                                       
		.av_outputenable        (),                                                 // (terminated),                                       
		.uav_response           (),                                                 // (terminated),                                       
		.av_response            (2'b00),                                            // (terminated),                                       
		.uav_writeresponsevalid (),                                                 // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                              // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) wd_timer_s1_translator (
		.clk                    (cpu_clk_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (wd_timer_s1_agent_m0_address),                  //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (wd_timer_s1_agent_m0_burstcount),               //   input,   width = 3,                         .burstcount
		.uav_read               (wd_timer_s1_agent_m0_read),                     //   input,   width = 1,                         .read
		.uav_write              (wd_timer_s1_agent_m0_write),                    //   input,   width = 1,                         .write
		.uav_waitrequest        (wd_timer_s1_agent_m0_waitrequest),              //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (wd_timer_s1_agent_m0_readdatavalid),            //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (wd_timer_s1_agent_m0_byteenable),               //   input,   width = 4,                         .byteenable
		.uav_readdata           (wd_timer_s1_agent_m0_readdata),                 //  output,  width = 32,                         .readdata
		.uav_writedata          (wd_timer_s1_agent_m0_writedata),                //   input,  width = 32,                         .writedata
		.uav_lock               (wd_timer_s1_agent_m0_lock),                     //   input,   width = 1,                         .lock
		.uav_debugaccess        (wd_timer_s1_agent_m0_debugaccess),              //   input,   width = 1,                         .debugaccess
		.av_address             (wd_timer_s1_address),                           //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write               (wd_timer_s1_write),                             //  output,   width = 1,                         .write
		.av_readdata            (wd_timer_s1_readdata),                          //   input,  width = 16,                         .readdata
		.av_writedata           (wd_timer_s1_writedata),                         //  output,  width = 16,                         .writedata
		.av_chipselect          (wd_timer_s1_chipselect),                        //  output,   width = 1,                         .chipselect
		.av_read                (),                                              // (terminated),                                       
		.av_begintransfer       (),                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                              // (terminated),                                       
		.av_burstcount          (),                                              // (terminated),                                       
		.av_byteenable          (),                                              // (terminated),                                       
		.av_readdatavalid       (1'b0),                                          // (terminated),                                       
		.av_waitrequest         (1'b0),                                          // (terminated),                                       
		.av_writebyteenable     (),                                              // (terminated),                                       
		.av_lock                (),                                              // (terminated),                                       
		.av_clken               (),                                              // (terminated),                                       
		.uav_clken              (1'b0),                                          // (terminated),                                       
		.av_debugaccess         (),                                              // (terminated),                                       
		.av_outputenable        (),                                              // (terminated),                                       
		.uav_response           (),                                              // (terminated),                                       
		.av_response            (2'b00),                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                           // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_hpd_req_pio_s1_translator (
		.clk                    (cpu_clk_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (tx_hpd_req_pio_s1_agent_m0_address),            //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (tx_hpd_req_pio_s1_agent_m0_burstcount),         //   input,   width = 3,                         .burstcount
		.uav_read               (tx_hpd_req_pio_s1_agent_m0_read),               //   input,   width = 1,                         .read
		.uav_write              (tx_hpd_req_pio_s1_agent_m0_write),              //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_hpd_req_pio_s1_agent_m0_waitrequest),        //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_hpd_req_pio_s1_agent_m0_readdatavalid),      //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_hpd_req_pio_s1_agent_m0_byteenable),         //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_hpd_req_pio_s1_agent_m0_readdata),           //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_hpd_req_pio_s1_agent_m0_writedata),          //   input,  width = 32,                         .writedata
		.uav_lock               (tx_hpd_req_pio_s1_agent_m0_lock),               //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_hpd_req_pio_s1_agent_m0_debugaccess),        //   input,   width = 1,                         .debugaccess
		.av_address             (tx_hpd_req_pio_s1_address),                     //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (tx_hpd_req_pio_s1_write),                       //  output,   width = 1,                         .write
		.av_readdata            (tx_hpd_req_pio_s1_readdata),                    //   input,  width = 32,                         .readdata
		.av_writedata           (tx_hpd_req_pio_s1_writedata),                   //  output,  width = 32,                         .writedata
		.av_chipselect          (tx_hpd_req_pio_s1_chipselect),                  //  output,   width = 1,                         .chipselect
		.av_read                (),                                              // (terminated),                                       
		.av_begintransfer       (),                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                              // (terminated),                                       
		.av_burstcount          (),                                              // (terminated),                                       
		.av_byteenable          (),                                              // (terminated),                                       
		.av_readdatavalid       (1'b0),                                          // (terminated),                                       
		.av_waitrequest         (1'b0),                                          // (terminated),                                       
		.av_writebyteenable     (),                                              // (terminated),                                       
		.av_lock                (),                                              // (terminated),                                       
		.av_clken               (),                                              // (terminated),                                       
		.uav_clken              (1'b0),                                          // (terminated),                                       
		.av_debugaccess         (),                                              // (terminated),                                       
		.av_outputenable        (),                                              // (terminated),                                       
		.uav_response           (),                                              // (terminated),                                       
		.av_response            (2'b00),                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                           // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) tx_hpd_ack_pio_s1_translator (
		.clk                    (cpu_clk_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (tx_hpd_ack_pio_s1_agent_m0_address),            //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (tx_hpd_ack_pio_s1_agent_m0_burstcount),         //   input,   width = 3,                         .burstcount
		.uav_read               (tx_hpd_ack_pio_s1_agent_m0_read),               //   input,   width = 1,                         .read
		.uav_write              (tx_hpd_ack_pio_s1_agent_m0_write),              //   input,   width = 1,                         .write
		.uav_waitrequest        (tx_hpd_ack_pio_s1_agent_m0_waitrequest),        //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (tx_hpd_ack_pio_s1_agent_m0_readdatavalid),      //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (tx_hpd_ack_pio_s1_agent_m0_byteenable),         //   input,   width = 4,                         .byteenable
		.uav_readdata           (tx_hpd_ack_pio_s1_agent_m0_readdata),           //  output,  width = 32,                         .readdata
		.uav_writedata          (tx_hpd_ack_pio_s1_agent_m0_writedata),          //   input,  width = 32,                         .writedata
		.uav_lock               (tx_hpd_ack_pio_s1_agent_m0_lock),               //   input,   width = 1,                         .lock
		.uav_debugaccess        (tx_hpd_ack_pio_s1_agent_m0_debugaccess),        //   input,   width = 1,                         .debugaccess
		.av_address             (tx_hpd_ack_pio_s1_address),                     //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (tx_hpd_ack_pio_s1_write),                       //  output,   width = 1,                         .write
		.av_readdata            (tx_hpd_ack_pio_s1_readdata),                    //   input,  width = 32,                         .readdata
		.av_writedata           (tx_hpd_ack_pio_s1_writedata),                   //  output,  width = 32,                         .writedata
		.av_chipselect          (tx_hpd_ack_pio_s1_chipselect),                  //  output,   width = 1,                         .chipselect
		.av_read                (),                                              // (terminated),                                       
		.av_begintransfer       (),                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                              // (terminated),                                       
		.av_burstcount          (),                                              // (terminated),                                       
		.av_byteenable          (),                                              // (terminated),                                       
		.av_readdatavalid       (1'b0),                                          // (terminated),                                       
		.av_waitrequest         (1'b0),                                          // (terminated),                                       
		.av_writebyteenable     (),                                              // (terminated),                                       
		.av_lock                (),                                              // (terminated),                                       
		.av_clken               (),                                              // (terminated),                                       
		.uav_clken              (1'b0),                                          // (terminated),                                       
		.av_debugaccess         (),                                              // (terminated),                                       
		.av_outputenable        (),                                              // (terminated),                                       
		.uav_response           (),                                              // (terminated),                                       
		.av_response            (2'b00),                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                           // (terminated),                                       
	);

	nios_altera_merlin_slave_translator_181_5aswt6a #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) color_depth_pio_s1_translator (
		.clk                    (cpu_clk_clk_clk),                               //   input,   width = 1,                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (color_depth_pio_s1_agent_m0_address),           //   input,  width = 19, avalon_universal_slave_0.address
		.uav_burstcount         (color_depth_pio_s1_agent_m0_burstcount),        //   input,   width = 3,                         .burstcount
		.uav_read               (color_depth_pio_s1_agent_m0_read),              //   input,   width = 1,                         .read
		.uav_write              (color_depth_pio_s1_agent_m0_write),             //   input,   width = 1,                         .write
		.uav_waitrequest        (color_depth_pio_s1_agent_m0_waitrequest),       //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (color_depth_pio_s1_agent_m0_readdatavalid),     //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (color_depth_pio_s1_agent_m0_byteenable),        //   input,   width = 4,                         .byteenable
		.uav_readdata           (color_depth_pio_s1_agent_m0_readdata),          //  output,  width = 32,                         .readdata
		.uav_writedata          (color_depth_pio_s1_agent_m0_writedata),         //   input,  width = 32,                         .writedata
		.uav_lock               (color_depth_pio_s1_agent_m0_lock),              //   input,   width = 1,                         .lock
		.uav_debugaccess        (color_depth_pio_s1_agent_m0_debugaccess),       //   input,   width = 1,                         .debugaccess
		.av_address             (color_depth_pio_s1_address),                    //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (color_depth_pio_s1_write),                      //  output,   width = 1,                         .write
		.av_readdata            (color_depth_pio_s1_readdata),                   //   input,  width = 32,                         .readdata
		.av_writedata           (color_depth_pio_s1_writedata),                  //  output,  width = 32,                         .writedata
		.av_chipselect          (color_depth_pio_s1_chipselect),                 //  output,   width = 1,                         .chipselect
		.av_read                (),                                              // (terminated),                                       
		.av_begintransfer       (),                                              // (terminated),                                       
		.av_beginbursttransfer  (),                                              // (terminated),                                       
		.av_burstcount          (),                                              // (terminated),                                       
		.av_byteenable          (),                                              // (terminated),                                       
		.av_readdatavalid       (1'b0),                                          // (terminated),                                       
		.av_waitrequest         (1'b0),                                          // (terminated),                                       
		.av_writebyteenable     (),                                              // (terminated),                                       
		.av_lock                (),                                              // (terminated),                                       
		.av_clken               (),                                              // (terminated),                                       
		.uav_clken              (1'b0),                                          // (terminated),                                       
		.av_debugaccess         (),                                              // (terminated),                                       
		.av_outputenable        (),                                              // (terminated),                                       
		.uav_response           (),                                              // (terminated),                                       
		.av_response            (2'b00),                                         // (terminated),                                       
		.uav_writeresponsevalid (),                                              // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                           // (terminated),                                       
	);

	nios_altera_merlin_master_agent_181_t5eyqrq #(
		.PKT_WUNIQUE               (107),
		.PKT_DOMAIN_H              (106),
		.PKT_DOMAIN_L              (105),
		.PKT_SNOOP_H               (104),
		.PKT_SNOOP_L               (101),
		.PKT_BARRIER_H             (100),
		.PKT_BARRIER_L             (99),
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_QOS_H                 (75),
		.PKT_QOS_L                 (75),
		.PKT_DATA_SIDEBAND_H       (73),
		.PKT_DATA_SIDEBAND_L       (73),
		.PKT_ADDR_SIDEBAND_H       (72),
		.PKT_ADDR_SIDEBAND_L       (72),
		.PKT_BURST_TYPE_H          (71),
		.PKT_BURST_TYPE_L          (70),
		.PKT_CACHE_H               (93),
		.PKT_CACHE_L               (90),
		.PKT_THREAD_ID_H           (86),
		.PKT_THREAD_ID_L           (86),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (27),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) cpu_data_master_agent (
		.clk                   (cpu_clk_clk_clk),                                                    //   input,    width = 1,       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                              //   input,    width = 1, clk_reset.reset
		.av_address            (cpu_data_master_translator_avalon_universal_master_0_address),       //   input,   width = 19,        av.address
		.av_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (cpu_data_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (cpu_data_master_agent_cp_data),                                      //  output,  width = 108,          .data
		.cp_startofpacket      (cpu_data_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (cpu_data_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (cpu_data_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                  //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                   //   input,  width = 108,          .data
		.rp_channel            (rsp_mux_src_channel),                                                //   input,   width = 27,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                          //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                            //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                  //  output,    width = 1,          .ready
		.av_response           (),                                                                   // (terminated),                         
		.av_writeresponsevalid ()                                                                    // (terminated),                         
	);

	nios_altera_merlin_master_agent_181_t5eyqrq #(
		.PKT_WUNIQUE               (107),
		.PKT_DOMAIN_H              (106),
		.PKT_DOMAIN_L              (105),
		.PKT_SNOOP_H               (104),
		.PKT_SNOOP_L               (101),
		.PKT_BARRIER_H             (100),
		.PKT_BARRIER_L             (99),
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_QOS_H                 (75),
		.PKT_QOS_L                 (75),
		.PKT_DATA_SIDEBAND_H       (73),
		.PKT_DATA_SIDEBAND_L       (73),
		.PKT_ADDR_SIDEBAND_H       (72),
		.PKT_ADDR_SIDEBAND_L       (72),
		.PKT_BURST_TYPE_H          (71),
		.PKT_BURST_TYPE_L          (70),
		.PKT_CACHE_H               (93),
		.PKT_CACHE_L               (90),
		.PKT_THREAD_ID_H           (86),
		.PKT_THREAD_ID_L           (86),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (27),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) cpu_instruction_master_agent (
		.clk                   (cpu_clk_clk_clk),                                                           //   input,    width = 1,       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                                     //   input,    width = 1, clk_reset.reset
		.av_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       //   input,   width = 19,        av.address
		.av_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (cpu_instruction_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (cpu_instruction_master_agent_cp_data),                                      //  output,  width = 108,          .data
		.cp_startofpacket      (cpu_instruction_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (cpu_instruction_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (cpu_instruction_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                     //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                      //   input,  width = 108,          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                   //   input,   width = 27,          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                     //  output,    width = 1,          .ready
		.av_response           (),                                                                          // (terminated),                         
		.av_writeresponsevalid ()                                                                           // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (cpu_clk_clk_clk),                                                //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1,       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                              //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                              //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                                               //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                      //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                        //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                            //   input,   width = 27,                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                          // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                           // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                            // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                                //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1, clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated),                         
		.csr_read          (1'b0),                                                           // (terminated),                         
		.csr_write         (1'b0),                                                           // (terminated),                         
		.csr_readdata      (),                                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                         
		.almost_full_data  (),                                                               // (terminated),                         
		.almost_empty_data (),                                                               // (terminated),                         
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_channel        (1'b0),                                                           // (terminated),                         
		.out_channel       ()                                                                // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent (
		.clk                     (cpu_clk_clk_clk),                                                                         //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                           //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                                                   //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                                                   //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_001_src_data),                                                                    //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                                           //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                                             //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                                                 //   input,   width = 27,                .channel
		.rf_sink_ready           (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                                   // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                                    // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                                     // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                                                         //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                           //   input,    width = 1, clk_reset.reset
		.in_data           (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                                    // (terminated),                         
		.csr_readdata      (),                                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                                    // (terminated),                         
		.almost_full_data  (),                                                                                        // (terminated),                         
		.almost_empty_data (),                                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                                    // (terminated),                         
		.out_empty         (),                                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                                    // (terminated),                         
		.out_error         (),                                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                                    // (terminated),                         
		.out_channel       ()                                                                                         // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent (
		.clk                     (cpu_clk_clk_clk),                                                                       //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                         //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                                                 //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                                                 //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_002_src_data),                                                                  //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                                         //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                                           //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                                               //   input,   width = 27,                .channel
		.rf_sink_ready           (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                                 // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                                  // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                                   // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                                                       //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                         //   input,    width = 1, clk_reset.reset
		.in_data           (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                                  // (terminated),                         
		.csr_readdata      (),                                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                                  // (terminated),                         
		.almost_full_data  (),                                                                                      // (terminated),                         
		.almost_empty_data (),                                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                                  // (terminated),                         
		.out_empty         (),                                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                                  // (terminated),                         
		.out_error         (),                                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                                  // (terminated),                         
		.out_channel       ()                                                                                       // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent (
		.clk                     (cpu_clk_clk_clk),                                                                       //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                         //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                                                 //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                                                 //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_003_src_data),                                                                  //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                                         //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                                           //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                                               //   input,   width = 27,                .channel
		.rf_sink_ready           (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                                 // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                                  // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                                   // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                                                       //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                         //   input,    width = 1, clk_reset.reset
		.in_data           (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                                 // (terminated),                         
		.csr_read          (1'b0),                                                                                  // (terminated),                         
		.csr_write         (1'b0),                                                                                  // (terminated),                         
		.csr_readdata      (),                                                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                                  // (terminated),                         
		.almost_full_data  (),                                                                                      // (terminated),                         
		.almost_empty_data (),                                                                                      // (terminated),                         
		.in_empty          (1'b0),                                                                                  // (terminated),                         
		.out_empty         (),                                                                                      // (terminated),                         
		.in_error          (1'b0),                                                                                  // (terminated),                         
		.out_error         (),                                                                                      // (terminated),                         
		.in_channel        (1'b0),                                                                                  // (terminated),                         
		.out_channel       ()                                                                                       // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (71),
		.PKT_ORI_BURST_SIZE_L      (69),
		.PKT_RESPONSE_STATUS_H     (68),
		.PKT_RESPONSE_STATUS_L     (67),
		.PKT_BURST_SIZE_H          (42),
		.PKT_BURST_SIZE_L          (40),
		.PKT_TRANS_LOCK            (32),
		.PKT_BEGIN_BURST           (47),
		.PKT_PROTECTION_H          (62),
		.PKT_PROTECTION_L          (60),
		.PKT_BURSTWRAP_H           (39),
		.PKT_BURSTWRAP_L           (37),
		.PKT_BYTE_CNT_H            (36),
		.PKT_BYTE_CNT_L            (34),
		.PKT_ADDR_H                (27),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (28),
		.PKT_TRANS_POSTED          (29),
		.PKT_TRANS_WRITE           (30),
		.PKT_TRANS_READ            (31),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (53),
		.PKT_SRC_ID_L              (49),
		.PKT_DEST_ID_H             (58),
		.PKT_DEST_ID_L             (54),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (81),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) edid_ram_slave_translator_avalon_universal_slave_0_agent (
		.clk                     (cpu_clk_clk_clk),                                                                        //   input,   width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                          //   input,   width = 1,       clk_reset.reset
		.m0_address              (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_address),                    //  output,  width = 19,              m0.address
		.m0_burstcount           (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),                 //  output,   width = 3,                .burstcount
		.m0_byteenable           (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),                 //  output,   width = 1,                .byteenable
		.m0_debugaccess          (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),                //  output,   width = 1,                .debugaccess
		.m0_lock                 (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_lock),                       //  output,   width = 1,                .lock
		.m0_readdata             (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_readdata),                   //   input,   width = 8,                .readdata
		.m0_readdatavalid        (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid),              //   input,   width = 1,                .readdatavalid
		.m0_read                 (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_read),                       //  output,   width = 1,                .read
		.m0_waitrequest          (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),                //   input,   width = 1,                .waitrequest
		.m0_writedata            (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_writedata),                  //  output,   width = 8,                .writedata
		.m0_write                (edid_ram_slave_translator_avalon_universal_slave_0_agent_m0_write),                      //  output,   width = 1,                .write
		.rp_endofpacket          (edid_ram_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),                //  output,   width = 1,              rp.endofpacket
		.rp_ready                (edid_ram_slave_translator_avalon_universal_slave_0_agent_rp_ready),                      //   input,   width = 1,                .ready
		.rp_valid                (edid_ram_slave_translator_avalon_universal_slave_0_agent_rp_valid),                      //  output,   width = 1,                .valid
		.rp_data                 (edid_ram_slave_translator_avalon_universal_slave_0_agent_rp_data),                       //  output,  width = 81,                .data
		.rp_startofpacket        (edid_ram_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket),              //  output,   width = 1,                .startofpacket
		.cp_ready                (edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter_src_ready),         //  output,   width = 1,              cp.ready
		.cp_valid                (edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter_src_valid),         //   input,   width = 1,                .valid
		.cp_data                 (edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter_src_data),          //   input,  width = 81,                .data
		.cp_startofpacket        (edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter_src_startofpacket), //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter_src_endofpacket),   //   input,   width = 1,                .endofpacket
		.cp_channel              (edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter_src_channel),       //   input,  width = 27,                .channel
		.rf_sink_ready           (edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),            //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),            //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket),    //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),      //   input,   width = 1,                .endofpacket
		.rf_sink_data            (edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),             //   input,  width = 82,                .data
		.rf_source_ready         (edid_ram_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),               //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (edid_ram_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),               //  output,   width = 1,                .valid
		.rf_source_startofpacket (edid_ram_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),       //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (edid_ram_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),         //  output,   width = 1,                .endofpacket
		.rf_source_data          (edid_ram_slave_translator_avalon_universal_slave_0_agent_rf_source_data),                //  output,  width = 82,                .data
		.rdata_fifo_sink_ready   (edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),          //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),          //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),           //   input,  width = 10,                .data
		.rdata_fifo_src_ready    (edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),          //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),          //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),           //  output,  width = 10,                .data
		.m0_response             (2'b00),                                                                                  // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                                                                   // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                                                                    // (terminated),                              
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (82),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                                                     //   input,   width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                       //   input,   width = 1, clk_reset.reset
		.in_data           (edid_ram_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 82,        in.data
		.in_valid          (edid_ram_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (edid_ram_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (edid_ram_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (edid_ram_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 82,       out.data
		.out_valid         (edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (edid_ram_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                               // (terminated),                        
		.csr_read          (1'b0),                                                                                // (terminated),                        
		.csr_write         (1'b0),                                                                                // (terminated),                        
		.csr_readdata      (),                                                                                    // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                                                // (terminated),                        
		.almost_full_data  (),                                                                                    // (terminated),                        
		.almost_empty_data (),                                                                                    // (terminated),                        
		.in_empty          (1'b0),                                                                                // (terminated),                        
		.out_empty         (),                                                                                    // (terminated),                        
		.in_error          (1'b0),                                                                                // (terminated),                        
		.out_error         (),                                                                                    // (terminated),                        
		.in_channel        (1'b0),                                                                                // (terminated),                        
		.out_channel       ()                                                                                     // (terminated),                        
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (128),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (cpu_clk_clk_clk),                                                               //   input,   width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                 //   input,   width = 1, clk_reset.reset
		.in_data           (edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //   input,  width = 10,        in.data
		.in_valid          (edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //  output,  width = 10,       out.data
		.out_valid         (edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (edid_ram_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                                         // (terminated),                        
		.csr_read          (1'b0),                                                                          // (terminated),                        
		.csr_write         (1'b0),                                                                          // (terminated),                        
		.csr_readdata      (),                                                                              // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated),                        
		.almost_full_data  (),                                                                              // (terminated),                        
		.almost_empty_data (),                                                                              // (terminated),                        
		.in_startofpacket  (1'b0),                                                                          // (terminated),                        
		.in_endofpacket    (1'b0),                                                                          // (terminated),                        
		.out_startofpacket (),                                                                              // (terminated),                        
		.out_endofpacket   (),                                                                              // (terminated),                        
		.in_empty          (1'b0),                                                                          // (terminated),                        
		.out_empty         (),                                                                              // (terminated),                        
		.in_error          (1'b0),                                                                          // (terminated),                        
		.out_error         (),                                                                              // (terminated),                        
		.in_channel        (1'b0),                                                                          // (terminated),                        
		.out_channel       ()                                                                               // (terminated),                        
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent (
		.clk                     (cpu_clk_clk_clk),                                                                             //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                               //   input,    width = 1,       clk_reset.reset
		.m0_address              (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                                                       //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                                                       //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_005_src_data),                                                                        //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                                               //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                                                 //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                                                     //   input,   width = 27,                .channel
		.rf_sink_ready           (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                                       // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                                        // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                                         // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                                                             //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                               //   input,    width = 1, clk_reset.reset
		.in_data           (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                                       // (terminated),                         
		.csr_read          (1'b0),                                                                                        // (terminated),                         
		.csr_write         (1'b0),                                                                                        // (terminated),                         
		.csr_readdata      (),                                                                                            // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                                        // (terminated),                         
		.almost_full_data  (),                                                                                            // (terminated),                         
		.almost_empty_data (),                                                                                            // (terminated),                         
		.in_empty          (1'b0),                                                                                        // (terminated),                         
		.out_empty         (),                                                                                            // (terminated),                         
		.in_error          (1'b0),                                                                                        // (terminated),                         
		.out_error         (),                                                                                            // (terminated),                         
		.in_channel        (1'b0),                                                                                        // (terminated),                         
		.out_channel       ()                                                                                             // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) oc_i2c_master_ti_avalon_universal_slave_0_agent (
		.clk                     (cpu_clk_clk_clk),                                                            //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                              //   input,    width = 1,       clk_reset.reset
		.m0_address              (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (oc_i2c_master_ti_avalon_universal_slave_0_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (oc_i2c_master_ti_avalon_universal_slave_0_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (oc_i2c_master_ti_avalon_universal_slave_0_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (oc_i2c_master_ti_avalon_universal_slave_0_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (oc_i2c_master_ti_avalon_universal_slave_0_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (oc_i2c_master_ti_avalon_universal_slave_0_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                                      //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                                      //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_006_src_data),                                                       //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                                              //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                                //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                                    //   input,   width = 27,                .channel
		.rf_sink_ready           (oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (oc_i2c_master_ti_avalon_universal_slave_0_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (oc_i2c_master_ti_avalon_universal_slave_0_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (oc_i2c_master_ti_avalon_universal_slave_0_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (oc_i2c_master_ti_avalon_universal_slave_0_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (oc_i2c_master_ti_avalon_universal_slave_0_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (oc_i2c_master_ti_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (oc_i2c_master_ti_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (oc_i2c_master_ti_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (oc_i2c_master_ti_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (oc_i2c_master_ti_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (oc_i2c_master_ti_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                                            //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                              //   input,    width = 1, clk_reset.reset
		.in_data           (oc_i2c_master_ti_avalon_universal_slave_0_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (oc_i2c_master_ti_avalon_universal_slave_0_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (oc_i2c_master_ti_avalon_universal_slave_0_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (oc_i2c_master_ti_avalon_universal_slave_0_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (oc_i2c_master_ti_avalon_universal_slave_0_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (oc_i2c_master_ti_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                      // (terminated),                         
		.csr_read          (1'b0),                                                                       // (terminated),                         
		.csr_write         (1'b0),                                                                       // (terminated),                         
		.csr_readdata      (),                                                                           // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated),                         
		.almost_full_data  (),                                                                           // (terminated),                         
		.almost_empty_data (),                                                                           // (terminated),                         
		.in_empty          (1'b0),                                                                       // (terminated),                         
		.out_empty         (),                                                                           // (terminated),                         
		.in_error          (1'b0),                                                                       // (terminated),                         
		.out_error         (),                                                                           // (terminated),                         
		.in_channel        (1'b0),                                                                       // (terminated),                         
		.out_channel       ()                                                                            // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) sysid_qsys_0_control_slave_agent (
		.clk                     (cpu_clk_clk_clk),                                             //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1,       clk_reset.reset
		.m0_address              (sysid_qsys_0_control_slave_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (sysid_qsys_0_control_slave_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (sysid_qsys_0_control_slave_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (sysid_qsys_0_control_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (sysid_qsys_0_control_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (sysid_qsys_0_control_slave_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (sysid_qsys_0_control_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (sysid_qsys_0_control_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (sysid_qsys_0_control_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (sysid_qsys_0_control_slave_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (sysid_qsys_0_control_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (sysid_qsys_0_control_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (sysid_qsys_0_control_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (sysid_qsys_0_control_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (sysid_qsys_0_control_slave_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (sysid_qsys_0_control_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                       //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                       //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_007_src_data),                                        //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                               //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                                 //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                     //   input,   width = 27,                .channel
		.rf_sink_ready           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (sysid_qsys_0_control_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (sysid_qsys_0_control_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (sysid_qsys_0_control_slave_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                       // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                        // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                         // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),               //   input,    width = 1, clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated),                         
		.csr_read          (1'b0),                                                        // (terminated),                         
		.csr_write         (1'b0),                                                        // (terminated),                         
		.csr_readdata      (),                                                            // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated),                         
		.almost_full_data  (),                                                            // (terminated),                         
		.almost_empty_data (),                                                            // (terminated),                         
		.in_empty          (1'b0),                                                        // (terminated),                         
		.out_empty         (),                                                            // (terminated),                         
		.in_error          (1'b0),                                                        // (terminated),                         
		.out_error         (),                                                            // (terminated),                         
		.in_channel        (1'b0),                                                        // (terminated),                         
		.out_channel       ()                                                             // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) cpu_debug_mem_slave_agent (
		.clk                     (cpu_clk_clk_clk),                                      //   input,    width = 1,             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                //   input,    width = 1,       clk_reset.reset
		.m0_address              (cpu_debug_mem_slave_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (cpu_debug_mem_slave_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (cpu_debug_mem_slave_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (cpu_debug_mem_slave_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (cpu_debug_mem_slave_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (cpu_debug_mem_slave_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (cpu_debug_mem_slave_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (cpu_debug_mem_slave_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (cpu_debug_mem_slave_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (cpu_debug_mem_slave_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (cpu_debug_mem_slave_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (cpu_debug_mem_slave_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (cpu_debug_mem_slave_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (cpu_debug_mem_slave_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (cpu_debug_mem_slave_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (cpu_debug_mem_slave_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_008_src_data),                                 //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                        //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                          //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                              //   input,   width = 27,                .channel
		.rf_sink_ready           (cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (cpu_debug_mem_slave_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (cpu_debug_mem_slave_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (cpu_debug_mem_slave_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (cpu_debug_mem_slave_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (cpu_debug_mem_slave_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (cpu_debug_mem_slave_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (cpu_debug_mem_slave_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (cpu_debug_mem_slave_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (cpu_debug_mem_slave_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_debug_mem_slave_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (cpu_debug_mem_slave_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                 // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                  // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_debug_mem_slave_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.in_data           (cpu_debug_mem_slave_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (cpu_debug_mem_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (cpu_debug_mem_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (cpu_debug_mem_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cpu_debug_mem_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                // (terminated),                         
		.csr_read          (1'b0),                                                 // (terminated),                         
		.csr_write         (1'b0),                                                 // (terminated),                         
		.csr_readdata      (),                                                     // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated),                         
		.almost_full_data  (),                                                     // (terminated),                         
		.almost_empty_data (),                                                     // (terminated),                         
		.in_empty          (1'b0),                                                 // (terminated),                         
		.out_empty         (),                                                     // (terminated),                         
		.in_error          (1'b0),                                                 // (terminated),                         
		.out_error         (),                                                     // (terminated),                         
		.in_channel        (1'b0),                                                 // (terminated),                         
		.out_channel       ()                                                      // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) cpu_ram_s1_agent (
		.clk                     (cpu_clk_clk_clk),                               //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (cpu_ram_s1_agent_m0_address),                   //  output,   width = 19,              m0.address
		.m0_burstcount           (cpu_ram_s1_agent_m0_burstcount),                //  output,    width = 3,                .burstcount
		.m0_byteenable           (cpu_ram_s1_agent_m0_byteenable),                //  output,    width = 4,                .byteenable
		.m0_debugaccess          (cpu_ram_s1_agent_m0_debugaccess),               //  output,    width = 1,                .debugaccess
		.m0_lock                 (cpu_ram_s1_agent_m0_lock),                      //  output,    width = 1,                .lock
		.m0_readdata             (cpu_ram_s1_agent_m0_readdata),                  //   input,   width = 32,                .readdata
		.m0_readdatavalid        (cpu_ram_s1_agent_m0_readdatavalid),             //   input,    width = 1,                .readdatavalid
		.m0_read                 (cpu_ram_s1_agent_m0_read),                      //  output,    width = 1,                .read
		.m0_waitrequest          (cpu_ram_s1_agent_m0_waitrequest),               //   input,    width = 1,                .waitrequest
		.m0_writedata            (cpu_ram_s1_agent_m0_writedata),                 //  output,   width = 32,                .writedata
		.m0_write                (cpu_ram_s1_agent_m0_write),                     //  output,    width = 1,                .write
		.rp_endofpacket          (cpu_ram_s1_agent_rp_endofpacket),               //  output,    width = 1,              rp.endofpacket
		.rp_ready                (cpu_ram_s1_agent_rp_ready),                     //   input,    width = 1,                .ready
		.rp_valid                (cpu_ram_s1_agent_rp_valid),                     //  output,    width = 1,                .valid
		.rp_data                 (cpu_ram_s1_agent_rp_data),                      //  output,  width = 108,                .data
		.rp_startofpacket        (cpu_ram_s1_agent_rp_startofpacket),             //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                         //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                         //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_009_src_data),                          //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                 //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                   //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                       //   input,   width = 27,                .channel
		.rf_sink_ready           (cpu_ram_s1_agent_rsp_fifo_out_ready),           //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (cpu_ram_s1_agent_rsp_fifo_out_valid),           //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (cpu_ram_s1_agent_rsp_fifo_out_startofpacket),   //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (cpu_ram_s1_agent_rsp_fifo_out_endofpacket),     //   input,    width = 1,                .endofpacket
		.rf_sink_data            (cpu_ram_s1_agent_rsp_fifo_out_data),            //   input,  width = 109,                .data
		.rf_source_ready         (cpu_ram_s1_agent_rf_source_ready),              //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (cpu_ram_s1_agent_rf_source_valid),              //  output,    width = 1,                .valid
		.rf_source_startofpacket (cpu_ram_s1_agent_rf_source_startofpacket),      //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (cpu_ram_s1_agent_rf_source_endofpacket),        //  output,    width = 1,                .endofpacket
		.rf_source_data          (cpu_ram_s1_agent_rf_source_data),               //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (cpu_ram_s1_agent_rdata_fifo_src_ready),         //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (cpu_ram_s1_agent_rdata_fifo_src_valid),         //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (cpu_ram_s1_agent_rdata_fifo_src_data),          //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (cpu_ram_s1_agent_rdata_fifo_src_ready),         //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_ram_s1_agent_rdata_fifo_src_valid),         //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (cpu_ram_s1_agent_rdata_fifo_src_data),          //  output,   width = 34,                .data
		.m0_response             (2'b00),                                         // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                          // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                           // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_ram_s1_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (cpu_ram_s1_agent_rf_source_data),               //   input,  width = 109,        in.data
		.in_valid          (cpu_ram_s1_agent_rf_source_valid),              //   input,    width = 1,          .valid
		.in_ready          (cpu_ram_s1_agent_rf_source_ready),              //  output,    width = 1,          .ready
		.in_startofpacket  (cpu_ram_s1_agent_rf_source_startofpacket),      //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cpu_ram_s1_agent_rf_source_endofpacket),        //   input,    width = 1,          .endofpacket
		.out_data          (cpu_ram_s1_agent_rsp_fifo_out_data),            //  output,  width = 109,       out.data
		.out_valid         (cpu_ram_s1_agent_rsp_fifo_out_valid),           //  output,    width = 1,          .valid
		.out_ready         (cpu_ram_s1_agent_rsp_fifo_out_ready),           //   input,    width = 1,          .ready
		.out_startofpacket (cpu_ram_s1_agent_rsp_fifo_out_startofpacket),   //  output,    width = 1,          .startofpacket
		.out_endofpacket   (cpu_ram_s1_agent_rsp_fifo_out_endofpacket),     //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                         // (terminated),                         
		.csr_read          (1'b0),                                          // (terminated),                         
		.csr_write         (1'b0),                                          // (terminated),                         
		.csr_readdata      (),                                              // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated),                         
		.almost_full_data  (),                                              // (terminated),                         
		.almost_empty_data (),                                              // (terminated),                         
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.in_error          (1'b0),                                          // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_channel        (1'b0),                                          // (terminated),                         
		.out_channel       ()                                               // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) edid_ram_access_pio_s1_agent (
		.clk                     (cpu_clk_clk_clk),                                         //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),           //   input,    width = 1,       clk_reset.reset
		.m0_address              (edid_ram_access_pio_s1_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (edid_ram_access_pio_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (edid_ram_access_pio_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (edid_ram_access_pio_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (edid_ram_access_pio_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (edid_ram_access_pio_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (edid_ram_access_pio_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (edid_ram_access_pio_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (edid_ram_access_pio_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (edid_ram_access_pio_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (edid_ram_access_pio_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (edid_ram_access_pio_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (edid_ram_access_pio_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (edid_ram_access_pio_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (edid_ram_access_pio_s1_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (edid_ram_access_pio_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                   //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                   //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_010_src_data),                                    //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                           //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                             //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                 //   input,   width = 27,                .channel
		.rf_sink_ready           (edid_ram_access_pio_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (edid_ram_access_pio_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (edid_ram_access_pio_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (edid_ram_access_pio_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (edid_ram_access_pio_s1_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (edid_ram_access_pio_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (edid_ram_access_pio_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (edid_ram_access_pio_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (edid_ram_access_pio_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (edid_ram_access_pio_s1_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (edid_ram_access_pio_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (edid_ram_access_pio_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (edid_ram_access_pio_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (edid_ram_access_pio_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (edid_ram_access_pio_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (edid_ram_access_pio_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                   // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                    // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                     // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) edid_ram_access_pio_s1_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),           //   input,    width = 1, clk_reset.reset
		.in_data           (edid_ram_access_pio_s1_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (edid_ram_access_pio_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (edid_ram_access_pio_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (edid_ram_access_pio_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (edid_ram_access_pio_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (edid_ram_access_pio_s1_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (edid_ram_access_pio_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (edid_ram_access_pio_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (edid_ram_access_pio_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (edid_ram_access_pio_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated),                         
		.csr_read          (1'b0),                                                    // (terminated),                         
		.csr_write         (1'b0),                                                    // (terminated),                         
		.csr_readdata      (),                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated),                         
		.almost_full_data  (),                                                        // (terminated),                         
		.almost_empty_data (),                                                        // (terminated),                         
		.in_empty          (1'b0),                                                    // (terminated),                         
		.out_empty         (),                                                        // (terminated),                         
		.in_error          (1'b0),                                                    // (terminated),                         
		.out_error         (),                                                        // (terminated),                         
		.in_channel        (1'b0),                                                    // (terminated),                         
		.out_channel       ()                                                         // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) measure_pio_s1_agent (
		.clk                     (cpu_clk_clk_clk),                                 //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),   //   input,    width = 1,       clk_reset.reset
		.m0_address              (measure_pio_s1_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (measure_pio_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (measure_pio_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (measure_pio_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (measure_pio_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (measure_pio_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (measure_pio_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (measure_pio_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (measure_pio_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (measure_pio_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (measure_pio_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (measure_pio_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (measure_pio_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (measure_pio_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (measure_pio_s1_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (measure_pio_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                           //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                           //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_011_src_data),                            //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                   //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                     //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                         //   input,   width = 27,                .channel
		.rf_sink_ready           (measure_pio_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (measure_pio_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (measure_pio_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (measure_pio_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (measure_pio_s1_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (measure_pio_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (measure_pio_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (measure_pio_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (measure_pio_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (measure_pio_s1_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (measure_pio_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (measure_pio_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (measure_pio_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (measure_pio_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (measure_pio_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (measure_pio_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                           // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                            // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                             // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) measure_pio_s1_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, clk_reset.reset
		.in_data           (measure_pio_s1_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (measure_pio_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (measure_pio_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (measure_pio_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (measure_pio_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (measure_pio_s1_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (measure_pio_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (measure_pio_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (measure_pio_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (measure_pio_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                           // (terminated),                         
		.csr_read          (1'b0),                                            // (terminated),                         
		.csr_write         (1'b0),                                            // (terminated),                         
		.csr_readdata      (),                                                // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated),                         
		.almost_full_data  (),                                                // (terminated),                         
		.almost_empty_data (),                                                // (terminated),                         
		.in_empty          (1'b0),                                            // (terminated),                         
		.out_empty         (),                                                // (terminated),                         
		.in_error          (1'b0),                                            // (terminated),                         
		.out_error         (),                                                // (terminated),                         
		.in_channel        (1'b0),                                            // (terminated),                         
		.out_channel       ()                                                 // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_os_pio_s1_agent (
		.clk                     (cpu_clk_clk_clk),                               //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_os_pio_s1_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (tx_os_pio_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (tx_os_pio_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_os_pio_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_os_pio_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (tx_os_pio_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_os_pio_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_os_pio_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (tx_os_pio_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_os_pio_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (tx_os_pio_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (tx_os_pio_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_os_pio_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (tx_os_pio_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (tx_os_pio_s1_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (tx_os_pio_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                         //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                         //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_012_src_data),                          //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                 //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                   //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                       //   input,   width = 27,                .channel
		.rf_sink_ready           (tx_os_pio_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_os_pio_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_os_pio_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_os_pio_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_os_pio_s1_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (tx_os_pio_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_os_pio_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_os_pio_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_os_pio_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_os_pio_s1_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (tx_os_pio_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_os_pio_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_os_pio_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_os_pio_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_os_pio_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_os_pio_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                         // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                          // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                           // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_os_pio_s1_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (tx_os_pio_s1_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (tx_os_pio_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_os_pio_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_os_pio_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_os_pio_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_os_pio_s1_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (tx_os_pio_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_os_pio_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_os_pio_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_os_pio_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                         // (terminated),                         
		.csr_read          (1'b0),                                          // (terminated),                         
		.csr_write         (1'b0),                                          // (terminated),                         
		.csr_readdata      (),                                              // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated),                         
		.almost_full_data  (),                                              // (terminated),                         
		.almost_empty_data (),                                              // (terminated),                         
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.in_error          (1'b0),                                          // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_channel        (1'b0),                                          // (terminated),                         
		.out_channel       ()                                               // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) measure_valid_pio_s1_agent (
		.clk                     (cpu_clk_clk_clk),                                       //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),         //   input,    width = 1,       clk_reset.reset
		.m0_address              (measure_valid_pio_s1_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (measure_valid_pio_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (measure_valid_pio_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (measure_valid_pio_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (measure_valid_pio_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (measure_valid_pio_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (measure_valid_pio_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (measure_valid_pio_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (measure_valid_pio_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (measure_valid_pio_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (measure_valid_pio_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (measure_valid_pio_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (measure_valid_pio_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (measure_valid_pio_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (measure_valid_pio_s1_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (measure_valid_pio_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                                 //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                                 //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_013_src_data),                                  //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                         //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                           //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                               //   input,   width = 27,                .channel
		.rf_sink_ready           (measure_valid_pio_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (measure_valid_pio_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (measure_valid_pio_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (measure_valid_pio_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (measure_valid_pio_s1_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (measure_valid_pio_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (measure_valid_pio_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (measure_valid_pio_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (measure_valid_pio_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (measure_valid_pio_s1_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (measure_valid_pio_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (measure_valid_pio_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (measure_valid_pio_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (measure_valid_pio_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (measure_valid_pio_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (measure_valid_pio_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                 // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                  // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                   // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) measure_valid_pio_s1_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),         //   input,    width = 1, clk_reset.reset
		.in_data           (measure_valid_pio_s1_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (measure_valid_pio_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (measure_valid_pio_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (measure_valid_pio_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (measure_valid_pio_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (measure_valid_pio_s1_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (measure_valid_pio_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (measure_valid_pio_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (measure_valid_pio_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (measure_valid_pio_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated),                         
		.csr_read          (1'b0),                                                  // (terminated),                         
		.csr_write         (1'b0),                                                  // (terminated),                         
		.csr_readdata      (),                                                      // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                         
		.almost_full_data  (),                                                      // (terminated),                         
		.almost_empty_data (),                                                      // (terminated),                         
		.in_empty          (1'b0),                                                  // (terminated),                         
		.out_empty         (),                                                      // (terminated),                         
		.in_error          (1'b0),                                                  // (terminated),                         
		.out_error         (),                                                      // (terminated),                         
		.in_channel        (1'b0),                                                  // (terminated),                         
		.out_channel       ()                                                       // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_rst_pll_pio_s1_agent (
		.clk                     (cpu_clk_clk_clk),                                    //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),      //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_rst_pll_pio_s1_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (tx_rst_pll_pio_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (tx_rst_pll_pio_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_rst_pll_pio_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_rst_pll_pio_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (tx_rst_pll_pio_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_rst_pll_pio_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_rst_pll_pio_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (tx_rst_pll_pio_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_rst_pll_pio_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (tx_rst_pll_pio_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (tx_rst_pll_pio_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_rst_pll_pio_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (tx_rst_pll_pio_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (tx_rst_pll_pio_s1_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (tx_rst_pll_pio_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                              //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                              //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_014_src_data),                               //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                      //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                        //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                            //   input,   width = 27,                .channel
		.rf_sink_ready           (tx_rst_pll_pio_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_rst_pll_pio_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_rst_pll_pio_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_rst_pll_pio_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_rst_pll_pio_s1_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (tx_rst_pll_pio_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_rst_pll_pio_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_rst_pll_pio_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_rst_pll_pio_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_rst_pll_pio_s1_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (tx_rst_pll_pio_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_rst_pll_pio_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_rst_pll_pio_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_rst_pll_pio_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_rst_pll_pio_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_rst_pll_pio_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                              // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                               // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_rst_pll_pio_s1_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.in_data           (tx_rst_pll_pio_s1_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (tx_rst_pll_pio_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_rst_pll_pio_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_rst_pll_pio_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_rst_pll_pio_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_rst_pll_pio_s1_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (tx_rst_pll_pio_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_rst_pll_pio_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_rst_pll_pio_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_rst_pll_pio_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                              // (terminated),                         
		.csr_read          (1'b0),                                               // (terminated),                         
		.csr_write         (1'b0),                                               // (terminated),                         
		.csr_readdata      (),                                                   // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                         
		.almost_full_data  (),                                                   // (terminated),                         
		.almost_empty_data (),                                                   // (terminated),                         
		.in_empty          (1'b0),                                               // (terminated),                         
		.out_empty         (),                                                   // (terminated),                         
		.in_error          (1'b0),                                               // (terminated),                         
		.out_error         (),                                                   // (terminated),                         
		.in_channel        (1'b0),                                               // (terminated),                         
		.out_channel       ()                                                    // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_rst_xcvr_pio_s1_agent (
		.clk                     (cpu_clk_clk_clk),                                     //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_rst_xcvr_pio_s1_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (tx_rst_xcvr_pio_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (tx_rst_xcvr_pio_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_rst_xcvr_pio_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_rst_xcvr_pio_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (tx_rst_xcvr_pio_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_rst_xcvr_pio_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_rst_xcvr_pio_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (tx_rst_xcvr_pio_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_rst_xcvr_pio_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (tx_rst_xcvr_pio_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (tx_rst_xcvr_pio_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_rst_xcvr_pio_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (tx_rst_xcvr_pio_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (tx_rst_xcvr_pio_s1_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (tx_rst_xcvr_pio_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                               //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                               //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_015_src_data),                                //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                       //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                         //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                             //   input,   width = 27,                .channel
		.rf_sink_ready           (tx_rst_xcvr_pio_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_rst_xcvr_pio_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_rst_xcvr_pio_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_rst_xcvr_pio_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_rst_xcvr_pio_s1_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (tx_rst_xcvr_pio_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_rst_xcvr_pio_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_rst_xcvr_pio_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_rst_xcvr_pio_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_rst_xcvr_pio_s1_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (tx_rst_xcvr_pio_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_rst_xcvr_pio_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_rst_xcvr_pio_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_rst_xcvr_pio_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_rst_xcvr_pio_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_rst_xcvr_pio_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                               // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                 // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_rst_xcvr_pio_s1_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.in_data           (tx_rst_xcvr_pio_s1_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (tx_rst_xcvr_pio_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_rst_xcvr_pio_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_rst_xcvr_pio_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_rst_xcvr_pio_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_rst_xcvr_pio_s1_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (tx_rst_xcvr_pio_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_rst_xcvr_pio_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_rst_xcvr_pio_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_rst_xcvr_pio_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                               // (terminated),                         
		.csr_read          (1'b0),                                                // (terminated),                         
		.csr_write         (1'b0),                                                // (terminated),                         
		.csr_readdata      (),                                                    // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated),                         
		.almost_full_data  (),                                                    // (terminated),                         
		.almost_empty_data (),                                                    // (terminated),                         
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.in_error          (1'b0),                                                // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_channel        (1'b0),                                                // (terminated),                         
		.out_channel       ()                                                     // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tmds_bit_clock_ratio_pio_s1_agent (
		.clk                     (cpu_clk_clk_clk),                                              //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1,       clk_reset.reset
		.m0_address              (tmds_bit_clock_ratio_pio_s1_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (tmds_bit_clock_ratio_pio_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (tmds_bit_clock_ratio_pio_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tmds_bit_clock_ratio_pio_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (tmds_bit_clock_ratio_pio_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (tmds_bit_clock_ratio_pio_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tmds_bit_clock_ratio_pio_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (tmds_bit_clock_ratio_pio_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (tmds_bit_clock_ratio_pio_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (tmds_bit_clock_ratio_pio_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (tmds_bit_clock_ratio_pio_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (tmds_bit_clock_ratio_pio_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tmds_bit_clock_ratio_pio_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (tmds_bit_clock_ratio_pio_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (tmds_bit_clock_ratio_pio_s1_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (tmds_bit_clock_ratio_pio_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                                        //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                                        //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_016_src_data),                                         //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                                //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                                  //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                                      //   input,   width = 27,                .channel
		.rf_sink_ready           (tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (tmds_bit_clock_ratio_pio_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tmds_bit_clock_ratio_pio_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (tmds_bit_clock_ratio_pio_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tmds_bit_clock_ratio_pio_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (tmds_bit_clock_ratio_pio_s1_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (tmds_bit_clock_ratio_pio_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tmds_bit_clock_ratio_pio_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tmds_bit_clock_ratio_pio_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tmds_bit_clock_ratio_pio_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tmds_bit_clock_ratio_pio_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tmds_bit_clock_ratio_pio_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                        // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                         // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                          // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.in_data           (tmds_bit_clock_ratio_pio_s1_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (tmds_bit_clock_ratio_pio_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tmds_bit_clock_ratio_pio_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tmds_bit_clock_ratio_pio_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tmds_bit_clock_ratio_pio_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tmds_bit_clock_ratio_pio_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated),                         
		.csr_read          (1'b0),                                                         // (terminated),                         
		.csr_write         (1'b0),                                                         // (terminated),                         
		.csr_readdata      (),                                                             // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated),                         
		.almost_full_data  (),                                                             // (terminated),                         
		.almost_empty_data (),                                                             // (terminated),                         
		.in_empty          (1'b0),                                                         // (terminated),                         
		.out_empty         (),                                                             // (terminated),                         
		.in_error          (1'b0),                                                         // (terminated),                         
		.out_error         (),                                                             // (terminated),                         
		.in_channel        (1'b0),                                                         // (terminated),                         
		.out_channel       ()                                                              // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_iopll_waitrequest_pio_s1_agent (
		.clk                     (cpu_clk_clk_clk),                                              //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_iopll_waitrequest_pio_s1_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (tx_iopll_waitrequest_pio_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (tx_iopll_waitrequest_pio_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_iopll_waitrequest_pio_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_iopll_waitrequest_pio_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (tx_iopll_waitrequest_pio_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_iopll_waitrequest_pio_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_iopll_waitrequest_pio_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (tx_iopll_waitrequest_pio_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_iopll_waitrequest_pio_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (tx_iopll_waitrequest_pio_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (tx_iopll_waitrequest_pio_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_iopll_waitrequest_pio_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (tx_iopll_waitrequest_pio_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (tx_iopll_waitrequest_pio_s1_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (tx_iopll_waitrequest_pio_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                                        //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                                        //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_017_src_data),                                         //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                                //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                                  //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                                      //   input,   width = 27,                .channel
		.rf_sink_ready           (tx_iopll_waitrequest_pio_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_iopll_waitrequest_pio_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_iopll_waitrequest_pio_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_iopll_waitrequest_pio_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_iopll_waitrequest_pio_s1_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (tx_iopll_waitrequest_pio_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_iopll_waitrequest_pio_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_iopll_waitrequest_pio_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_iopll_waitrequest_pio_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_iopll_waitrequest_pio_s1_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (tx_iopll_waitrequest_pio_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_iopll_waitrequest_pio_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_iopll_waitrequest_pio_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_iopll_waitrequest_pio_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_iopll_waitrequest_pio_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_iopll_waitrequest_pio_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                        // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                         // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                          // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_iopll_waitrequest_pio_s1_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                //   input,    width = 1, clk_reset.reset
		.in_data           (tx_iopll_waitrequest_pio_s1_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (tx_iopll_waitrequest_pio_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_iopll_waitrequest_pio_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_iopll_waitrequest_pio_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_iopll_waitrequest_pio_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_iopll_waitrequest_pio_s1_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (tx_iopll_waitrequest_pio_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_iopll_waitrequest_pio_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_iopll_waitrequest_pio_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_iopll_waitrequest_pio_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated),                         
		.csr_read          (1'b0),                                                         // (terminated),                         
		.csr_write         (1'b0),                                                         // (terminated),                         
		.csr_readdata      (),                                                             // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated),                         
		.almost_full_data  (),                                                             // (terminated),                         
		.almost_empty_data (),                                                             // (terminated),                         
		.in_empty          (1'b0),                                                         // (terminated),                         
		.out_empty         (),                                                             // (terminated),                         
		.in_error          (1'b0),                                                         // (terminated),                         
		.out_error         (),                                                             // (terminated),                         
		.in_channel        (1'b0),                                                         // (terminated),                         
		.out_channel       ()                                                              // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_pll_waitrequest_pio_s1_agent (
		.clk                     (cpu_clk_clk_clk),                                            //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),              //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_pll_waitrequest_pio_s1_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (tx_pll_waitrequest_pio_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (tx_pll_waitrequest_pio_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_pll_waitrequest_pio_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_pll_waitrequest_pio_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (tx_pll_waitrequest_pio_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_pll_waitrequest_pio_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_pll_waitrequest_pio_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (tx_pll_waitrequest_pio_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_pll_waitrequest_pio_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (tx_pll_waitrequest_pio_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (tx_pll_waitrequest_pio_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_pll_waitrequest_pio_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (tx_pll_waitrequest_pio_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (tx_pll_waitrequest_pio_s1_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (tx_pll_waitrequest_pio_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                                      //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                                      //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_018_src_data),                                       //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                              //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                                //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                                    //   input,   width = 27,                .channel
		.rf_sink_ready           (tx_pll_waitrequest_pio_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_pll_waitrequest_pio_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_pll_waitrequest_pio_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_pll_waitrequest_pio_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_pll_waitrequest_pio_s1_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (tx_pll_waitrequest_pio_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_pll_waitrequest_pio_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_pll_waitrequest_pio_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_pll_waitrequest_pio_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_pll_waitrequest_pio_s1_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (tx_pll_waitrequest_pio_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_pll_waitrequest_pio_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_pll_waitrequest_pio_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_pll_waitrequest_pio_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_pll_waitrequest_pio_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_pll_waitrequest_pio_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                        // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_pll_waitrequest_pio_s1_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, clk_reset.reset
		.in_data           (tx_pll_waitrequest_pio_s1_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (tx_pll_waitrequest_pio_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_pll_waitrequest_pio_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_pll_waitrequest_pio_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_pll_waitrequest_pio_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_pll_waitrequest_pio_s1_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (tx_pll_waitrequest_pio_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_pll_waitrequest_pio_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_pll_waitrequest_pio_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_pll_waitrequest_pio_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated),                         
		.csr_read          (1'b0),                                                       // (terminated),                         
		.csr_write         (1'b0),                                                       // (terminated),                         
		.csr_readdata      (),                                                           // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated),                         
		.almost_full_data  (),                                                           // (terminated),                         
		.almost_empty_data (),                                                           // (terminated),                         
		.in_empty          (1'b0),                                                       // (terminated),                         
		.out_empty         (),                                                           // (terminated),                         
		.in_error          (1'b0),                                                       // (terminated),                         
		.out_error         (),                                                           // (terminated),                         
		.in_channel        (1'b0),                                                       // (terminated),                         
		.out_channel       ()                                                            // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_pma_ch_s1_agent (
		.clk                     (cpu_clk_clk_clk),                               //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_pma_ch_s1_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (tx_pma_ch_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (tx_pma_ch_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_pma_ch_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_pma_ch_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (tx_pma_ch_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_pma_ch_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_pma_ch_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (tx_pma_ch_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_pma_ch_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (tx_pma_ch_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (tx_pma_ch_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_pma_ch_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (tx_pma_ch_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (tx_pma_ch_s1_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (tx_pma_ch_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                         //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                         //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_019_src_data),                          //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                 //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                   //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                       //   input,   width = 27,                .channel
		.rf_sink_ready           (tx_pma_ch_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_pma_ch_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_pma_ch_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_pma_ch_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_pma_ch_s1_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (tx_pma_ch_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_pma_ch_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_pma_ch_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_pma_ch_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_pma_ch_s1_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (tx_pma_ch_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_pma_ch_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_pma_ch_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_pma_ch_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_pma_ch_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_pma_ch_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                         // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                          // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                           // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_pma_ch_s1_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (tx_pma_ch_s1_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (tx_pma_ch_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_pma_ch_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_pma_ch_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_pma_ch_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_pma_ch_s1_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (tx_pma_ch_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_pma_ch_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_pma_ch_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_pma_ch_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                         // (terminated),                         
		.csr_read          (1'b0),                                          // (terminated),                         
		.csr_write         (1'b0),                                          // (terminated),                         
		.csr_readdata      (),                                              // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated),                         
		.almost_full_data  (),                                              // (terminated),                         
		.almost_empty_data (),                                              // (terminated),                         
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.in_error          (1'b0),                                          // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_channel        (1'b0),                                          // (terminated),                         
		.out_channel       ()                                               // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_pma_cal_busy_pio_s1_agent (
		.clk                     (cpu_clk_clk_clk),                                         //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),           //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_pma_cal_busy_pio_s1_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (tx_pma_cal_busy_pio_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (tx_pma_cal_busy_pio_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_pma_cal_busy_pio_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_pma_cal_busy_pio_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (tx_pma_cal_busy_pio_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_pma_cal_busy_pio_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_pma_cal_busy_pio_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (tx_pma_cal_busy_pio_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_pma_cal_busy_pio_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (tx_pma_cal_busy_pio_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (tx_pma_cal_busy_pio_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_pma_cal_busy_pio_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (tx_pma_cal_busy_pio_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (tx_pma_cal_busy_pio_s1_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (tx_pma_cal_busy_pio_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                                   //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                                   //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_020_src_data),                                    //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                           //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                             //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                                 //   input,   width = 27,                .channel
		.rf_sink_ready           (tx_pma_cal_busy_pio_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_pma_cal_busy_pio_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_pma_cal_busy_pio_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_pma_cal_busy_pio_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_pma_cal_busy_pio_s1_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (tx_pma_cal_busy_pio_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_pma_cal_busy_pio_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_pma_cal_busy_pio_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_pma_cal_busy_pio_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_pma_cal_busy_pio_s1_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (tx_pma_cal_busy_pio_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_pma_cal_busy_pio_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_pma_cal_busy_pio_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_pma_cal_busy_pio_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_pma_cal_busy_pio_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_pma_cal_busy_pio_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                   // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                    // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                     // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_pma_cal_busy_pio_s1_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),           //   input,    width = 1, clk_reset.reset
		.in_data           (tx_pma_cal_busy_pio_s1_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (tx_pma_cal_busy_pio_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_pma_cal_busy_pio_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_pma_cal_busy_pio_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_pma_cal_busy_pio_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_pma_cal_busy_pio_s1_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (tx_pma_cal_busy_pio_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_pma_cal_busy_pio_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_pma_cal_busy_pio_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_pma_cal_busy_pio_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated),                         
		.csr_read          (1'b0),                                                    // (terminated),                         
		.csr_write         (1'b0),                                                    // (terminated),                         
		.csr_readdata      (),                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated),                         
		.almost_full_data  (),                                                        // (terminated),                         
		.almost_empty_data (),                                                        // (terminated),                         
		.in_empty          (1'b0),                                                    // (terminated),                         
		.out_empty         (),                                                        // (terminated),                         
		.in_error          (1'b0),                                                    // (terminated),                         
		.out_error         (),                                                        // (terminated),                         
		.in_channel        (1'b0),                                                    // (terminated),                         
		.out_channel       ()                                                         // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_rcfg_en_pio_s1_agent (
		.clk                     (cpu_clk_clk_clk),                                    //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),      //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_rcfg_en_pio_s1_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (tx_rcfg_en_pio_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (tx_rcfg_en_pio_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_rcfg_en_pio_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_rcfg_en_pio_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (tx_rcfg_en_pio_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_rcfg_en_pio_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_rcfg_en_pio_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (tx_rcfg_en_pio_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_rcfg_en_pio_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (tx_rcfg_en_pio_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (tx_rcfg_en_pio_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_rcfg_en_pio_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (tx_rcfg_en_pio_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (tx_rcfg_en_pio_s1_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (tx_rcfg_en_pio_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                              //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                              //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_021_src_data),                               //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                      //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                        //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                            //   input,   width = 27,                .channel
		.rf_sink_ready           (tx_rcfg_en_pio_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_rcfg_en_pio_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_rcfg_en_pio_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_rcfg_en_pio_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_rcfg_en_pio_s1_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (tx_rcfg_en_pio_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_rcfg_en_pio_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_rcfg_en_pio_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_rcfg_en_pio_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_rcfg_en_pio_s1_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (tx_rcfg_en_pio_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_rcfg_en_pio_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_rcfg_en_pio_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_rcfg_en_pio_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_rcfg_en_pio_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_rcfg_en_pio_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                              // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                               // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_rcfg_en_pio_s1_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.in_data           (tx_rcfg_en_pio_s1_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (tx_rcfg_en_pio_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_rcfg_en_pio_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_rcfg_en_pio_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_rcfg_en_pio_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_rcfg_en_pio_s1_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (tx_rcfg_en_pio_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_rcfg_en_pio_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_rcfg_en_pio_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_rcfg_en_pio_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                              // (terminated),                         
		.csr_read          (1'b0),                                               // (terminated),                         
		.csr_write         (1'b0),                                               // (terminated),                         
		.csr_readdata      (),                                                   // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                         
		.almost_full_data  (),                                                   // (terminated),                         
		.almost_empty_data (),                                                   // (terminated),                         
		.in_empty          (1'b0),                                               // (terminated),                         
		.out_empty         (),                                                   // (terminated),                         
		.in_error          (1'b0),                                               // (terminated),                         
		.out_error         (),                                                   // (terminated),                         
		.in_channel        (1'b0),                                               // (terminated),                         
		.out_channel       ()                                                    // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_pma_waitrequest_pio_s1_agent (
		.clk                     (cpu_clk_clk_clk),                                            //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),              //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_pma_waitrequest_pio_s1_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (tx_pma_waitrequest_pio_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (tx_pma_waitrequest_pio_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_pma_waitrequest_pio_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_pma_waitrequest_pio_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (tx_pma_waitrequest_pio_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_pma_waitrequest_pio_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_pma_waitrequest_pio_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (tx_pma_waitrequest_pio_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_pma_waitrequest_pio_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (tx_pma_waitrequest_pio_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (tx_pma_waitrequest_pio_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_pma_waitrequest_pio_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (tx_pma_waitrequest_pio_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (tx_pma_waitrequest_pio_s1_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (tx_pma_waitrequest_pio_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_022_src_ready),                                      //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_022_src_valid),                                      //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_022_src_data),                                       //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_022_src_startofpacket),                              //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_022_src_endofpacket),                                //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_022_src_channel),                                    //   input,   width = 27,                .channel
		.rf_sink_ready           (tx_pma_waitrequest_pio_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_pma_waitrequest_pio_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_pma_waitrequest_pio_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_pma_waitrequest_pio_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_pma_waitrequest_pio_s1_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (tx_pma_waitrequest_pio_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_pma_waitrequest_pio_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_pma_waitrequest_pio_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_pma_waitrequest_pio_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_pma_waitrequest_pio_s1_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (tx_pma_waitrequest_pio_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_pma_waitrequest_pio_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_pma_waitrequest_pio_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_pma_waitrequest_pio_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_pma_waitrequest_pio_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_pma_waitrequest_pio_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                        // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_pma_waitrequest_pio_s1_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                            //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),              //   input,    width = 1, clk_reset.reset
		.in_data           (tx_pma_waitrequest_pio_s1_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (tx_pma_waitrequest_pio_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_pma_waitrequest_pio_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_pma_waitrequest_pio_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_pma_waitrequest_pio_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_pma_waitrequest_pio_s1_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (tx_pma_waitrequest_pio_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_pma_waitrequest_pio_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_pma_waitrequest_pio_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_pma_waitrequest_pio_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated),                         
		.csr_read          (1'b0),                                                       // (terminated),                         
		.csr_write         (1'b0),                                                       // (terminated),                         
		.csr_readdata      (),                                                           // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated),                         
		.almost_full_data  (),                                                           // (terminated),                         
		.almost_empty_data (),                                                           // (terminated),                         
		.in_empty          (1'b0),                                                       // (terminated),                         
		.out_empty         (),                                                           // (terminated),                         
		.in_error          (1'b0),                                                       // (terminated),                         
		.out_error         (),                                                           // (terminated),                         
		.in_channel        (1'b0),                                                       // (terminated),                         
		.out_channel       ()                                                            // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) wd_timer_s1_agent (
		.clk                     (cpu_clk_clk_clk),                               //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (wd_timer_s1_agent_m0_address),                  //  output,   width = 19,              m0.address
		.m0_burstcount           (wd_timer_s1_agent_m0_burstcount),               //  output,    width = 3,                .burstcount
		.m0_byteenable           (wd_timer_s1_agent_m0_byteenable),               //  output,    width = 4,                .byteenable
		.m0_debugaccess          (wd_timer_s1_agent_m0_debugaccess),              //  output,    width = 1,                .debugaccess
		.m0_lock                 (wd_timer_s1_agent_m0_lock),                     //  output,    width = 1,                .lock
		.m0_readdata             (wd_timer_s1_agent_m0_readdata),                 //   input,   width = 32,                .readdata
		.m0_readdatavalid        (wd_timer_s1_agent_m0_readdatavalid),            //   input,    width = 1,                .readdatavalid
		.m0_read                 (wd_timer_s1_agent_m0_read),                     //  output,    width = 1,                .read
		.m0_waitrequest          (wd_timer_s1_agent_m0_waitrequest),              //   input,    width = 1,                .waitrequest
		.m0_writedata            (wd_timer_s1_agent_m0_writedata),                //  output,   width = 32,                .writedata
		.m0_write                (wd_timer_s1_agent_m0_write),                    //  output,    width = 1,                .write
		.rp_endofpacket          (wd_timer_s1_agent_rp_endofpacket),              //  output,    width = 1,              rp.endofpacket
		.rp_ready                (wd_timer_s1_agent_rp_ready),                    //   input,    width = 1,                .ready
		.rp_valid                (wd_timer_s1_agent_rp_valid),                    //  output,    width = 1,                .valid
		.rp_data                 (wd_timer_s1_agent_rp_data),                     //  output,  width = 108,                .data
		.rp_startofpacket        (wd_timer_s1_agent_rp_startofpacket),            //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_023_src_ready),                         //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_023_src_valid),                         //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_023_src_data),                          //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_023_src_startofpacket),                 //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_023_src_endofpacket),                   //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_023_src_channel),                       //   input,   width = 27,                .channel
		.rf_sink_ready           (wd_timer_s1_agent_rsp_fifo_out_ready),          //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (wd_timer_s1_agent_rsp_fifo_out_valid),          //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (wd_timer_s1_agent_rsp_fifo_out_startofpacket),  //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (wd_timer_s1_agent_rsp_fifo_out_endofpacket),    //   input,    width = 1,                .endofpacket
		.rf_sink_data            (wd_timer_s1_agent_rsp_fifo_out_data),           //   input,  width = 109,                .data
		.rf_source_ready         (wd_timer_s1_agent_rf_source_ready),             //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (wd_timer_s1_agent_rf_source_valid),             //  output,    width = 1,                .valid
		.rf_source_startofpacket (wd_timer_s1_agent_rf_source_startofpacket),     //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (wd_timer_s1_agent_rf_source_endofpacket),       //  output,    width = 1,                .endofpacket
		.rf_source_data          (wd_timer_s1_agent_rf_source_data),              //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (wd_timer_s1_agent_rdata_fifo_src_ready),        //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (wd_timer_s1_agent_rdata_fifo_src_valid),        //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (wd_timer_s1_agent_rdata_fifo_src_data),         //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (wd_timer_s1_agent_rdata_fifo_src_ready),        //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (wd_timer_s1_agent_rdata_fifo_src_valid),        //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (wd_timer_s1_agent_rdata_fifo_src_data),         //  output,   width = 34,                .data
		.m0_response             (2'b00),                                         // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                          // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                           // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) wd_timer_s1_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (wd_timer_s1_agent_rf_source_data),              //   input,  width = 109,        in.data
		.in_valid          (wd_timer_s1_agent_rf_source_valid),             //   input,    width = 1,          .valid
		.in_ready          (wd_timer_s1_agent_rf_source_ready),             //  output,    width = 1,          .ready
		.in_startofpacket  (wd_timer_s1_agent_rf_source_startofpacket),     //   input,    width = 1,          .startofpacket
		.in_endofpacket    (wd_timer_s1_agent_rf_source_endofpacket),       //   input,    width = 1,          .endofpacket
		.out_data          (wd_timer_s1_agent_rsp_fifo_out_data),           //  output,  width = 109,       out.data
		.out_valid         (wd_timer_s1_agent_rsp_fifo_out_valid),          //  output,    width = 1,          .valid
		.out_ready         (wd_timer_s1_agent_rsp_fifo_out_ready),          //   input,    width = 1,          .ready
		.out_startofpacket (wd_timer_s1_agent_rsp_fifo_out_startofpacket),  //  output,    width = 1,          .startofpacket
		.out_endofpacket   (wd_timer_s1_agent_rsp_fifo_out_endofpacket),    //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                         // (terminated),                         
		.csr_read          (1'b0),                                          // (terminated),                         
		.csr_write         (1'b0),                                          // (terminated),                         
		.csr_readdata      (),                                              // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated),                         
		.almost_full_data  (),                                              // (terminated),                         
		.almost_empty_data (),                                              // (terminated),                         
		.in_empty          (1'b0),                                          // (terminated),                         
		.out_empty         (),                                              // (terminated),                         
		.in_error          (1'b0),                                          // (terminated),                         
		.out_error         (),                                              // (terminated),                         
		.in_channel        (1'b0),                                          // (terminated),                         
		.out_channel       ()                                               // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_hpd_req_pio_s1_agent (
		.clk                     (cpu_clk_clk_clk),                                    //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),      //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_hpd_req_pio_s1_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (tx_hpd_req_pio_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (tx_hpd_req_pio_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_hpd_req_pio_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_hpd_req_pio_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (tx_hpd_req_pio_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_hpd_req_pio_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_hpd_req_pio_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (tx_hpd_req_pio_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_hpd_req_pio_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (tx_hpd_req_pio_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (tx_hpd_req_pio_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_hpd_req_pio_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (tx_hpd_req_pio_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (tx_hpd_req_pio_s1_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (tx_hpd_req_pio_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_024_src_ready),                              //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_024_src_valid),                              //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_024_src_data),                               //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_024_src_startofpacket),                      //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_024_src_endofpacket),                        //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_024_src_channel),                            //   input,   width = 27,                .channel
		.rf_sink_ready           (tx_hpd_req_pio_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_hpd_req_pio_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_hpd_req_pio_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_hpd_req_pio_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_hpd_req_pio_s1_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (tx_hpd_req_pio_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_hpd_req_pio_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_hpd_req_pio_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_hpd_req_pio_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_hpd_req_pio_s1_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (tx_hpd_req_pio_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_hpd_req_pio_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_hpd_req_pio_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_hpd_req_pio_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_hpd_req_pio_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_hpd_req_pio_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                              // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                               // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_hpd_req_pio_s1_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.in_data           (tx_hpd_req_pio_s1_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (tx_hpd_req_pio_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_hpd_req_pio_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_hpd_req_pio_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_hpd_req_pio_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_hpd_req_pio_s1_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (tx_hpd_req_pio_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_hpd_req_pio_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_hpd_req_pio_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_hpd_req_pio_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                              // (terminated),                         
		.csr_read          (1'b0),                                               // (terminated),                         
		.csr_write         (1'b0),                                               // (terminated),                         
		.csr_readdata      (),                                                   // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                         
		.almost_full_data  (),                                                   // (terminated),                         
		.almost_empty_data (),                                                   // (terminated),                         
		.in_empty          (1'b0),                                               // (terminated),                         
		.out_empty         (),                                                   // (terminated),                         
		.in_error          (1'b0),                                               // (terminated),                         
		.out_error         (),                                                   // (terminated),                         
		.in_channel        (1'b0),                                               // (terminated),                         
		.out_channel       ()                                                    // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) tx_hpd_ack_pio_s1_agent (
		.clk                     (cpu_clk_clk_clk),                                    //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),      //   input,    width = 1,       clk_reset.reset
		.m0_address              (tx_hpd_ack_pio_s1_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (tx_hpd_ack_pio_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (tx_hpd_ack_pio_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (tx_hpd_ack_pio_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (tx_hpd_ack_pio_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (tx_hpd_ack_pio_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (tx_hpd_ack_pio_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (tx_hpd_ack_pio_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (tx_hpd_ack_pio_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (tx_hpd_ack_pio_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (tx_hpd_ack_pio_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (tx_hpd_ack_pio_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (tx_hpd_ack_pio_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (tx_hpd_ack_pio_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (tx_hpd_ack_pio_s1_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (tx_hpd_ack_pio_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_025_src_ready),                              //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_025_src_valid),                              //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_025_src_data),                               //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_025_src_startofpacket),                      //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_025_src_endofpacket),                        //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_025_src_channel),                            //   input,   width = 27,                .channel
		.rf_sink_ready           (tx_hpd_ack_pio_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (tx_hpd_ack_pio_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (tx_hpd_ack_pio_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (tx_hpd_ack_pio_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (tx_hpd_ack_pio_s1_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (tx_hpd_ack_pio_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (tx_hpd_ack_pio_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (tx_hpd_ack_pio_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (tx_hpd_ack_pio_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (tx_hpd_ack_pio_s1_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (tx_hpd_ack_pio_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_hpd_ack_pio_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (tx_hpd_ack_pio_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (tx_hpd_ack_pio_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_hpd_ack_pio_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (tx_hpd_ack_pio_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                              // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                               // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_hpd_ack_pio_s1_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.in_data           (tx_hpd_ack_pio_s1_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (tx_hpd_ack_pio_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (tx_hpd_ack_pio_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (tx_hpd_ack_pio_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (tx_hpd_ack_pio_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (tx_hpd_ack_pio_s1_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (tx_hpd_ack_pio_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (tx_hpd_ack_pio_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (tx_hpd_ack_pio_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (tx_hpd_ack_pio_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                              // (terminated),                         
		.csr_read          (1'b0),                                               // (terminated),                         
		.csr_write         (1'b0),                                               // (terminated),                         
		.csr_readdata      (),                                                   // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated),                         
		.almost_full_data  (),                                                   // (terminated),                         
		.almost_empty_data (),                                                   // (terminated),                         
		.in_empty          (1'b0),                                               // (terminated),                         
		.out_empty         (),                                                   // (terminated),                         
		.in_error          (1'b0),                                               // (terminated),                         
		.out_error         (),                                                   // (terminated),                         
		.in_channel        (1'b0),                                               // (terminated),                         
		.out_channel       ()                                                    // (terminated),                         
	);

	nios_altera_merlin_slave_agent_181_a7g37xa #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) color_depth_pio_s1_agent (
		.clk                     (cpu_clk_clk_clk),                                     //   input,    width = 1,             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1,       clk_reset.reset
		.m0_address              (color_depth_pio_s1_agent_m0_address),                 //  output,   width = 19,              m0.address
		.m0_burstcount           (color_depth_pio_s1_agent_m0_burstcount),              //  output,    width = 3,                .burstcount
		.m0_byteenable           (color_depth_pio_s1_agent_m0_byteenable),              //  output,    width = 4,                .byteenable
		.m0_debugaccess          (color_depth_pio_s1_agent_m0_debugaccess),             //  output,    width = 1,                .debugaccess
		.m0_lock                 (color_depth_pio_s1_agent_m0_lock),                    //  output,    width = 1,                .lock
		.m0_readdata             (color_depth_pio_s1_agent_m0_readdata),                //   input,   width = 32,                .readdata
		.m0_readdatavalid        (color_depth_pio_s1_agent_m0_readdatavalid),           //   input,    width = 1,                .readdatavalid
		.m0_read                 (color_depth_pio_s1_agent_m0_read),                    //  output,    width = 1,                .read
		.m0_waitrequest          (color_depth_pio_s1_agent_m0_waitrequest),             //   input,    width = 1,                .waitrequest
		.m0_writedata            (color_depth_pio_s1_agent_m0_writedata),               //  output,   width = 32,                .writedata
		.m0_write                (color_depth_pio_s1_agent_m0_write),                   //  output,    width = 1,                .write
		.rp_endofpacket          (color_depth_pio_s1_agent_rp_endofpacket),             //  output,    width = 1,              rp.endofpacket
		.rp_ready                (color_depth_pio_s1_agent_rp_ready),                   //   input,    width = 1,                .ready
		.rp_valid                (color_depth_pio_s1_agent_rp_valid),                   //  output,    width = 1,                .valid
		.rp_data                 (color_depth_pio_s1_agent_rp_data),                    //  output,  width = 108,                .data
		.rp_startofpacket        (color_depth_pio_s1_agent_rp_startofpacket),           //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_026_src_ready),                               //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_026_src_valid),                               //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_026_src_data),                                //   input,  width = 108,                .data
		.cp_startofpacket        (cmd_mux_026_src_startofpacket),                       //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_026_src_endofpacket),                         //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_026_src_channel),                             //   input,   width = 27,                .channel
		.rf_sink_ready           (color_depth_pio_s1_agent_rsp_fifo_out_ready),         //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (color_depth_pio_s1_agent_rsp_fifo_out_valid),         //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (color_depth_pio_s1_agent_rsp_fifo_out_startofpacket), //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (color_depth_pio_s1_agent_rsp_fifo_out_endofpacket),   //   input,    width = 1,                .endofpacket
		.rf_sink_data            (color_depth_pio_s1_agent_rsp_fifo_out_data),          //   input,  width = 109,                .data
		.rf_source_ready         (color_depth_pio_s1_agent_rf_source_ready),            //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (color_depth_pio_s1_agent_rf_source_valid),            //  output,    width = 1,                .valid
		.rf_source_startofpacket (color_depth_pio_s1_agent_rf_source_startofpacket),    //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (color_depth_pio_s1_agent_rf_source_endofpacket),      //  output,    width = 1,                .endofpacket
		.rf_source_data          (color_depth_pio_s1_agent_rf_source_data),             //  output,  width = 109,                .data
		.rdata_fifo_sink_ready   (color_depth_pio_s1_agent_rdata_fifo_src_ready),       //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (color_depth_pio_s1_agent_rdata_fifo_src_valid),       //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (color_depth_pio_s1_agent_rdata_fifo_src_data),        //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (color_depth_pio_s1_agent_rdata_fifo_src_ready),       //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (color_depth_pio_s1_agent_rdata_fifo_src_valid),       //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (color_depth_pio_s1_agent_rdata_fifo_src_data),        //  output,   width = 34,                .data
		.m0_response             (2'b00),                                               // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                 // (terminated),                               
	);

	nios_altera_avalon_sc_fifo_181_hseo73i #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) color_depth_pio_s1_agent_rsp_fifo (
		.clk               (cpu_clk_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, clk_reset.reset
		.in_data           (color_depth_pio_s1_agent_rf_source_data),             //   input,  width = 109,        in.data
		.in_valid          (color_depth_pio_s1_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (color_depth_pio_s1_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (color_depth_pio_s1_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (color_depth_pio_s1_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (color_depth_pio_s1_agent_rsp_fifo_out_data),          //  output,  width = 109,       out.data
		.out_valid         (color_depth_pio_s1_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (color_depth_pio_s1_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (color_depth_pio_s1_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (color_depth_pio_s1_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                               // (terminated),                         
		.csr_read          (1'b0),                                                // (terminated),                         
		.csr_write         (1'b0),                                                // (terminated),                         
		.csr_readdata      (),                                                    // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated),                         
		.almost_full_data  (),                                                    // (terminated),                         
		.almost_empty_data (),                                                    // (terminated),                         
		.in_empty          (1'b0),                                                // (terminated),                         
		.out_empty         (),                                                    // (terminated),                         
		.in_error          (1'b0),                                                // (terminated),                         
		.out_error         (),                                                    // (terminated),                         
		.in_channel        (1'b0),                                                // (terminated),                         
		.out_channel       ()                                                     // (terminated),                         
	);

	nios_altera_merlin_router_181_jkrkuea router (
		.sink_ready         (cpu_data_master_agent_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (cpu_data_master_agent_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (cpu_data_master_agent_cp_data),          //   input,  width = 108,          .data
		.sink_startofpacket (cpu_data_master_agent_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (cpu_data_master_agent_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                        //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                       //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                       //  output,    width = 1,          .valid
		.src_data           (router_src_data),                        //  output,  width = 108,          .data
		.src_channel        (router_src_channel),                     //  output,   width = 27,          .channel
		.src_startofpacket  (router_src_startofpacket),               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_3s257ey router_001 (
		.sink_ready         (cpu_instruction_master_agent_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (cpu_instruction_master_agent_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (cpu_instruction_master_agent_cp_data),          //   input,  width = 108,          .data
		.sink_startofpacket (cpu_instruction_master_agent_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (cpu_instruction_master_agent_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),         //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                           //  output,  width = 108,          .data
		.src_channel        (router_001_src_channel),                        //  output,   width = 27,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_002 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //   input,  width = 108,          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                 //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                 //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                  //  output,  width = 108,          .data
		.src_channel        (router_002_src_channel),                               //  output,   width = 27,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                         //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                            //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_003 (
		.sink_ready         (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 108,          .data
		.sink_startofpacket (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                                                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                 //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                                          //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                                          //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                                           //  output,  width = 108,          .data
		.src_channel        (router_003_src_channel),                                                        //  output,   width = 27,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                                     //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_004 (
		.sink_ready         (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 108,          .data
		.sink_startofpacket (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                                                             //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                                                        //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                                                        //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                                                         //  output,  width = 108,          .data
		.src_channel        (router_004_src_channel),                                                      //  output,   width = 27,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                                   //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_005 (
		.sink_ready         (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 108,          .data
		.sink_startofpacket (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                                                             //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                                                        //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                                                        //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                                                         //  output,  width = 108,          .data
		.src_channel        (router_005_src_channel),                                                      //  output,   width = 27,          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                                //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                                   //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_sqrsvri router_006 (
		.sink_ready         (edid_ram_slave_translator_avalon_universal_slave_0_agent_rp_ready),         //  output,   width = 1,      sink.ready
		.sink_valid         (edid_ram_slave_translator_avalon_universal_slave_0_agent_rp_valid),         //   input,   width = 1,          .valid
		.sink_data          (edid_ram_slave_translator_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 81,          .data
		.sink_startofpacket (edid_ram_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (edid_ram_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,   width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                                                           //   input,   width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                             //   input,   width = 1, clk_reset.reset
		.src_ready          (router_006_src_ready),                                                      //   input,   width = 1,       src.ready
		.src_valid          (router_006_src_valid),                                                      //  output,   width = 1,          .valid
		.src_data           (router_006_src_data),                                                       //  output,  width = 81,          .data
		.src_channel        (router_006_src_channel),                                                    //  output,  width = 27,          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                              //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                                 //  output,   width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_007 (
		.sink_ready         (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 108,          .data
		.sink_startofpacket (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (oc_i2c_master_av_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                                                                   //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                     //   input,    width = 1, clk_reset.reset
		.src_ready          (router_007_src_ready),                                                              //   input,    width = 1,       src.ready
		.src_valid          (router_007_src_valid),                                                              //  output,    width = 1,          .valid
		.src_data           (router_007_src_data),                                                               //  output,  width = 108,          .data
		.src_channel        (router_007_src_channel),                                                            //  output,   width = 27,          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                                      //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                                         //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_008 (
		.sink_ready         (oc_i2c_master_ti_avalon_universal_slave_0_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (oc_i2c_master_ti_avalon_universal_slave_0_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (oc_i2c_master_ti_avalon_universal_slave_0_agent_rp_data),          //   input,  width = 108,          .data
		.sink_startofpacket (oc_i2c_master_ti_avalon_universal_slave_0_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (oc_i2c_master_ti_avalon_universal_slave_0_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                                                  //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                    //   input,    width = 1, clk_reset.reset
		.src_ready          (router_008_src_ready),                                             //   input,    width = 1,       src.ready
		.src_valid          (router_008_src_valid),                                             //  output,    width = 1,          .valid
		.src_data           (router_008_src_data),                                              //  output,  width = 108,          .data
		.src_channel        (router_008_src_channel),                                           //  output,   width = 27,          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                        //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_009 (
		.sink_ready         (sysid_qsys_0_control_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (sysid_qsys_0_control_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (sysid_qsys_0_control_slave_agent_rp_data),          //   input,  width = 108,          .data
		.sink_startofpacket (sysid_qsys_0_control_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (sysid_qsys_0_control_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),     //   input,    width = 1, clk_reset.reset
		.src_ready          (router_009_src_ready),                              //   input,    width = 1,       src.ready
		.src_valid          (router_009_src_valid),                              //  output,    width = 1,          .valid
		.src_data           (router_009_src_data),                               //  output,  width = 108,          .data
		.src_channel        (router_009_src_channel),                            //  output,   width = 27,          .channel
		.src_startofpacket  (router_009_src_startofpacket),                      //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                         //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_lbagi5y router_010 (
		.sink_ready         (cpu_debug_mem_slave_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (cpu_debug_mem_slave_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (cpu_debug_mem_slave_agent_rp_data),          //   input,  width = 108,          .data
		.sink_startofpacket (cpu_debug_mem_slave_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (cpu_debug_mem_slave_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                            //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.src_ready          (router_010_src_ready),                       //   input,    width = 1,       src.ready
		.src_valid          (router_010_src_valid),                       //  output,    width = 1,          .valid
		.src_data           (router_010_src_data),                        //  output,  width = 108,          .data
		.src_channel        (router_010_src_channel),                     //  output,   width = 27,          .channel
		.src_startofpacket  (router_010_src_startofpacket),               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_lbagi5y router_011 (
		.sink_ready         (cpu_ram_s1_agent_rp_ready),                     //  output,    width = 1,      sink.ready
		.sink_valid         (cpu_ram_s1_agent_rp_valid),                     //   input,    width = 1,          .valid
		.sink_data          (cpu_ram_s1_agent_rp_data),                      //   input,  width = 108,          .data
		.sink_startofpacket (cpu_ram_s1_agent_rp_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (cpu_ram_s1_agent_rp_endofpacket),               //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_011_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_011_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_011_src_data),                           //  output,  width = 108,          .data
		.src_channel        (router_011_src_channel),                        //  output,   width = 27,          .channel
		.src_startofpacket  (router_011_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_012 (
		.sink_ready         (edid_ram_access_pio_s1_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (edid_ram_access_pio_s1_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (edid_ram_access_pio_s1_agent_rp_data),          //   input,  width = 108,          .data
		.sink_startofpacket (edid_ram_access_pio_s1_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (edid_ram_access_pio_s1_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_012_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_012_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_012_src_data),                           //  output,  width = 108,          .data
		.src_channel        (router_012_src_channel),                        //  output,   width = 27,          .channel
		.src_startofpacket  (router_012_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_013 (
		.sink_ready         (measure_pio_s1_agent_rp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (measure_pio_s1_agent_rp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (measure_pio_s1_agent_rp_data),                  //   input,  width = 108,          .data
		.sink_startofpacket (measure_pio_s1_agent_rp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (measure_pio_s1_agent_rp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_013_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_013_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_013_src_data),                           //  output,  width = 108,          .data
		.src_channel        (router_013_src_channel),                        //  output,   width = 27,          .channel
		.src_startofpacket  (router_013_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_014 (
		.sink_ready         (tx_os_pio_s1_agent_rp_ready),                   //  output,    width = 1,      sink.ready
		.sink_valid         (tx_os_pio_s1_agent_rp_valid),                   //   input,    width = 1,          .valid
		.sink_data          (tx_os_pio_s1_agent_rp_data),                    //   input,  width = 108,          .data
		.sink_startofpacket (tx_os_pio_s1_agent_rp_startofpacket),           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_os_pio_s1_agent_rp_endofpacket),             //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_014_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_014_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_014_src_data),                           //  output,  width = 108,          .data
		.src_channel        (router_014_src_channel),                        //  output,   width = 27,          .channel
		.src_startofpacket  (router_014_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_015 (
		.sink_ready         (measure_valid_pio_s1_agent_rp_ready),           //  output,    width = 1,      sink.ready
		.sink_valid         (measure_valid_pio_s1_agent_rp_valid),           //   input,    width = 1,          .valid
		.sink_data          (measure_valid_pio_s1_agent_rp_data),            //   input,  width = 108,          .data
		.sink_startofpacket (measure_valid_pio_s1_agent_rp_startofpacket),   //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (measure_valid_pio_s1_agent_rp_endofpacket),     //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_015_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_015_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_015_src_data),                           //  output,  width = 108,          .data
		.src_channel        (router_015_src_channel),                        //  output,   width = 27,          .channel
		.src_startofpacket  (router_015_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_016 (
		.sink_ready         (tx_rst_pll_pio_s1_agent_rp_ready),              //  output,    width = 1,      sink.ready
		.sink_valid         (tx_rst_pll_pio_s1_agent_rp_valid),              //   input,    width = 1,          .valid
		.sink_data          (tx_rst_pll_pio_s1_agent_rp_data),               //   input,  width = 108,          .data
		.sink_startofpacket (tx_rst_pll_pio_s1_agent_rp_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_rst_pll_pio_s1_agent_rp_endofpacket),        //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_016_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_016_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_016_src_data),                           //  output,  width = 108,          .data
		.src_channel        (router_016_src_channel),                        //  output,   width = 27,          .channel
		.src_startofpacket  (router_016_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_017 (
		.sink_ready         (tx_rst_xcvr_pio_s1_agent_rp_ready),             //  output,    width = 1,      sink.ready
		.sink_valid         (tx_rst_xcvr_pio_s1_agent_rp_valid),             //   input,    width = 1,          .valid
		.sink_data          (tx_rst_xcvr_pio_s1_agent_rp_data),              //   input,  width = 108,          .data
		.sink_startofpacket (tx_rst_xcvr_pio_s1_agent_rp_startofpacket),     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_rst_xcvr_pio_s1_agent_rp_endofpacket),       //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_017_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_017_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_017_src_data),                           //  output,  width = 108,          .data
		.src_channel        (router_017_src_channel),                        //  output,   width = 27,          .channel
		.src_startofpacket  (router_017_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_018 (
		.sink_ready         (tmds_bit_clock_ratio_pio_s1_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tmds_bit_clock_ratio_pio_s1_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tmds_bit_clock_ratio_pio_s1_agent_rp_data),          //   input,  width = 108,          .data
		.sink_startofpacket (tmds_bit_clock_ratio_pio_s1_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tmds_bit_clock_ratio_pio_s1_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.src_ready          (router_018_src_ready),                               //   input,    width = 1,       src.ready
		.src_valid          (router_018_src_valid),                               //  output,    width = 1,          .valid
		.src_data           (router_018_src_data),                                //  output,  width = 108,          .data
		.src_channel        (router_018_src_channel),                             //  output,   width = 27,          .channel
		.src_startofpacket  (router_018_src_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                          //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_019 (
		.sink_ready         (tx_iopll_waitrequest_pio_s1_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tx_iopll_waitrequest_pio_s1_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tx_iopll_waitrequest_pio_s1_agent_rp_data),          //   input,  width = 108,          .data
		.sink_startofpacket (tx_iopll_waitrequest_pio_s1_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_iopll_waitrequest_pio_s1_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                                    //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.src_ready          (router_019_src_ready),                               //   input,    width = 1,       src.ready
		.src_valid          (router_019_src_valid),                               //  output,    width = 1,          .valid
		.src_data           (router_019_src_data),                                //  output,  width = 108,          .data
		.src_channel        (router_019_src_channel),                             //  output,   width = 27,          .channel
		.src_startofpacket  (router_019_src_startofpacket),                       //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                          //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_020 (
		.sink_ready         (tx_pll_waitrequest_pio_s1_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tx_pll_waitrequest_pio_s1_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tx_pll_waitrequest_pio_s1_agent_rp_data),          //   input,  width = 108,          .data
		.sink_startofpacket (tx_pll_waitrequest_pio_s1_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_pll_waitrequest_pio_s1_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.src_ready          (router_020_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid          (router_020_src_valid),                             //  output,    width = 1,          .valid
		.src_data           (router_020_src_data),                              //  output,  width = 108,          .data
		.src_channel        (router_020_src_channel),                           //  output,   width = 27,          .channel
		.src_startofpacket  (router_020_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                        //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_021 (
		.sink_ready         (tx_pma_ch_s1_agent_rp_ready),                   //  output,    width = 1,      sink.ready
		.sink_valid         (tx_pma_ch_s1_agent_rp_valid),                   //   input,    width = 1,          .valid
		.sink_data          (tx_pma_ch_s1_agent_rp_data),                    //   input,  width = 108,          .data
		.sink_startofpacket (tx_pma_ch_s1_agent_rp_startofpacket),           //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_pma_ch_s1_agent_rp_endofpacket),             //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_021_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_021_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_021_src_data),                           //  output,  width = 108,          .data
		.src_channel        (router_021_src_channel),                        //  output,   width = 27,          .channel
		.src_startofpacket  (router_021_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_022 (
		.sink_ready         (tx_pma_cal_busy_pio_s1_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tx_pma_cal_busy_pio_s1_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tx_pma_cal_busy_pio_s1_agent_rp_data),          //   input,  width = 108,          .data
		.sink_startofpacket (tx_pma_cal_busy_pio_s1_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_pma_cal_busy_pio_s1_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_022_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_022_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_022_src_data),                           //  output,  width = 108,          .data
		.src_channel        (router_022_src_channel),                        //  output,   width = 27,          .channel
		.src_startofpacket  (router_022_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_023 (
		.sink_ready         (tx_rcfg_en_pio_s1_agent_rp_ready),              //  output,    width = 1,      sink.ready
		.sink_valid         (tx_rcfg_en_pio_s1_agent_rp_valid),              //   input,    width = 1,          .valid
		.sink_data          (tx_rcfg_en_pio_s1_agent_rp_data),               //   input,  width = 108,          .data
		.sink_startofpacket (tx_rcfg_en_pio_s1_agent_rp_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_rcfg_en_pio_s1_agent_rp_endofpacket),        //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_023_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_023_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_023_src_data),                           //  output,  width = 108,          .data
		.src_channel        (router_023_src_channel),                        //  output,   width = 27,          .channel
		.src_startofpacket  (router_023_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_024 (
		.sink_ready         (tx_pma_waitrequest_pio_s1_agent_rp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (tx_pma_waitrequest_pio_s1_agent_rp_valid),         //   input,    width = 1,          .valid
		.sink_data          (tx_pma_waitrequest_pio_s1_agent_rp_data),          //   input,  width = 108,          .data
		.sink_startofpacket (tx_pma_waitrequest_pio_s1_agent_rp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_pma_waitrequest_pio_s1_agent_rp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.src_ready          (router_024_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid          (router_024_src_valid),                             //  output,    width = 1,          .valid
		.src_data           (router_024_src_data),                              //  output,  width = 108,          .data
		.src_channel        (router_024_src_channel),                           //  output,   width = 27,          .channel
		.src_startofpacket  (router_024_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                        //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_025 (
		.sink_ready         (wd_timer_s1_agent_rp_ready),                    //  output,    width = 1,      sink.ready
		.sink_valid         (wd_timer_s1_agent_rp_valid),                    //   input,    width = 1,          .valid
		.sink_data          (wd_timer_s1_agent_rp_data),                     //   input,  width = 108,          .data
		.sink_startofpacket (wd_timer_s1_agent_rp_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (wd_timer_s1_agent_rp_endofpacket),              //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_025_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_025_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_025_src_data),                           //  output,  width = 108,          .data
		.src_channel        (router_025_src_channel),                        //  output,   width = 27,          .channel
		.src_startofpacket  (router_025_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_026 (
		.sink_ready         (tx_hpd_req_pio_s1_agent_rp_ready),              //  output,    width = 1,      sink.ready
		.sink_valid         (tx_hpd_req_pio_s1_agent_rp_valid),              //   input,    width = 1,          .valid
		.sink_data          (tx_hpd_req_pio_s1_agent_rp_data),               //   input,  width = 108,          .data
		.sink_startofpacket (tx_hpd_req_pio_s1_agent_rp_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_hpd_req_pio_s1_agent_rp_endofpacket),        //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_026_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_026_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_026_src_data),                           //  output,  width = 108,          .data
		.src_channel        (router_026_src_channel),                        //  output,   width = 27,          .channel
		.src_startofpacket  (router_026_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_027 (
		.sink_ready         (tx_hpd_ack_pio_s1_agent_rp_ready),              //  output,    width = 1,      sink.ready
		.sink_valid         (tx_hpd_ack_pio_s1_agent_rp_valid),              //   input,    width = 1,          .valid
		.sink_data          (tx_hpd_ack_pio_s1_agent_rp_data),               //   input,  width = 108,          .data
		.sink_startofpacket (tx_hpd_ack_pio_s1_agent_rp_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (tx_hpd_ack_pio_s1_agent_rp_endofpacket),        //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_027_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_027_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_027_src_data),                           //  output,  width = 108,          .data
		.src_channel        (router_027_src_channel),                        //  output,   width = 27,          .channel
		.src_startofpacket  (router_027_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_router_181_zo73dwa router_028 (
		.sink_ready         (color_depth_pio_s1_agent_rp_ready),             //  output,    width = 1,      sink.ready
		.sink_valid         (color_depth_pio_s1_agent_rp_valid),             //   input,    width = 1,          .valid
		.sink_data          (color_depth_pio_s1_agent_rp_data),              //   input,  width = 108,          .data
		.sink_startofpacket (color_depth_pio_s1_agent_rp_startofpacket),     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (color_depth_pio_s1_agent_rp_endofpacket),       //   input,    width = 1,          .endofpacket
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_028_src_ready),                          //   input,    width = 1,       src.ready
		.src_valid          (router_028_src_valid),                          //  output,    width = 1,          .valid
		.src_data           (router_028_src_data),                           //  output,  width = 108,          .data
		.src_channel        (router_028_src_channel),                        //  output,   width = 27,          .channel
		.src_startofpacket  (router_028_src_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_kal2y7a cmd_demux (
		.clk                 (cpu_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready          (router_src_ready),                      //  output,    width = 1,      sink.ready
		.sink_channel        (router_src_channel),                    //   input,   width = 27,          .channel
		.sink_data           (router_src_data),                       //   input,  width = 108,          .data
		.sink_startofpacket  (router_src_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                //   input,    width = 1,          .endofpacket
		.sink_valid          (router_src_valid),                      //   input,    width = 1,          .valid
		.src0_ready          (cmd_demux_src0_ready),                  //   input,    width = 1,      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                  //  output,    width = 1,          .valid
		.src0_data           (cmd_demux_src0_data),                   //  output,  width = 108,          .data
		.src0_channel        (cmd_demux_src0_channel),                //  output,   width = 27,          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),          //  output,    width = 1,          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),            //  output,    width = 1,          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                  //   input,    width = 1,      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                  //  output,    width = 1,          .valid
		.src1_data           (cmd_demux_src1_data),                   //  output,  width = 108,          .data
		.src1_channel        (cmd_demux_src1_channel),                //  output,   width = 27,          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),          //  output,    width = 1,          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),            //  output,    width = 1,          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                  //   input,    width = 1,      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                  //  output,    width = 1,          .valid
		.src2_data           (cmd_demux_src2_data),                   //  output,  width = 108,          .data
		.src2_channel        (cmd_demux_src2_channel),                //  output,   width = 27,          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),          //  output,    width = 1,          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),            //  output,    width = 1,          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                  //   input,    width = 1,      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                  //  output,    width = 1,          .valid
		.src3_data           (cmd_demux_src3_data),                   //  output,  width = 108,          .data
		.src3_channel        (cmd_demux_src3_channel),                //  output,   width = 27,          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),          //  output,    width = 1,          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),            //  output,    width = 1,          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                  //   input,    width = 1,      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                  //  output,    width = 1,          .valid
		.src4_data           (cmd_demux_src4_data),                   //  output,  width = 108,          .data
		.src4_channel        (cmd_demux_src4_channel),                //  output,   width = 27,          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),          //  output,    width = 1,          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),            //  output,    width = 1,          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                  //   input,    width = 1,      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                  //  output,    width = 1,          .valid
		.src5_data           (cmd_demux_src5_data),                   //  output,  width = 108,          .data
		.src5_channel        (cmd_demux_src5_channel),                //  output,   width = 27,          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),          //  output,    width = 1,          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),            //  output,    width = 1,          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                  //   input,    width = 1,      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                  //  output,    width = 1,          .valid
		.src6_data           (cmd_demux_src6_data),                   //  output,  width = 108,          .data
		.src6_channel        (cmd_demux_src6_channel),                //  output,   width = 27,          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),          //  output,    width = 1,          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),            //  output,    width = 1,          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                  //   input,    width = 1,      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                  //  output,    width = 1,          .valid
		.src7_data           (cmd_demux_src7_data),                   //  output,  width = 108,          .data
		.src7_channel        (cmd_demux_src7_channel),                //  output,   width = 27,          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),          //  output,    width = 1,          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),            //  output,    width = 1,          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                  //   input,    width = 1,      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                  //  output,    width = 1,          .valid
		.src8_data           (cmd_demux_src8_data),                   //  output,  width = 108,          .data
		.src8_channel        (cmd_demux_src8_channel),                //  output,   width = 27,          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),          //  output,    width = 1,          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),            //  output,    width = 1,          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                  //   input,    width = 1,      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                  //  output,    width = 1,          .valid
		.src9_data           (cmd_demux_src9_data),                   //  output,  width = 108,          .data
		.src9_channel        (cmd_demux_src9_channel),                //  output,   width = 27,          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),          //  output,    width = 1,          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),            //  output,    width = 1,          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                 //   input,    width = 1,     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                 //  output,    width = 1,          .valid
		.src10_data          (cmd_demux_src10_data),                  //  output,  width = 108,          .data
		.src10_channel       (cmd_demux_src10_channel),               //  output,   width = 27,          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),         //  output,    width = 1,          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),           //  output,    width = 1,          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                 //   input,    width = 1,     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                 //  output,    width = 1,          .valid
		.src11_data          (cmd_demux_src11_data),                  //  output,  width = 108,          .data
		.src11_channel       (cmd_demux_src11_channel),               //  output,   width = 27,          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),         //  output,    width = 1,          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),           //  output,    width = 1,          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                 //   input,    width = 1,     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                 //  output,    width = 1,          .valid
		.src12_data          (cmd_demux_src12_data),                  //  output,  width = 108,          .data
		.src12_channel       (cmd_demux_src12_channel),               //  output,   width = 27,          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),         //  output,    width = 1,          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),           //  output,    width = 1,          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                 //   input,    width = 1,     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                 //  output,    width = 1,          .valid
		.src13_data          (cmd_demux_src13_data),                  //  output,  width = 108,          .data
		.src13_channel       (cmd_demux_src13_channel),               //  output,   width = 27,          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),         //  output,    width = 1,          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),           //  output,    width = 1,          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                 //   input,    width = 1,     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                 //  output,    width = 1,          .valid
		.src14_data          (cmd_demux_src14_data),                  //  output,  width = 108,          .data
		.src14_channel       (cmd_demux_src14_channel),               //  output,   width = 27,          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),         //  output,    width = 1,          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),           //  output,    width = 1,          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                 //   input,    width = 1,     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                 //  output,    width = 1,          .valid
		.src15_data          (cmd_demux_src15_data),                  //  output,  width = 108,          .data
		.src15_channel       (cmd_demux_src15_channel),               //  output,   width = 27,          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),         //  output,    width = 1,          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),           //  output,    width = 1,          .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                 //   input,    width = 1,     src16.ready
		.src16_valid         (cmd_demux_src16_valid),                 //  output,    width = 1,          .valid
		.src16_data          (cmd_demux_src16_data),                  //  output,  width = 108,          .data
		.src16_channel       (cmd_demux_src16_channel),               //  output,   width = 27,          .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),         //  output,    width = 1,          .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),           //  output,    width = 1,          .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                 //   input,    width = 1,     src17.ready
		.src17_valid         (cmd_demux_src17_valid),                 //  output,    width = 1,          .valid
		.src17_data          (cmd_demux_src17_data),                  //  output,  width = 108,          .data
		.src17_channel       (cmd_demux_src17_channel),               //  output,   width = 27,          .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),         //  output,    width = 1,          .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),           //  output,    width = 1,          .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                 //   input,    width = 1,     src18.ready
		.src18_valid         (cmd_demux_src18_valid),                 //  output,    width = 1,          .valid
		.src18_data          (cmd_demux_src18_data),                  //  output,  width = 108,          .data
		.src18_channel       (cmd_demux_src18_channel),               //  output,   width = 27,          .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),         //  output,    width = 1,          .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),           //  output,    width = 1,          .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                 //   input,    width = 1,     src19.ready
		.src19_valid         (cmd_demux_src19_valid),                 //  output,    width = 1,          .valid
		.src19_data          (cmd_demux_src19_data),                  //  output,  width = 108,          .data
		.src19_channel       (cmd_demux_src19_channel),               //  output,   width = 27,          .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),         //  output,    width = 1,          .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),           //  output,    width = 1,          .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                 //   input,    width = 1,     src20.ready
		.src20_valid         (cmd_demux_src20_valid),                 //  output,    width = 1,          .valid
		.src20_data          (cmd_demux_src20_data),                  //  output,  width = 108,          .data
		.src20_channel       (cmd_demux_src20_channel),               //  output,   width = 27,          .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),         //  output,    width = 1,          .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket),           //  output,    width = 1,          .endofpacket
		.src21_ready         (cmd_demux_src21_ready),                 //   input,    width = 1,     src21.ready
		.src21_valid         (cmd_demux_src21_valid),                 //  output,    width = 1,          .valid
		.src21_data          (cmd_demux_src21_data),                  //  output,  width = 108,          .data
		.src21_channel       (cmd_demux_src21_channel),               //  output,   width = 27,          .channel
		.src21_startofpacket (cmd_demux_src21_startofpacket),         //  output,    width = 1,          .startofpacket
		.src21_endofpacket   (cmd_demux_src21_endofpacket),           //  output,    width = 1,          .endofpacket
		.src22_ready         (cmd_demux_src22_ready),                 //   input,    width = 1,     src22.ready
		.src22_valid         (cmd_demux_src22_valid),                 //  output,    width = 1,          .valid
		.src22_data          (cmd_demux_src22_data),                  //  output,  width = 108,          .data
		.src22_channel       (cmd_demux_src22_channel),               //  output,   width = 27,          .channel
		.src22_startofpacket (cmd_demux_src22_startofpacket),         //  output,    width = 1,          .startofpacket
		.src22_endofpacket   (cmd_demux_src22_endofpacket),           //  output,    width = 1,          .endofpacket
		.src23_ready         (cmd_demux_src23_ready),                 //   input,    width = 1,     src23.ready
		.src23_valid         (cmd_demux_src23_valid),                 //  output,    width = 1,          .valid
		.src23_data          (cmd_demux_src23_data),                  //  output,  width = 108,          .data
		.src23_channel       (cmd_demux_src23_channel),               //  output,   width = 27,          .channel
		.src23_startofpacket (cmd_demux_src23_startofpacket),         //  output,    width = 1,          .startofpacket
		.src23_endofpacket   (cmd_demux_src23_endofpacket),           //  output,    width = 1,          .endofpacket
		.src24_ready         (cmd_demux_src24_ready),                 //   input,    width = 1,     src24.ready
		.src24_valid         (cmd_demux_src24_valid),                 //  output,    width = 1,          .valid
		.src24_data          (cmd_demux_src24_data),                  //  output,  width = 108,          .data
		.src24_channel       (cmd_demux_src24_channel),               //  output,   width = 27,          .channel
		.src24_startofpacket (cmd_demux_src24_startofpacket),         //  output,    width = 1,          .startofpacket
		.src24_endofpacket   (cmd_demux_src24_endofpacket),           //  output,    width = 1,          .endofpacket
		.src25_ready         (cmd_demux_src25_ready),                 //   input,    width = 1,     src25.ready
		.src25_valid         (cmd_demux_src25_valid),                 //  output,    width = 1,          .valid
		.src25_data          (cmd_demux_src25_data),                  //  output,  width = 108,          .data
		.src25_channel       (cmd_demux_src25_channel),               //  output,   width = 27,          .channel
		.src25_startofpacket (cmd_demux_src25_startofpacket),         //  output,    width = 1,          .startofpacket
		.src25_endofpacket   (cmd_demux_src25_endofpacket),           //  output,    width = 1,          .endofpacket
		.src26_ready         (cmd_demux_src26_ready),                 //   input,    width = 1,     src26.ready
		.src26_valid         (cmd_demux_src26_valid),                 //  output,    width = 1,          .valid
		.src26_data          (cmd_demux_src26_data),                  //  output,  width = 108,          .data
		.src26_channel       (cmd_demux_src26_channel),               //  output,   width = 27,          .channel
		.src26_startofpacket (cmd_demux_src26_startofpacket),         //  output,    width = 1,          .startofpacket
		.src26_endofpacket   (cmd_demux_src26_endofpacket)            //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_4gbsjgi cmd_demux_001 (
		.clk                (cpu_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                //   input,   width = 27,          .channel
		.sink_data          (router_001_src_data),                   //   input,  width = 108,          .data
		.sink_startofpacket (router_001_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),              //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),              //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),               //  output,  width = 108,          .data
		.src0_channel       (cmd_demux_001_src0_channel),            //  output,   width = 27,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),        //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),              //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),              //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_001_src1_data),               //  output,  width = 108,          .data
		.src1_channel       (cmd_demux_001_src1_channel),            //  output,   width = 27,          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),      //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)         //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                             //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                              //  output,  width = 108,          .data
		.src_channel         (cmd_mux_src_channel),                           //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                        //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src0_data),                           //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_001 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_001_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                        //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src1_data),                           //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_002 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_002_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src2_channel),                        //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src2_data),                           //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_003 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_003_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src3_channel),                        //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src3_data),                           //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_004 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_004_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_004_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_004_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src4_channel),                        //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src4_data),                           //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_005 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_005_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_005_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_005_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src5_channel),                        //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src5_data),                           //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_006 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_006_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_006_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_006_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src6_channel),                        //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src6_data),                           //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_007 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_007_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_007_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_007_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src7_channel),                        //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src7_data),                           //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                     //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_a3ltomq cmd_mux_008 (
		.clk                 (cpu_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                 //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_008_src_valid),                 //  output,    width = 1,          .valid
		.src_data            (cmd_mux_008_src_data),                  //  output,  width = 108,          .data
		.src_channel         (cmd_mux_008_src_channel),               //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),           //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                  //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                  //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src8_channel),                //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src8_data),                   //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),              //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),              //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),            //   input,   width = 27,          .channel
		.sink1_data          (cmd_demux_001_src0_data),               //   input,  width = 108,          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)         //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_a3ltomq cmd_mux_009 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_009_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_009_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_009_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                          //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                          //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src9_channel),                        //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src9_data),                           //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                      //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                      //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                    //   input,   width = 27,          .channel
		.sink1_data          (cmd_demux_001_src1_data),                       //   input,  width = 108,          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                 //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_010 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_010_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_010_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_010_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src10_channel),                       //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src10_data),                          //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_011 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_011_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_011_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_011_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src11_channel),                       //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src11_data),                          //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_012 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_012_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_012_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_012_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src12_channel),                       //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src12_data),                          //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_013 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_013_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_013_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_013_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src13_channel),                       //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src13_data),                          //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_014 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_014_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_014_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_014_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src14_channel),                       //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src14_data),                          //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_015 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_015_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_015_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_015_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src15_channel),                       //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src15_data),                          //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_016 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_016_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_016_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_016_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src16_channel),                       //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src16_data),                          //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_017 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_017_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_017_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_017_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src17_channel),                       //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src17_data),                          //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_018 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_018_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_018_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_018_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src18_channel),                       //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src18_data),                          //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_019 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_019_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_019_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_019_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src19_channel),                       //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src19_data),                          //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_020 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_020_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_020_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_020_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src20_channel),                       //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src20_data),                          //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_021 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_021_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_021_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_021_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src21_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src21_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src21_channel),                       //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src21_data),                          //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src21_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src21_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_022 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_022_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_022_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_022_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src22_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src22_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src22_channel),                       //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src22_data),                          //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src22_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src22_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_023 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_023_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_023_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_023_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src23_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src23_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src23_channel),                       //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src23_data),                          //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src23_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src23_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_024 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_024_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_024_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_024_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src24_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src24_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src24_channel),                       //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src24_data),                          //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src24_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src24_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_025 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_025_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_025_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_025_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src25_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src25_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src25_channel),                       //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src25_data),                          //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src25_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src25_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_l3il5ey cmd_mux_026 (
		.clk                 (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_026_src_valid),                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_026_src_data),                          //  output,  width = 108,          .data
		.src_channel         (cmd_mux_026_src_channel),                       //  output,   width = 27,          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src26_ready),                         //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src26_valid),                         //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src26_channel),                       //   input,   width = 27,          .channel
		.sink0_data          (cmd_demux_src26_data),                          //   input,  width = 108,          .data
		.sink0_startofpacket (cmd_demux_src26_startofpacket),                 //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src26_endofpacket)                    //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_002_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_002_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                           //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_src0_channel),                        //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                     //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_001 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_003_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_003_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_002 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_004_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_004_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_003 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_005_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_005_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_005_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_005_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_005_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_003_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_004 (
		.clk                (cpu_clk_clk_clk),                                                                        //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                          //   input,    width = 1, clk_reset.reset
		.sink_ready         (edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter_src_channel),       //   input,   width = 27,          .channel
		.sink_data          (edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter_src_data),          //   input,  width = 108,          .data
		.sink_startofpacket (edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                                               //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                                               //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_004_src0_data),                                                                //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                                             //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                                                       //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                                                          //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_005 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_007_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_007_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_007_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_007_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_007_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_005_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_005_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_006 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_008_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_008_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_008_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_008_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_008_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_006_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_006_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_007 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_009_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_009_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_009_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_009_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_009_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_007_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_007_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_4gbsjgi rsp_demux_008 (
		.clk                (cpu_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_010_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (router_010_src_channel),                //   input,   width = 27,          .channel
		.sink_data          (router_010_src_data),                   //   input,  width = 108,          .data
		.sink_startofpacket (router_010_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (router_010_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_008_src0_ready),              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_008_src0_data),               //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_008_src0_channel),            //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),        //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),              //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),              //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_008_src1_data),               //  output,  width = 108,          .data
		.src1_channel       (rsp_demux_008_src1_channel),            //  output,   width = 27,          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),      //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)         //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_4gbsjgi rsp_demux_009 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_011_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_011_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_011_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_011_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_011_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_009_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_009_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                      //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                      //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_009_src1_data),                       //  output,  width = 108,          .data
		.src1_channel       (rsp_demux_009_src1_channel),                    //  output,   width = 27,          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),              //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_010 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_012_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_012_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_012_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_012_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_012_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_010_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_010_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_011 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_013_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_013_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_013_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_013_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_013_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_011_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_011_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_012 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_014_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_014_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_014_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_014_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_014_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_012_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_012_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_013 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_015_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_015_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_015_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_015_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_015_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_013_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_013_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_014 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_016_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_016_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_016_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_016_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_016_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_014_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_014_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_015 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_017_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_017_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_017_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_017_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_017_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_015_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_015_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_016 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_018_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_018_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_018_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_018_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_018_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_016_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_016_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_017 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_019_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_019_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_019_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_019_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_019_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_017_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_017_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_018 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_020_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_020_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_020_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_020_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_020_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_018_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_018_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_019 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_021_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_021_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_021_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_021_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_021_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_019_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_019_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_020 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_022_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_022_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_022_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_022_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_022_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_020_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_020_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_021 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_023_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_023_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_023_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_023_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_023_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_021_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_021_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_022 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_024_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_024_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_024_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_024_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_024_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_022_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_022_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_023 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_025_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_025_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_025_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_025_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_025_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_023_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_023_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_024 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_026_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_026_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_026_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_026_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_026_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_024_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_024_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_025 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_027_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_027_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_027_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_027_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_027_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_025_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_025_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_025_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_demultiplexer_181_icywl3y rsp_demux_026 (
		.clk                (cpu_clk_clk_clk),                               //   input,    width = 1,       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_028_src_ready),                          //  output,    width = 1,      sink.ready
		.sink_channel       (router_028_src_channel),                        //   input,   width = 27,          .channel
		.sink_data          (router_028_src_data),                           //   input,  width = 108,          .data
		.sink_startofpacket (router_028_src_startofpacket),                  //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),                    //   input,    width = 1,          .endofpacket
		.sink_valid         (router_028_src_valid),                          //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_026_src0_ready),                      //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),                      //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_026_src0_data),                       //  output,  width = 108,          .data
		.src0_channel       (rsp_demux_026_src0_channel),                    //  output,   width = 27,          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),              //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket)                 //  output,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_ztvdunq rsp_mux (
		.clk                  (cpu_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset                (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                     //   input,    width = 1,       src.ready
		.src_valid            (rsp_mux_src_valid),                     //  output,    width = 1,          .valid
		.src_data             (rsp_mux_src_data),                      //  output,  width = 108,          .data
		.src_channel          (rsp_mux_src_channel),                   //  output,   width = 27,          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),             //  output,    width = 1,          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),               //  output,    width = 1,          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                  //  output,    width = 1,     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                  //   input,    width = 1,          .valid
		.sink0_channel        (rsp_demux_src0_channel),                //   input,   width = 27,          .channel
		.sink0_data           (rsp_demux_src0_data),                   //   input,  width = 108,          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),              //  output,    width = 1,     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),              //   input,    width = 1,          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),            //   input,   width = 27,          .channel
		.sink1_data           (rsp_demux_001_src0_data),               //   input,  width = 108,          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),              //  output,    width = 1,     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),              //   input,    width = 1,          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),            //   input,   width = 27,          .channel
		.sink2_data           (rsp_demux_002_src0_data),               //   input,  width = 108,          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),              //  output,    width = 1,     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),              //   input,    width = 1,          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),            //   input,   width = 27,          .channel
		.sink3_data           (rsp_demux_003_src0_data),               //   input,  width = 108,          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),              //  output,    width = 1,     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),              //   input,    width = 1,          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),            //   input,   width = 27,          .channel
		.sink4_data           (rsp_demux_004_src0_data),               //   input,  width = 108,          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),              //  output,    width = 1,     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),              //   input,    width = 1,          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),            //   input,   width = 27,          .channel
		.sink5_data           (rsp_demux_005_src0_data),               //   input,  width = 108,          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),              //  output,    width = 1,     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),              //   input,    width = 1,          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),            //   input,   width = 27,          .channel
		.sink6_data           (rsp_demux_006_src0_data),               //   input,  width = 108,          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),              //  output,    width = 1,     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),              //   input,    width = 1,          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),            //   input,   width = 27,          .channel
		.sink7_data           (rsp_demux_007_src0_data),               //   input,  width = 108,          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),              //  output,    width = 1,     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),              //   input,    width = 1,          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),            //   input,   width = 27,          .channel
		.sink8_data           (rsp_demux_008_src0_data),               //   input,  width = 108,          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),              //  output,    width = 1,     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),              //   input,    width = 1,          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),            //   input,   width = 27,          .channel
		.sink9_data           (rsp_demux_009_src0_data),               //   input,  width = 108,          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),              //  output,    width = 1,    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),              //   input,    width = 1,          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),            //   input,   width = 27,          .channel
		.sink10_data          (rsp_demux_010_src0_data),               //   input,  width = 108,          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),              //  output,    width = 1,    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),              //   input,    width = 1,          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),            //   input,   width = 27,          .channel
		.sink11_data          (rsp_demux_011_src0_data),               //   input,  width = 108,          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),              //  output,    width = 1,    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),              //   input,    width = 1,          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),            //   input,   width = 27,          .channel
		.sink12_data          (rsp_demux_012_src0_data),               //   input,  width = 108,          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),              //  output,    width = 1,    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),              //   input,    width = 1,          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),            //   input,   width = 27,          .channel
		.sink13_data          (rsp_demux_013_src0_data),               //   input,  width = 108,          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),              //  output,    width = 1,    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),              //   input,    width = 1,          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),            //   input,   width = 27,          .channel
		.sink14_data          (rsp_demux_014_src0_data),               //   input,  width = 108,          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),              //  output,    width = 1,    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),              //   input,    width = 1,          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),            //   input,   width = 27,          .channel
		.sink15_data          (rsp_demux_015_src0_data),               //   input,  width = 108,          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),              //  output,    width = 1,    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),              //   input,    width = 1,          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),            //   input,   width = 27,          .channel
		.sink16_data          (rsp_demux_016_src0_data),               //   input,  width = 108,          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),              //  output,    width = 1,    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),              //   input,    width = 1,          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),            //   input,   width = 27,          .channel
		.sink17_data          (rsp_demux_017_src0_data),               //   input,  width = 108,          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),              //  output,    width = 1,    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),              //   input,    width = 1,          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),            //   input,   width = 27,          .channel
		.sink18_data          (rsp_demux_018_src0_data),               //   input,  width = 108,          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),              //  output,    width = 1,    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),              //   input,    width = 1,          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),            //   input,   width = 27,          .channel
		.sink19_data          (rsp_demux_019_src0_data),               //   input,  width = 108,          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),              //  output,    width = 1,    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),              //   input,    width = 1,          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),            //   input,   width = 27,          .channel
		.sink20_data          (rsp_demux_020_src0_data),               //   input,  width = 108,          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),              //  output,    width = 1,    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),              //   input,    width = 1,          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),            //   input,   width = 27,          .channel
		.sink21_data          (rsp_demux_021_src0_data),               //   input,  width = 108,          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink22_ready         (rsp_demux_022_src0_ready),              //  output,    width = 1,    sink22.ready
		.sink22_valid         (rsp_demux_022_src0_valid),              //   input,    width = 1,          .valid
		.sink22_channel       (rsp_demux_022_src0_channel),            //   input,   width = 27,          .channel
		.sink22_data          (rsp_demux_022_src0_data),               //   input,  width = 108,          .data
		.sink22_startofpacket (rsp_demux_022_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink22_endofpacket   (rsp_demux_022_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink23_ready         (rsp_demux_023_src0_ready),              //  output,    width = 1,    sink23.ready
		.sink23_valid         (rsp_demux_023_src0_valid),              //   input,    width = 1,          .valid
		.sink23_channel       (rsp_demux_023_src0_channel),            //   input,   width = 27,          .channel
		.sink23_data          (rsp_demux_023_src0_data),               //   input,  width = 108,          .data
		.sink23_startofpacket (rsp_demux_023_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink23_endofpacket   (rsp_demux_023_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink24_ready         (rsp_demux_024_src0_ready),              //  output,    width = 1,    sink24.ready
		.sink24_valid         (rsp_demux_024_src0_valid),              //   input,    width = 1,          .valid
		.sink24_channel       (rsp_demux_024_src0_channel),            //   input,   width = 27,          .channel
		.sink24_data          (rsp_demux_024_src0_data),               //   input,  width = 108,          .data
		.sink24_startofpacket (rsp_demux_024_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink24_endofpacket   (rsp_demux_024_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink25_ready         (rsp_demux_025_src0_ready),              //  output,    width = 1,    sink25.ready
		.sink25_valid         (rsp_demux_025_src0_valid),              //   input,    width = 1,          .valid
		.sink25_channel       (rsp_demux_025_src0_channel),            //   input,   width = 27,          .channel
		.sink25_data          (rsp_demux_025_src0_data),               //   input,  width = 108,          .data
		.sink25_startofpacket (rsp_demux_025_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink25_endofpacket   (rsp_demux_025_src0_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink26_ready         (rsp_demux_026_src0_ready),              //  output,    width = 1,    sink26.ready
		.sink26_valid         (rsp_demux_026_src0_valid),              //   input,    width = 1,          .valid
		.sink26_channel       (rsp_demux_026_src0_channel),            //   input,   width = 27,          .channel
		.sink26_data          (rsp_demux_026_src0_data),               //   input,  width = 108,          .data
		.sink26_startofpacket (rsp_demux_026_src0_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink26_endofpacket   (rsp_demux_026_src0_endofpacket)         //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_multiplexer_181_7pfa32i rsp_mux_001 (
		.clk                 (cpu_clk_clk_clk),                       //   input,    width = 1,       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                 //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                 //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                  //  output,  width = 108,          .data
		.src_channel         (rsp_mux_001_src_channel),               //  output,   width = 27,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),         //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),           //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_008_src1_ready),              //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_008_src1_valid),              //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_008_src1_channel),            //   input,   width = 27,          .channel
		.sink0_data          (rsp_demux_008_src1_data),               //   input,  width = 108,          .data
		.sink0_startofpacket (rsp_demux_008_src1_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_008_src1_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_009_src1_ready),              //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_009_src1_valid),              //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_009_src1_channel),            //   input,   width = 27,          .channel
		.sink1_data          (rsp_demux_009_src1_data),               //   input,  width = 108,          .data
		.sink1_startofpacket (rsp_demux_009_src1_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_009_src1_endofpacket)         //   input,    width = 1,          .endofpacket
	);

	nios_altera_merlin_width_adapter_181_xk6evli #(
		.IN_PKT_ADDR_H                 (54),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (63),
		.IN_PKT_BYTE_CNT_L             (61),
		.IN_PKT_TRANS_COMPRESSED_READ  (55),
		.IN_PKT_TRANS_WRITE            (57),
		.IN_PKT_BURSTWRAP_H            (66),
		.IN_PKT_BURSTWRAP_L            (64),
		.IN_PKT_BURST_SIZE_H           (69),
		.IN_PKT_BURST_SIZE_L           (67),
		.IN_PKT_RESPONSE_STATUS_H      (95),
		.IN_PKT_RESPONSE_STATUS_L      (94),
		.IN_PKT_TRANS_EXCLUSIVE        (60),
		.IN_PKT_BURST_TYPE_H           (71),
		.IN_PKT_BURST_TYPE_L           (70),
		.IN_PKT_ORI_BURST_SIZE_L       (96),
		.IN_PKT_ORI_BURST_SIZE_H       (98),
		.IN_ST_DATA_W                  (108),
		.OUT_PKT_ADDR_H                (27),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (36),
		.OUT_PKT_BYTE_CNT_L            (34),
		.OUT_PKT_TRANS_COMPRESSED_READ (28),
		.OUT_PKT_BURST_SIZE_H          (42),
		.OUT_PKT_BURST_SIZE_L          (40),
		.OUT_PKT_RESPONSE_STATUS_H     (68),
		.OUT_PKT_RESPONSE_STATUS_L     (67),
		.OUT_PKT_TRANS_EXCLUSIVE       (33),
		.OUT_PKT_BURST_TYPE_H          (44),
		.OUT_PKT_BURST_TYPE_L          (43),
		.OUT_PKT_ORI_BURST_SIZE_L      (69),
		.OUT_PKT_ORI_BURST_SIZE_H      (71),
		.OUT_ST_DATA_W                 (81),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter (
		.clk                  (cpu_clk_clk_clk),                                                                        //   input,    width = 1,       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                          //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_004_src_valid),                                                                  //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_004_src_channel),                                                                //   input,   width = 27,          .channel
		.in_startofpacket     (cmd_mux_004_src_startofpacket),                                                          //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_004_src_endofpacket),                                                            //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_004_src_ready),                                                                  //  output,    width = 1,          .ready
		.in_data              (cmd_mux_004_src_data),                                                                   //   input,  width = 108,          .data
		.out_endofpacket      (edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter_src_data),          //  output,   width = 81,          .data
		.out_channel          (edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter_src_channel),       //  output,   width = 27,          .channel
		.out_valid            (edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (edid_ram_slave_translator_avalon_universal_slave_0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                  // (terminated),                         
	);

	nios_altera_merlin_width_adapter_181_tmu7rhq #(
		.IN_PKT_ADDR_H                 (27),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (36),
		.IN_PKT_BYTE_CNT_L             (34),
		.IN_PKT_TRANS_COMPRESSED_READ  (28),
		.IN_PKT_TRANS_WRITE            (30),
		.IN_PKT_BURSTWRAP_H            (39),
		.IN_PKT_BURSTWRAP_L            (37),
		.IN_PKT_BURST_SIZE_H           (42),
		.IN_PKT_BURST_SIZE_L           (40),
		.IN_PKT_RESPONSE_STATUS_H      (68),
		.IN_PKT_RESPONSE_STATUS_L      (67),
		.IN_PKT_TRANS_EXCLUSIVE        (33),
		.IN_PKT_BURST_TYPE_H           (44),
		.IN_PKT_BURST_TYPE_L           (43),
		.IN_PKT_ORI_BURST_SIZE_L       (69),
		.IN_PKT_ORI_BURST_SIZE_H       (71),
		.IN_ST_DATA_W                  (81),
		.OUT_PKT_ADDR_H                (54),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (63),
		.OUT_PKT_BYTE_CNT_L            (61),
		.OUT_PKT_TRANS_COMPRESSED_READ (55),
		.OUT_PKT_BURST_SIZE_H          (69),
		.OUT_PKT_BURST_SIZE_L          (67),
		.OUT_PKT_RESPONSE_STATUS_H     (95),
		.OUT_PKT_RESPONSE_STATUS_L     (94),
		.OUT_PKT_TRANS_EXCLUSIVE       (60),
		.OUT_PKT_BURST_TYPE_H          (71),
		.OUT_PKT_BURST_TYPE_L          (70),
		.OUT_PKT_ORI_BURST_SIZE_L      (96),
		.OUT_PKT_ORI_BURST_SIZE_H      (98),
		.OUT_ST_DATA_W                 (108),
		.ST_CHANNEL_W                  (27),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter (
		.clk                  (cpu_clk_clk_clk),                                                                        //   input,    width = 1,       clk.clk
		.reset                (jtag_uart_0_reset_reset_bridge_in_reset_reset),                                          //   input,    width = 1, clk_reset.reset
		.in_valid             (router_006_src_valid),                                                                   //   input,    width = 1,      sink.valid
		.in_channel           (router_006_src_channel),                                                                 //   input,   width = 27,          .channel
		.in_startofpacket     (router_006_src_startofpacket),                                                           //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_006_src_endofpacket),                                                             //   input,    width = 1,          .endofpacket
		.in_ready             (router_006_src_ready),                                                                   //  output,    width = 1,          .ready
		.in_data              (router_006_src_data),                                                                    //   input,   width = 81,          .data
		.out_endofpacket      (edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter_src_data),          //  output,  width = 108,          .data
		.out_channel          (edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter_src_channel),       //  output,   width = 27,          .channel
		.out_valid            (edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (edid_ram_slave_translator_avalon_universal_slave_0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                  // (terminated),                         
	);

endmodule
