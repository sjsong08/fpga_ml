// nios.v

// Generated using ACDS version 18.1 222

`timescale 1 ps / 1 ps
module nios (
		input  wire [1:0]  color_depth_pio_external_connection_export,                        //                   color_depth_pio_external_connection.export
		input  wire        cpu_clk,                                                           //                                                   cpu.clk
		input  wire        cpu_clk_reset_n,                                                   //                                               cpu_clk.reset_n
		output wire        edid_ram_access_pio_external_connection_export,                    //               edid_ram_access_pio_external_connection.export
		output wire [7:0]  edid_ram_slave_translator_address,                                 //                             edid_ram_slave_translator.address
		output wire        edid_ram_slave_translator_write,                                   //                                                      .write
		output wire        edid_ram_slave_translator_read,                                    //                                                      .read
		input  wire [7:0]  edid_ram_slave_translator_readdata,                                //                                                      .readdata
		output wire [7:0]  edid_ram_slave_translator_writedata,                               //                                                      .writedata
		input  wire        edid_ram_slave_translator_waitrequest,                             //                                                      .waitrequest
		input  wire [23:0] measure_pio_external_connection_export,                            //                       measure_pio_external_connection.export
		input  wire        measure_valid_pio_external_connection_export,                      //                 measure_valid_pio_external_connection.export
		output wire [2:0]  oc_i2c_master_av_slave_translator_avalon_anti_slave_0_address,     // oc_i2c_master_av_slave_translator_avalon_anti_slave_0.address
		output wire        oc_i2c_master_av_slave_translator_avalon_anti_slave_0_write,       //                                                      .write
		input  wire [31:0] oc_i2c_master_av_slave_translator_avalon_anti_slave_0_readdata,    //                                                      .readdata
		output wire [31:0] oc_i2c_master_av_slave_translator_avalon_anti_slave_0_writedata,   //                                                      .writedata
		input  wire        oc_i2c_master_av_slave_translator_avalon_anti_slave_0_waitrequest, //                                                      .waitrequest
		output wire        oc_i2c_master_av_slave_translator_avalon_anti_slave_0_chipselect,  //                                                      .chipselect
		output wire [2:0]  oc_i2c_master_ti_avalon_anti_slave_address,                        //                    oc_i2c_master_ti_avalon_anti_slave.address
		output wire        oc_i2c_master_ti_avalon_anti_slave_write,                          //                                                      .write
		input  wire [31:0] oc_i2c_master_ti_avalon_anti_slave_readdata,                       //                                                      .readdata
		output wire [31:0] oc_i2c_master_ti_avalon_anti_slave_writedata,                      //                                                      .writedata
		input  wire        oc_i2c_master_ti_avalon_anti_slave_waitrequest,                    //                                                      .waitrequest
		output wire        oc_i2c_master_ti_avalon_anti_slave_chipselect,                     //                                                      .chipselect
		input  wire        tmds_bit_clock_ratio_pio_external_connection_export,               //          tmds_bit_clock_ratio_pio_external_connection.export
		output wire        tx_hpd_ack_pio_external_connection_export,                         //                    tx_hpd_ack_pio_external_connection.export
		input  wire        tx_hpd_req_pio_external_connection_export,                         //                    tx_hpd_req_pio_external_connection.export
		output wire [8:0]  tx_iopll_rcfg_mgmt_translator_avalon_anti_slave_address,           //       tx_iopll_rcfg_mgmt_translator_avalon_anti_slave.address
		output wire        tx_iopll_rcfg_mgmt_translator_avalon_anti_slave_write,             //                                                      .write
		output wire        tx_iopll_rcfg_mgmt_translator_avalon_anti_slave_read,              //                                                      .read
		input  wire [31:0] tx_iopll_rcfg_mgmt_translator_avalon_anti_slave_readdata,          //                                                      .readdata
		output wire [31:0] tx_iopll_rcfg_mgmt_translator_avalon_anti_slave_writedata,         //                                                      .writedata
		input  wire        tx_iopll_waitrequest_pio_external_connection_export,               //          tx_iopll_waitrequest_pio_external_connection.export
		output wire [1:0]  tx_os_pio_external_connection_export,                              //                         tx_os_pio_external_connection.export
		output wire [9:0]  tx_pll_rcfg_mgmt_translator_avalon_anti_slave_address,             //         tx_pll_rcfg_mgmt_translator_avalon_anti_slave.address
		output wire        tx_pll_rcfg_mgmt_translator_avalon_anti_slave_write,               //                                                      .write
		output wire        tx_pll_rcfg_mgmt_translator_avalon_anti_slave_read,                //                                                      .read
		input  wire [31:0] tx_pll_rcfg_mgmt_translator_avalon_anti_slave_readdata,            //                                                      .readdata
		output wire [31:0] tx_pll_rcfg_mgmt_translator_avalon_anti_slave_writedata,           //                                                      .writedata
		input  wire        tx_pll_rcfg_mgmt_translator_avalon_anti_slave_waitrequest,         //                                                      .waitrequest
		input  wire        tx_pll_waitrequest_pio_external_connection_export,                 //            tx_pll_waitrequest_pio_external_connection.export
		input  wire        tx_pma_cal_busy_pio_external_connection_export,                    //               tx_pma_cal_busy_pio_external_connection.export
		output wire [1:0]  tx_pma_ch_export,                                                  //                                             tx_pma_ch.export
		output wire [11:0] tx_pma_rcfg_mgmt_translator_avalon_anti_slave_address,             //         tx_pma_rcfg_mgmt_translator_avalon_anti_slave.address
		output wire        tx_pma_rcfg_mgmt_translator_avalon_anti_slave_write,               //                                                      .write
		output wire        tx_pma_rcfg_mgmt_translator_avalon_anti_slave_read,                //                                                      .read
		input  wire [31:0] tx_pma_rcfg_mgmt_translator_avalon_anti_slave_readdata,            //                                                      .readdata
		output wire [31:0] tx_pma_rcfg_mgmt_translator_avalon_anti_slave_writedata,           //                                                      .writedata
		input  wire        tx_pma_rcfg_mgmt_translator_avalon_anti_slave_waitrequest,         //                                                      .waitrequest
		input  wire        tx_pma_waitrequest_pio_external_connection_export,                 //            tx_pma_waitrequest_pio_external_connection.export
		output wire        tx_rcfg_en_pio_external_connection_export,                         //                    tx_rcfg_en_pio_external_connection.export
		output wire        tx_rst_pll_pio_external_connection_export,                         //                    tx_rst_pll_pio_external_connection.export
		output wire        tx_rst_xcvr_pio_external_connection_export,                        //                   tx_rst_xcvr_pio_external_connection.export
		output wire        wd_timer_resetrequest_reset                                        //                                 wd_timer_resetrequest.reset
	);

	wire         cpu_clk_clk_clk;                                                                            // cpu_clk:clk_out -> [color_depth_pio:clk, cpu:clk, cpu_ram:clk, edid_ram_access_pio:clk, edid_ram_slave_translator:clk, irq_mapper:clk, jtag_uart_0:clk, measure_pio:clk, measure_valid_pio:clk, mm_interconnect_0:cpu_clk_clk_clk, oc_i2c_master_av_slave_translator:clk, oc_i2c_master_ti:clk, rst_controller:clk, rst_controller_001:clk, sysid_qsys_0:clock, tmds_bit_clock_ratio_pio:clk, tx_hpd_ack_pio:clk, tx_hpd_req_pio:clk, tx_iopll_rcfg_mgmt_translator:clk, tx_iopll_waitrequest_pio:clk, tx_os_pio:clk, tx_pll_rcfg_mgmt_translator:clk, tx_pll_waitrequest_pio:clk, tx_pma_cal_busy_pio:clk, tx_pma_ch:clk, tx_pma_rcfg_mgmt_translator:clk, tx_pma_waitrequest_pio:clk, tx_rcfg_en_pio:clk, tx_rst_pll_pio:clk, tx_rst_xcvr_pio:clk, wd_timer:clk]
	wire  [31:0] cpu_data_master_readdata;                                                                   // mm_interconnect_0:cpu_data_master_readdata -> cpu:d_readdata
	wire         cpu_data_master_waitrequest;                                                                // mm_interconnect_0:cpu_data_master_waitrequest -> cpu:d_waitrequest
	wire         cpu_data_master_debugaccess;                                                                // cpu:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:cpu_data_master_debugaccess
	wire  [18:0] cpu_data_master_address;                                                                    // cpu:d_address -> mm_interconnect_0:cpu_data_master_address
	wire   [3:0] cpu_data_master_byteenable;                                                                 // cpu:d_byteenable -> mm_interconnect_0:cpu_data_master_byteenable
	wire         cpu_data_master_read;                                                                       // cpu:d_read -> mm_interconnect_0:cpu_data_master_read
	wire         cpu_data_master_write;                                                                      // cpu:d_write -> mm_interconnect_0:cpu_data_master_write
	wire  [31:0] cpu_data_master_writedata;                                                                  // cpu:d_writedata -> mm_interconnect_0:cpu_data_master_writedata
	wire  [31:0] cpu_instruction_master_readdata;                                                            // mm_interconnect_0:cpu_instruction_master_readdata -> cpu:i_readdata
	wire         cpu_instruction_master_waitrequest;                                                         // mm_interconnect_0:cpu_instruction_master_waitrequest -> cpu:i_waitrequest
	wire  [18:0] cpu_instruction_master_address;                                                             // cpu:i_address -> mm_interconnect_0:cpu_instruction_master_address
	wire         cpu_instruction_master_read;                                                                // cpu:i_read -> mm_interconnect_0:cpu_instruction_master_read
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect;                                 // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_chipselect -> jtag_uart_0:av_chipselect
	wire  [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata;                                   // jtag_uart_0:av_readdata -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest;                                // jtag_uart_0:av_waitrequest -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address;                                    // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_address -> jtag_uart_0:av_address
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read;                                       // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_read -> jtag_uart_0:av_read_n
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write;                                      // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_write -> jtag_uart_0:av_write_n
	wire  [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata;                                  // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_writedata -> jtag_uart_0:av_writedata
	wire  [31:0] mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_readdata;          // tx_iopll_rcfg_mgmt_translator:uav_readdata -> mm_interconnect_0:tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_readdata
	wire         mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest;       // tx_iopll_rcfg_mgmt_translator:uav_waitrequest -> mm_interconnect_0:tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest
	wire         mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess;       // mm_interconnect_0:tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess -> tx_iopll_rcfg_mgmt_translator:uav_debugaccess
	wire  [11:0] mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_address;           // mm_interconnect_0:tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_address -> tx_iopll_rcfg_mgmt_translator:uav_address
	wire         mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_read;              // mm_interconnect_0:tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_read -> tx_iopll_rcfg_mgmt_translator:uav_read
	wire   [3:0] mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable;        // mm_interconnect_0:tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable -> tx_iopll_rcfg_mgmt_translator:uav_byteenable
	wire         mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid;     // tx_iopll_rcfg_mgmt_translator:uav_readdatavalid -> mm_interconnect_0:tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid
	wire         mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_lock;              // mm_interconnect_0:tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_lock -> tx_iopll_rcfg_mgmt_translator:uav_lock
	wire         mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_write;             // mm_interconnect_0:tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_write -> tx_iopll_rcfg_mgmt_translator:uav_write
	wire  [31:0] mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_writedata;         // mm_interconnect_0:tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_writedata -> tx_iopll_rcfg_mgmt_translator:uav_writedata
	wire   [2:0] mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount;        // mm_interconnect_0:tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount -> tx_iopll_rcfg_mgmt_translator:uav_burstcount
	wire  [31:0] mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_readdata;            // tx_pll_rcfg_mgmt_translator:uav_readdata -> mm_interconnect_0:tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_readdata
	wire         mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest;         // tx_pll_rcfg_mgmt_translator:uav_waitrequest -> mm_interconnect_0:tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest
	wire         mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess;         // mm_interconnect_0:tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess -> tx_pll_rcfg_mgmt_translator:uav_debugaccess
	wire  [11:0] mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_address;             // mm_interconnect_0:tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_address -> tx_pll_rcfg_mgmt_translator:uav_address
	wire         mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_read;                // mm_interconnect_0:tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_read -> tx_pll_rcfg_mgmt_translator:uav_read
	wire   [3:0] mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable;          // mm_interconnect_0:tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable -> tx_pll_rcfg_mgmt_translator:uav_byteenable
	wire         mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid;       // tx_pll_rcfg_mgmt_translator:uav_readdatavalid -> mm_interconnect_0:tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid
	wire         mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_lock;                // mm_interconnect_0:tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_lock -> tx_pll_rcfg_mgmt_translator:uav_lock
	wire         mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_write;               // mm_interconnect_0:tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_write -> tx_pll_rcfg_mgmt_translator:uav_write
	wire  [31:0] mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_writedata;           // mm_interconnect_0:tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_writedata -> tx_pll_rcfg_mgmt_translator:uav_writedata
	wire   [2:0] mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount;          // mm_interconnect_0:tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount -> tx_pll_rcfg_mgmt_translator:uav_burstcount
	wire  [31:0] mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_readdata;            // tx_pma_rcfg_mgmt_translator:uav_readdata -> mm_interconnect_0:tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_readdata
	wire         mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest;         // tx_pma_rcfg_mgmt_translator:uav_waitrequest -> mm_interconnect_0:tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest
	wire         mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess;         // mm_interconnect_0:tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess -> tx_pma_rcfg_mgmt_translator:uav_debugaccess
	wire  [13:0] mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_address;             // mm_interconnect_0:tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_address -> tx_pma_rcfg_mgmt_translator:uav_address
	wire         mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_read;                // mm_interconnect_0:tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_read -> tx_pma_rcfg_mgmt_translator:uav_read
	wire   [3:0] mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable;          // mm_interconnect_0:tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable -> tx_pma_rcfg_mgmt_translator:uav_byteenable
	wire         mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid;       // tx_pma_rcfg_mgmt_translator:uav_readdatavalid -> mm_interconnect_0:tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid
	wire         mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_lock;                // mm_interconnect_0:tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_lock -> tx_pma_rcfg_mgmt_translator:uav_lock
	wire         mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_write;               // mm_interconnect_0:tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_write -> tx_pma_rcfg_mgmt_translator:uav_write
	wire  [31:0] mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_writedata;           // mm_interconnect_0:tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_writedata -> tx_pma_rcfg_mgmt_translator:uav_writedata
	wire   [2:0] mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount;          // mm_interconnect_0:tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount -> tx_pma_rcfg_mgmt_translator:uav_burstcount
	wire   [7:0] mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_readdata;              // edid_ram_slave_translator:uav_readdata -> mm_interconnect_0:edid_ram_slave_translator_avalon_universal_slave_0_readdata
	wire         mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_waitrequest;           // edid_ram_slave_translator:uav_waitrequest -> mm_interconnect_0:edid_ram_slave_translator_avalon_universal_slave_0_waitrequest
	wire         mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_debugaccess;           // mm_interconnect_0:edid_ram_slave_translator_avalon_universal_slave_0_debugaccess -> edid_ram_slave_translator:uav_debugaccess
	wire  [10:0] mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_address;               // mm_interconnect_0:edid_ram_slave_translator_avalon_universal_slave_0_address -> edid_ram_slave_translator:uav_address
	wire         mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_read;                  // mm_interconnect_0:edid_ram_slave_translator_avalon_universal_slave_0_read -> edid_ram_slave_translator:uav_read
	wire   [0:0] mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_byteenable;            // mm_interconnect_0:edid_ram_slave_translator_avalon_universal_slave_0_byteenable -> edid_ram_slave_translator:uav_byteenable
	wire         mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_readdatavalid;         // edid_ram_slave_translator:uav_readdatavalid -> mm_interconnect_0:edid_ram_slave_translator_avalon_universal_slave_0_readdatavalid
	wire         mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_lock;                  // mm_interconnect_0:edid_ram_slave_translator_avalon_universal_slave_0_lock -> edid_ram_slave_translator:uav_lock
	wire         mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_write;                 // mm_interconnect_0:edid_ram_slave_translator_avalon_universal_slave_0_write -> edid_ram_slave_translator:uav_write
	wire   [7:0] mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_writedata;             // mm_interconnect_0:edid_ram_slave_translator_avalon_universal_slave_0_writedata -> edid_ram_slave_translator:uav_writedata
	wire   [2:0] mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_burstcount;            // mm_interconnect_0:edid_ram_slave_translator_avalon_universal_slave_0_burstcount -> edid_ram_slave_translator:uav_burstcount
	wire  [31:0] mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_readdata;      // oc_i2c_master_av_slave_translator:uav_readdata -> mm_interconnect_0:oc_i2c_master_av_slave_translator_avalon_universal_slave_0_readdata
	wire         mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_waitrequest;   // oc_i2c_master_av_slave_translator:uav_waitrequest -> mm_interconnect_0:oc_i2c_master_av_slave_translator_avalon_universal_slave_0_waitrequest
	wire         mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_debugaccess;   // mm_interconnect_0:oc_i2c_master_av_slave_translator_avalon_universal_slave_0_debugaccess -> oc_i2c_master_av_slave_translator:uav_debugaccess
	wire   [4:0] mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_address;       // mm_interconnect_0:oc_i2c_master_av_slave_translator_avalon_universal_slave_0_address -> oc_i2c_master_av_slave_translator:uav_address
	wire         mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_read;          // mm_interconnect_0:oc_i2c_master_av_slave_translator_avalon_universal_slave_0_read -> oc_i2c_master_av_slave_translator:uav_read
	wire   [3:0] mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_byteenable;    // mm_interconnect_0:oc_i2c_master_av_slave_translator_avalon_universal_slave_0_byteenable -> oc_i2c_master_av_slave_translator:uav_byteenable
	wire         mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_readdatavalid; // oc_i2c_master_av_slave_translator:uav_readdatavalid -> mm_interconnect_0:oc_i2c_master_av_slave_translator_avalon_universal_slave_0_readdatavalid
	wire         mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_lock;          // mm_interconnect_0:oc_i2c_master_av_slave_translator_avalon_universal_slave_0_lock -> oc_i2c_master_av_slave_translator:uav_lock
	wire         mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_write;         // mm_interconnect_0:oc_i2c_master_av_slave_translator_avalon_universal_slave_0_write -> oc_i2c_master_av_slave_translator:uav_write
	wire  [31:0] mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_writedata;     // mm_interconnect_0:oc_i2c_master_av_slave_translator_avalon_universal_slave_0_writedata -> oc_i2c_master_av_slave_translator:uav_writedata
	wire   [2:0] mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_burstcount;    // mm_interconnect_0:oc_i2c_master_av_slave_translator_avalon_universal_slave_0_burstcount -> oc_i2c_master_av_slave_translator:uav_burstcount
	wire  [31:0] mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_readdata;                       // oc_i2c_master_ti:uav_readdata -> mm_interconnect_0:oc_i2c_master_ti_avalon_universal_slave_0_readdata
	wire         mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_waitrequest;                    // oc_i2c_master_ti:uav_waitrequest -> mm_interconnect_0:oc_i2c_master_ti_avalon_universal_slave_0_waitrequest
	wire         mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_debugaccess;                    // mm_interconnect_0:oc_i2c_master_ti_avalon_universal_slave_0_debugaccess -> oc_i2c_master_ti:uav_debugaccess
	wire   [4:0] mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_address;                        // mm_interconnect_0:oc_i2c_master_ti_avalon_universal_slave_0_address -> oc_i2c_master_ti:uav_address
	wire         mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_read;                           // mm_interconnect_0:oc_i2c_master_ti_avalon_universal_slave_0_read -> oc_i2c_master_ti:uav_read
	wire   [3:0] mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_byteenable;                     // mm_interconnect_0:oc_i2c_master_ti_avalon_universal_slave_0_byteenable -> oc_i2c_master_ti:uav_byteenable
	wire         mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_readdatavalid;                  // oc_i2c_master_ti:uav_readdatavalid -> mm_interconnect_0:oc_i2c_master_ti_avalon_universal_slave_0_readdatavalid
	wire         mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_lock;                           // mm_interconnect_0:oc_i2c_master_ti_avalon_universal_slave_0_lock -> oc_i2c_master_ti:uav_lock
	wire         mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_write;                          // mm_interconnect_0:oc_i2c_master_ti_avalon_universal_slave_0_write -> oc_i2c_master_ti:uav_write
	wire  [31:0] mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_writedata;                      // mm_interconnect_0:oc_i2c_master_ti_avalon_universal_slave_0_writedata -> oc_i2c_master_ti:uav_writedata
	wire   [2:0] mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_burstcount;                     // mm_interconnect_0:oc_i2c_master_ti_avalon_universal_slave_0_burstcount -> oc_i2c_master_ti:uav_burstcount
	wire  [31:0] mm_interconnect_0_sysid_qsys_0_control_slave_readdata;                                      // sysid_qsys_0:readdata -> mm_interconnect_0:sysid_qsys_0_control_slave_readdata
	wire   [0:0] mm_interconnect_0_sysid_qsys_0_control_slave_address;                                       // mm_interconnect_0:sysid_qsys_0_control_slave_address -> sysid_qsys_0:address
	wire  [31:0] mm_interconnect_0_cpu_debug_mem_slave_readdata;                                             // cpu:debug_mem_slave_readdata -> mm_interconnect_0:cpu_debug_mem_slave_readdata
	wire         mm_interconnect_0_cpu_debug_mem_slave_waitrequest;                                          // cpu:debug_mem_slave_waitrequest -> mm_interconnect_0:cpu_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_cpu_debug_mem_slave_debugaccess;                                          // mm_interconnect_0:cpu_debug_mem_slave_debugaccess -> cpu:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_cpu_debug_mem_slave_address;                                              // mm_interconnect_0:cpu_debug_mem_slave_address -> cpu:debug_mem_slave_address
	wire         mm_interconnect_0_cpu_debug_mem_slave_read;                                                 // mm_interconnect_0:cpu_debug_mem_slave_read -> cpu:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_cpu_debug_mem_slave_byteenable;                                           // mm_interconnect_0:cpu_debug_mem_slave_byteenable -> cpu:debug_mem_slave_byteenable
	wire         mm_interconnect_0_cpu_debug_mem_slave_write;                                                // mm_interconnect_0:cpu_debug_mem_slave_write -> cpu:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_cpu_debug_mem_slave_writedata;                                            // mm_interconnect_0:cpu_debug_mem_slave_writedata -> cpu:debug_mem_slave_writedata
	wire         mm_interconnect_0_cpu_ram_s1_chipselect;                                                    // mm_interconnect_0:cpu_ram_s1_chipselect -> cpu_ram:chipselect
	wire  [31:0] mm_interconnect_0_cpu_ram_s1_readdata;                                                      // cpu_ram:readdata -> mm_interconnect_0:cpu_ram_s1_readdata
	wire  [14:0] mm_interconnect_0_cpu_ram_s1_address;                                                       // mm_interconnect_0:cpu_ram_s1_address -> cpu_ram:address
	wire   [3:0] mm_interconnect_0_cpu_ram_s1_byteenable;                                                    // mm_interconnect_0:cpu_ram_s1_byteenable -> cpu_ram:byteenable
	wire         mm_interconnect_0_cpu_ram_s1_write;                                                         // mm_interconnect_0:cpu_ram_s1_write -> cpu_ram:write
	wire  [31:0] mm_interconnect_0_cpu_ram_s1_writedata;                                                     // mm_interconnect_0:cpu_ram_s1_writedata -> cpu_ram:writedata
	wire         mm_interconnect_0_cpu_ram_s1_clken;                                                         // mm_interconnect_0:cpu_ram_s1_clken -> cpu_ram:clken
	wire         mm_interconnect_0_edid_ram_access_pio_s1_chipselect;                                        // mm_interconnect_0:edid_ram_access_pio_s1_chipselect -> edid_ram_access_pio:chipselect
	wire  [31:0] mm_interconnect_0_edid_ram_access_pio_s1_readdata;                                          // edid_ram_access_pio:readdata -> mm_interconnect_0:edid_ram_access_pio_s1_readdata
	wire   [1:0] mm_interconnect_0_edid_ram_access_pio_s1_address;                                           // mm_interconnect_0:edid_ram_access_pio_s1_address -> edid_ram_access_pio:address
	wire         mm_interconnect_0_edid_ram_access_pio_s1_write;                                             // mm_interconnect_0:edid_ram_access_pio_s1_write -> edid_ram_access_pio:write_n
	wire  [31:0] mm_interconnect_0_edid_ram_access_pio_s1_writedata;                                         // mm_interconnect_0:edid_ram_access_pio_s1_writedata -> edid_ram_access_pio:writedata
	wire         mm_interconnect_0_measure_pio_s1_chipselect;                                                // mm_interconnect_0:measure_pio_s1_chipselect -> measure_pio:chipselect
	wire  [31:0] mm_interconnect_0_measure_pio_s1_readdata;                                                  // measure_pio:readdata -> mm_interconnect_0:measure_pio_s1_readdata
	wire   [1:0] mm_interconnect_0_measure_pio_s1_address;                                                   // mm_interconnect_0:measure_pio_s1_address -> measure_pio:address
	wire         mm_interconnect_0_measure_pio_s1_write;                                                     // mm_interconnect_0:measure_pio_s1_write -> measure_pio:write_n
	wire  [31:0] mm_interconnect_0_measure_pio_s1_writedata;                                                 // mm_interconnect_0:measure_pio_s1_writedata -> measure_pio:writedata
	wire         mm_interconnect_0_tx_os_pio_s1_chipselect;                                                  // mm_interconnect_0:tx_os_pio_s1_chipselect -> tx_os_pio:chipselect
	wire  [31:0] mm_interconnect_0_tx_os_pio_s1_readdata;                                                    // tx_os_pio:readdata -> mm_interconnect_0:tx_os_pio_s1_readdata
	wire   [1:0] mm_interconnect_0_tx_os_pio_s1_address;                                                     // mm_interconnect_0:tx_os_pio_s1_address -> tx_os_pio:address
	wire         mm_interconnect_0_tx_os_pio_s1_write;                                                       // mm_interconnect_0:tx_os_pio_s1_write -> tx_os_pio:write_n
	wire  [31:0] mm_interconnect_0_tx_os_pio_s1_writedata;                                                   // mm_interconnect_0:tx_os_pio_s1_writedata -> tx_os_pio:writedata
	wire         mm_interconnect_0_measure_valid_pio_s1_chipselect;                                          // mm_interconnect_0:measure_valid_pio_s1_chipselect -> measure_valid_pio:chipselect
	wire  [31:0] mm_interconnect_0_measure_valid_pio_s1_readdata;                                            // measure_valid_pio:readdata -> mm_interconnect_0:measure_valid_pio_s1_readdata
	wire   [1:0] mm_interconnect_0_measure_valid_pio_s1_address;                                             // mm_interconnect_0:measure_valid_pio_s1_address -> measure_valid_pio:address
	wire         mm_interconnect_0_measure_valid_pio_s1_write;                                               // mm_interconnect_0:measure_valid_pio_s1_write -> measure_valid_pio:write_n
	wire  [31:0] mm_interconnect_0_measure_valid_pio_s1_writedata;                                           // mm_interconnect_0:measure_valid_pio_s1_writedata -> measure_valid_pio:writedata
	wire         mm_interconnect_0_tx_rst_pll_pio_s1_chipselect;                                             // mm_interconnect_0:tx_rst_pll_pio_s1_chipselect -> tx_rst_pll_pio:chipselect
	wire  [31:0] mm_interconnect_0_tx_rst_pll_pio_s1_readdata;                                               // tx_rst_pll_pio:readdata -> mm_interconnect_0:tx_rst_pll_pio_s1_readdata
	wire   [1:0] mm_interconnect_0_tx_rst_pll_pio_s1_address;                                                // mm_interconnect_0:tx_rst_pll_pio_s1_address -> tx_rst_pll_pio:address
	wire         mm_interconnect_0_tx_rst_pll_pio_s1_write;                                                  // mm_interconnect_0:tx_rst_pll_pio_s1_write -> tx_rst_pll_pio:write_n
	wire  [31:0] mm_interconnect_0_tx_rst_pll_pio_s1_writedata;                                              // mm_interconnect_0:tx_rst_pll_pio_s1_writedata -> tx_rst_pll_pio:writedata
	wire         mm_interconnect_0_tx_rst_xcvr_pio_s1_chipselect;                                            // mm_interconnect_0:tx_rst_xcvr_pio_s1_chipselect -> tx_rst_xcvr_pio:chipselect
	wire  [31:0] mm_interconnect_0_tx_rst_xcvr_pio_s1_readdata;                                              // tx_rst_xcvr_pio:readdata -> mm_interconnect_0:tx_rst_xcvr_pio_s1_readdata
	wire   [1:0] mm_interconnect_0_tx_rst_xcvr_pio_s1_address;                                               // mm_interconnect_0:tx_rst_xcvr_pio_s1_address -> tx_rst_xcvr_pio:address
	wire         mm_interconnect_0_tx_rst_xcvr_pio_s1_write;                                                 // mm_interconnect_0:tx_rst_xcvr_pio_s1_write -> tx_rst_xcvr_pio:write_n
	wire  [31:0] mm_interconnect_0_tx_rst_xcvr_pio_s1_writedata;                                             // mm_interconnect_0:tx_rst_xcvr_pio_s1_writedata -> tx_rst_xcvr_pio:writedata
	wire         mm_interconnect_0_tmds_bit_clock_ratio_pio_s1_chipselect;                                   // mm_interconnect_0:tmds_bit_clock_ratio_pio_s1_chipselect -> tmds_bit_clock_ratio_pio:chipselect
	wire  [31:0] mm_interconnect_0_tmds_bit_clock_ratio_pio_s1_readdata;                                     // tmds_bit_clock_ratio_pio:readdata -> mm_interconnect_0:tmds_bit_clock_ratio_pio_s1_readdata
	wire   [1:0] mm_interconnect_0_tmds_bit_clock_ratio_pio_s1_address;                                      // mm_interconnect_0:tmds_bit_clock_ratio_pio_s1_address -> tmds_bit_clock_ratio_pio:address
	wire         mm_interconnect_0_tmds_bit_clock_ratio_pio_s1_write;                                        // mm_interconnect_0:tmds_bit_clock_ratio_pio_s1_write -> tmds_bit_clock_ratio_pio:write_n
	wire  [31:0] mm_interconnect_0_tmds_bit_clock_ratio_pio_s1_writedata;                                    // mm_interconnect_0:tmds_bit_clock_ratio_pio_s1_writedata -> tmds_bit_clock_ratio_pio:writedata
	wire         mm_interconnect_0_tx_iopll_waitrequest_pio_s1_chipselect;                                   // mm_interconnect_0:tx_iopll_waitrequest_pio_s1_chipselect -> tx_iopll_waitrequest_pio:chipselect
	wire  [31:0] mm_interconnect_0_tx_iopll_waitrequest_pio_s1_readdata;                                     // tx_iopll_waitrequest_pio:readdata -> mm_interconnect_0:tx_iopll_waitrequest_pio_s1_readdata
	wire   [1:0] mm_interconnect_0_tx_iopll_waitrequest_pio_s1_address;                                      // mm_interconnect_0:tx_iopll_waitrequest_pio_s1_address -> tx_iopll_waitrequest_pio:address
	wire         mm_interconnect_0_tx_iopll_waitrequest_pio_s1_write;                                        // mm_interconnect_0:tx_iopll_waitrequest_pio_s1_write -> tx_iopll_waitrequest_pio:write_n
	wire  [31:0] mm_interconnect_0_tx_iopll_waitrequest_pio_s1_writedata;                                    // mm_interconnect_0:tx_iopll_waitrequest_pio_s1_writedata -> tx_iopll_waitrequest_pio:writedata
	wire         mm_interconnect_0_tx_pll_waitrequest_pio_s1_chipselect;                                     // mm_interconnect_0:tx_pll_waitrequest_pio_s1_chipselect -> tx_pll_waitrequest_pio:chipselect
	wire  [31:0] mm_interconnect_0_tx_pll_waitrequest_pio_s1_readdata;                                       // tx_pll_waitrequest_pio:readdata -> mm_interconnect_0:tx_pll_waitrequest_pio_s1_readdata
	wire   [1:0] mm_interconnect_0_tx_pll_waitrequest_pio_s1_address;                                        // mm_interconnect_0:tx_pll_waitrequest_pio_s1_address -> tx_pll_waitrequest_pio:address
	wire         mm_interconnect_0_tx_pll_waitrequest_pio_s1_write;                                          // mm_interconnect_0:tx_pll_waitrequest_pio_s1_write -> tx_pll_waitrequest_pio:write_n
	wire  [31:0] mm_interconnect_0_tx_pll_waitrequest_pio_s1_writedata;                                      // mm_interconnect_0:tx_pll_waitrequest_pio_s1_writedata -> tx_pll_waitrequest_pio:writedata
	wire         mm_interconnect_0_tx_pma_ch_s1_chipselect;                                                  // mm_interconnect_0:tx_pma_ch_s1_chipselect -> tx_pma_ch:chipselect
	wire  [31:0] mm_interconnect_0_tx_pma_ch_s1_readdata;                                                    // tx_pma_ch:readdata -> mm_interconnect_0:tx_pma_ch_s1_readdata
	wire   [1:0] mm_interconnect_0_tx_pma_ch_s1_address;                                                     // mm_interconnect_0:tx_pma_ch_s1_address -> tx_pma_ch:address
	wire         mm_interconnect_0_tx_pma_ch_s1_write;                                                       // mm_interconnect_0:tx_pma_ch_s1_write -> tx_pma_ch:write_n
	wire  [31:0] mm_interconnect_0_tx_pma_ch_s1_writedata;                                                   // mm_interconnect_0:tx_pma_ch_s1_writedata -> tx_pma_ch:writedata
	wire         mm_interconnect_0_tx_pma_cal_busy_pio_s1_chipselect;                                        // mm_interconnect_0:tx_pma_cal_busy_pio_s1_chipselect -> tx_pma_cal_busy_pio:chipselect
	wire  [31:0] mm_interconnect_0_tx_pma_cal_busy_pio_s1_readdata;                                          // tx_pma_cal_busy_pio:readdata -> mm_interconnect_0:tx_pma_cal_busy_pio_s1_readdata
	wire   [1:0] mm_interconnect_0_tx_pma_cal_busy_pio_s1_address;                                           // mm_interconnect_0:tx_pma_cal_busy_pio_s1_address -> tx_pma_cal_busy_pio:address
	wire         mm_interconnect_0_tx_pma_cal_busy_pio_s1_write;                                             // mm_interconnect_0:tx_pma_cal_busy_pio_s1_write -> tx_pma_cal_busy_pio:write_n
	wire  [31:0] mm_interconnect_0_tx_pma_cal_busy_pio_s1_writedata;                                         // mm_interconnect_0:tx_pma_cal_busy_pio_s1_writedata -> tx_pma_cal_busy_pio:writedata
	wire         mm_interconnect_0_tx_rcfg_en_pio_s1_chipselect;                                             // mm_interconnect_0:tx_rcfg_en_pio_s1_chipselect -> tx_rcfg_en_pio:chipselect
	wire  [31:0] mm_interconnect_0_tx_rcfg_en_pio_s1_readdata;                                               // tx_rcfg_en_pio:readdata -> mm_interconnect_0:tx_rcfg_en_pio_s1_readdata
	wire   [1:0] mm_interconnect_0_tx_rcfg_en_pio_s1_address;                                                // mm_interconnect_0:tx_rcfg_en_pio_s1_address -> tx_rcfg_en_pio:address
	wire         mm_interconnect_0_tx_rcfg_en_pio_s1_write;                                                  // mm_interconnect_0:tx_rcfg_en_pio_s1_write -> tx_rcfg_en_pio:write_n
	wire  [31:0] mm_interconnect_0_tx_rcfg_en_pio_s1_writedata;                                              // mm_interconnect_0:tx_rcfg_en_pio_s1_writedata -> tx_rcfg_en_pio:writedata
	wire         mm_interconnect_0_tx_pma_waitrequest_pio_s1_chipselect;                                     // mm_interconnect_0:tx_pma_waitrequest_pio_s1_chipselect -> tx_pma_waitrequest_pio:chipselect
	wire  [31:0] mm_interconnect_0_tx_pma_waitrequest_pio_s1_readdata;                                       // tx_pma_waitrequest_pio:readdata -> mm_interconnect_0:tx_pma_waitrequest_pio_s1_readdata
	wire   [1:0] mm_interconnect_0_tx_pma_waitrequest_pio_s1_address;                                        // mm_interconnect_0:tx_pma_waitrequest_pio_s1_address -> tx_pma_waitrequest_pio:address
	wire         mm_interconnect_0_tx_pma_waitrequest_pio_s1_write;                                          // mm_interconnect_0:tx_pma_waitrequest_pio_s1_write -> tx_pma_waitrequest_pio:write_n
	wire  [31:0] mm_interconnect_0_tx_pma_waitrequest_pio_s1_writedata;                                      // mm_interconnect_0:tx_pma_waitrequest_pio_s1_writedata -> tx_pma_waitrequest_pio:writedata
	wire         mm_interconnect_0_wd_timer_s1_chipselect;                                                   // mm_interconnect_0:wd_timer_s1_chipselect -> wd_timer:chipselect
	wire  [15:0] mm_interconnect_0_wd_timer_s1_readdata;                                                     // wd_timer:readdata -> mm_interconnect_0:wd_timer_s1_readdata
	wire   [2:0] mm_interconnect_0_wd_timer_s1_address;                                                      // mm_interconnect_0:wd_timer_s1_address -> wd_timer:address
	wire         mm_interconnect_0_wd_timer_s1_write;                                                        // mm_interconnect_0:wd_timer_s1_write -> wd_timer:write_n
	wire  [15:0] mm_interconnect_0_wd_timer_s1_writedata;                                                    // mm_interconnect_0:wd_timer_s1_writedata -> wd_timer:writedata
	wire         mm_interconnect_0_tx_hpd_req_pio_s1_chipselect;                                             // mm_interconnect_0:tx_hpd_req_pio_s1_chipselect -> tx_hpd_req_pio:chipselect
	wire  [31:0] mm_interconnect_0_tx_hpd_req_pio_s1_readdata;                                               // tx_hpd_req_pio:readdata -> mm_interconnect_0:tx_hpd_req_pio_s1_readdata
	wire   [1:0] mm_interconnect_0_tx_hpd_req_pio_s1_address;                                                // mm_interconnect_0:tx_hpd_req_pio_s1_address -> tx_hpd_req_pio:address
	wire         mm_interconnect_0_tx_hpd_req_pio_s1_write;                                                  // mm_interconnect_0:tx_hpd_req_pio_s1_write -> tx_hpd_req_pio:write_n
	wire  [31:0] mm_interconnect_0_tx_hpd_req_pio_s1_writedata;                                              // mm_interconnect_0:tx_hpd_req_pio_s1_writedata -> tx_hpd_req_pio:writedata
	wire         mm_interconnect_0_tx_hpd_ack_pio_s1_chipselect;                                             // mm_interconnect_0:tx_hpd_ack_pio_s1_chipselect -> tx_hpd_ack_pio:chipselect
	wire  [31:0] mm_interconnect_0_tx_hpd_ack_pio_s1_readdata;                                               // tx_hpd_ack_pio:readdata -> mm_interconnect_0:tx_hpd_ack_pio_s1_readdata
	wire   [1:0] mm_interconnect_0_tx_hpd_ack_pio_s1_address;                                                // mm_interconnect_0:tx_hpd_ack_pio_s1_address -> tx_hpd_ack_pio:address
	wire         mm_interconnect_0_tx_hpd_ack_pio_s1_write;                                                  // mm_interconnect_0:tx_hpd_ack_pio_s1_write -> tx_hpd_ack_pio:write_n
	wire  [31:0] mm_interconnect_0_tx_hpd_ack_pio_s1_writedata;                                              // mm_interconnect_0:tx_hpd_ack_pio_s1_writedata -> tx_hpd_ack_pio:writedata
	wire         mm_interconnect_0_color_depth_pio_s1_chipselect;                                            // mm_interconnect_0:color_depth_pio_s1_chipselect -> color_depth_pio:chipselect
	wire  [31:0] mm_interconnect_0_color_depth_pio_s1_readdata;                                              // color_depth_pio:readdata -> mm_interconnect_0:color_depth_pio_s1_readdata
	wire   [1:0] mm_interconnect_0_color_depth_pio_s1_address;                                               // mm_interconnect_0:color_depth_pio_s1_address -> color_depth_pio:address
	wire         mm_interconnect_0_color_depth_pio_s1_write;                                                 // mm_interconnect_0:color_depth_pio_s1_write -> color_depth_pio:write_n
	wire  [31:0] mm_interconnect_0_color_depth_pio_s1_writedata;                                             // mm_interconnect_0:color_depth_pio_s1_writedata -> color_depth_pio:writedata
	wire         irq_mapper_receiver0_irq;                                                                   // jtag_uart_0:av_irq -> irq_mapper:receiver0_irq
	wire         irq_mapper_receiver1_irq;                                                                   // tmds_bit_clock_ratio_pio:irq -> irq_mapper:receiver1_irq
	wire         irq_mapper_receiver2_irq;                                                                   // tx_iopll_waitrequest_pio:irq -> irq_mapper:receiver2_irq
	wire         irq_mapper_receiver3_irq;                                                                   // tx_pll_waitrequest_pio:irq -> irq_mapper:receiver3_irq
	wire         irq_mapper_receiver4_irq;                                                                   // measure_valid_pio:irq -> irq_mapper:receiver4_irq
	wire         irq_mapper_receiver5_irq;                                                                   // measure_pio:irq -> irq_mapper:receiver5_irq
	wire         irq_mapper_receiver6_irq;                                                                   // wd_timer:irq -> irq_mapper:receiver6_irq
	wire         irq_mapper_receiver7_irq;                                                                   // tx_hpd_req_pio:irq -> irq_mapper:receiver7_irq
	wire         irq_mapper_receiver8_irq;                                                                   // color_depth_pio:irq -> irq_mapper:receiver8_irq
	wire         irq_mapper_receiver9_irq;                                                                   // tx_pma_waitrequest_pio:irq -> irq_mapper:receiver9_irq
	wire         irq_mapper_receiver10_irq;                                                                  // tx_pma_cal_busy_pio:irq -> irq_mapper:receiver10_irq
	wire  [31:0] cpu_irq_irq;                                                                                // irq_mapper:sender_irq -> cpu:irq
	wire         rst_controller_reset_out_reset;                                                             // rst_controller:reset_out -> [color_depth_pio:reset_n, cpu_ram:reset, edid_ram_access_pio:reset_n, edid_ram_slave_translator:reset, jtag_uart_0:rst_n, measure_pio:reset_n, measure_valid_pio:reset_n, mm_interconnect_0:jtag_uart_0_reset_reset_bridge_in_reset_reset, oc_i2c_master_av_slave_translator:reset, oc_i2c_master_ti:reset, rst_translator:in_reset, sysid_qsys_0:reset_n, tmds_bit_clock_ratio_pio:reset_n, tx_hpd_ack_pio:reset_n, tx_hpd_req_pio:reset_n, tx_iopll_rcfg_mgmt_translator:reset, tx_iopll_waitrequest_pio:reset_n, tx_os_pio:reset_n, tx_pll_rcfg_mgmt_translator:reset, tx_pll_waitrequest_pio:reset_n, tx_pma_cal_busy_pio:reset_n, tx_pma_ch:reset_n, tx_pma_rcfg_mgmt_translator:reset, tx_pma_waitrequest_pio:reset_n, tx_rcfg_en_pio:reset_n, tx_rst_pll_pio:reset_n, tx_rst_xcvr_pio:reset_n, wd_timer:reset_n]
	wire         rst_controller_reset_out_reset_req;                                                         // rst_controller:reset_req -> [cpu_ram:reset_req, rst_translator:reset_req_in]
	wire         cpu_clk_clk_reset_reset;                                                                    // cpu_clk:reset_n_out -> [rst_controller:reset_in0, rst_controller_001:reset_in0]
	wire         rst_controller_001_reset_out_reset;                                                         // rst_controller_001:reset_out -> [cpu:reset_n, irq_mapper:reset, mm_interconnect_0:cpu_reset_reset_bridge_in_reset_reset]
	wire         rst_controller_001_reset_out_reset_req;                                                     // rst_controller_001:reset_req -> [cpu:reset_req, rst_translator_001:reset_req_in]
	wire         cpu_debug_reset_request_reset;                                                              // cpu:debug_reset_request -> rst_controller_001:reset_in1

	nios_color_depth_pio color_depth_pio (
		.clk        (cpu_clk_clk_clk),                                 //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                 //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_color_depth_pio_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_color_depth_pio_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_color_depth_pio_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_color_depth_pio_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_color_depth_pio_s1_readdata),   //  output,  width = 32,                    .readdata
		.in_port    (color_depth_pio_external_connection_export),      //   input,   width = 2, external_connection.export
		.irq        (irq_mapper_receiver8_irq)                         //  output,   width = 1,                 irq.irq
	);

	nios_cpu cpu (
		.clk                                 (cpu_clk_clk_clk),                                   //   input,   width = 1,                       clk.clk
		.reset_n                             (~rst_controller_001_reset_out_reset),               //   input,   width = 1,                     reset.reset_n
		.reset_req                           (rst_controller_001_reset_out_reset_req),            //   input,   width = 1,                          .reset_req
		.d_address                           (cpu_data_master_address),                           //  output,  width = 19,               data_master.address
		.d_byteenable                        (cpu_data_master_byteenable),                        //  output,   width = 4,                          .byteenable
		.d_read                              (cpu_data_master_read),                              //  output,   width = 1,                          .read
		.d_readdata                          (cpu_data_master_readdata),                          //   input,  width = 32,                          .readdata
		.d_waitrequest                       (cpu_data_master_waitrequest),                       //   input,   width = 1,                          .waitrequest
		.d_write                             (cpu_data_master_write),                             //  output,   width = 1,                          .write
		.d_writedata                         (cpu_data_master_writedata),                         //  output,  width = 32,                          .writedata
		.debug_mem_slave_debugaccess_to_roms (cpu_data_master_debugaccess),                       //  output,   width = 1,                          .debugaccess
		.i_address                           (cpu_instruction_master_address),                    //  output,  width = 19,        instruction_master.address
		.i_read                              (cpu_instruction_master_read),                       //  output,   width = 1,                          .read
		.i_readdata                          (cpu_instruction_master_readdata),                   //   input,  width = 32,                          .readdata
		.i_waitrequest                       (cpu_instruction_master_waitrequest),                //   input,   width = 1,                          .waitrequest
		.irq                                 (cpu_irq_irq),                                       //   input,  width = 32,                       irq.irq
		.debug_reset_request                 (cpu_debug_reset_request_reset),                     //  output,   width = 1,       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_cpu_debug_mem_slave_address),     //   input,   width = 9,           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_cpu_debug_mem_slave_byteenable),  //   input,   width = 4,                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_cpu_debug_mem_slave_debugaccess), //   input,   width = 1,                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_cpu_debug_mem_slave_read),        //   input,   width = 1,                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_cpu_debug_mem_slave_readdata),    //  output,  width = 32,                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_cpu_debug_mem_slave_waitrequest), //  output,   width = 1,                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_cpu_debug_mem_slave_write),       //   input,   width = 1,                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_cpu_debug_mem_slave_writedata),   //   input,  width = 32,                          .writedata
		.dummy_ci_port                       ()                                                   //  output,   width = 1, custom_instruction_master.readra
	);

	nios_cpu_clk cpu_clk_inst (
		.in_clk      (cpu_clk),                 //   input,  width = 1,       clk_in.clk
		.reset_n     (cpu_clk_reset_n),         //   input,  width = 1, clk_in_reset.reset_n
		.clk_out     (cpu_clk_clk_clk),         //  output,  width = 1,          clk.clk
		.reset_n_out (cpu_clk_clk_reset_reset)  //  output,  width = 1,    clk_reset.reset_n
	);

	nios_cpu_ram cpu_ram (
		.clk        (cpu_clk_clk_clk),                         //   input,   width = 1,   clk1.clk
		.address    (mm_interconnect_0_cpu_ram_s1_address),    //   input,  width = 15,     s1.address
		.clken      (mm_interconnect_0_cpu_ram_s1_clken),      //   input,   width = 1,       .clken
		.chipselect (mm_interconnect_0_cpu_ram_s1_chipselect), //   input,   width = 1,       .chipselect
		.write      (mm_interconnect_0_cpu_ram_s1_write),      //   input,   width = 1,       .write
		.readdata   (mm_interconnect_0_cpu_ram_s1_readdata),   //  output,  width = 32,       .readdata
		.writedata  (mm_interconnect_0_cpu_ram_s1_writedata),  //   input,  width = 32,       .writedata
		.byteenable (mm_interconnect_0_cpu_ram_s1_byteenable), //   input,   width = 4,       .byteenable
		.reset      (rst_controller_reset_out_reset),          //   input,   width = 1, reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req)       //   input,   width = 1,       .reset_req
	);

	nios_edid_ram_access_pio edid_ram_access_pio (
		.clk        (cpu_clk_clk_clk),                                     //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                     //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_edid_ram_access_pio_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_edid_ram_access_pio_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_edid_ram_access_pio_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_edid_ram_access_pio_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_edid_ram_access_pio_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (edid_ram_access_pio_external_connection_export)       //  output,   width = 1, external_connection.export
	);

	nios_edid_ram_slave_translator edid_ram_slave_translator (
		.clk               (cpu_clk_clk_clk),                                                                    //   input,   width = 1,                      clk.clk
		.reset             (rst_controller_reset_out_reset),                                                     //   input,   width = 1,                    reset.reset
		.uav_address       (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_address),       //   input,  width = 11, avalon_universal_slave_0.address
		.uav_burstcount    (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read          (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_read),          //   input,   width = 1,                         .read
		.uav_write         (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest   (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable    (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_byteenable),    //   input,   width = 1,                         .byteenable
		.uav_readdata      (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_readdata),      //  output,   width = 8,                         .readdata
		.uav_writedata     (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_writedata),     //   input,   width = 8,                         .writedata
		.uav_lock          (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess   (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address        (edid_ram_slave_translator_address),                                                  //  output,   width = 8,      avalon_anti_slave_0.address
		.av_write          (edid_ram_slave_translator_write),                                                    //  output,   width = 1,                         .write
		.av_read           (edid_ram_slave_translator_read),                                                     //  output,   width = 1,                         .read
		.av_readdata       (edid_ram_slave_translator_readdata),                                                 //   input,   width = 8,                         .readdata
		.av_writedata      (edid_ram_slave_translator_writedata),                                                //  output,   width = 8,                         .writedata
		.av_waitrequest    (edid_ram_slave_translator_waitrequest)                                               //   input,   width = 1,                         .waitrequest
	);

	nios_jtag_uart_0 jtag_uart_0 (
		.clk            (cpu_clk_clk_clk),                                             //   input,   width = 1,               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                             //   input,   width = 1,             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),  //   input,   width = 1, avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),     //   input,   width = 1,                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),       //   input,   width = 1,                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),    //  output,  width = 32,                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),      //   input,   width = 1,                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),   //   input,  width = 32,                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest), //  output,   width = 1,                  .waitrequest
		.av_irq         (irq_mapper_receiver0_irq)                                     //  output,   width = 1,               irq.irq
	);

	nios_measure_pio measure_pio (
		.clk        (cpu_clk_clk_clk),                             //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),             //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_measure_pio_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_measure_pio_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_measure_pio_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_measure_pio_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_measure_pio_s1_readdata),   //  output,  width = 32,                    .readdata
		.in_port    (measure_pio_external_connection_export),      //   input,  width = 24, external_connection.export
		.irq        (irq_mapper_receiver5_irq)                     //  output,   width = 1,                 irq.irq
	);

	nios_measure_valid_pio measure_valid_pio (
		.clk        (cpu_clk_clk_clk),                                   //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                   //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_measure_valid_pio_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_measure_valid_pio_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_measure_valid_pio_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_measure_valid_pio_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_measure_valid_pio_s1_readdata),   //  output,  width = 32,                    .readdata
		.in_port    (measure_valid_pio_external_connection_export),      //   input,   width = 1, external_connection.export
		.irq        (irq_mapper_receiver4_irq)                           //  output,   width = 1,                 irq.irq
	);

	nios_oc_i2c_master_av_slave_translator oc_i2c_master_av_slave_translator (
		.clk               (cpu_clk_clk_clk),                                                                            //   input,   width = 1,                      clk.clk
		.reset             (rst_controller_reset_out_reset),                                                             //   input,   width = 1,                    reset.reset
		.uav_address       (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_address),       //   input,   width = 5, avalon_universal_slave_0.address
		.uav_burstcount    (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read          (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_read),          //   input,   width = 1,                         .read
		.uav_write         (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest   (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable    (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata      (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata     (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock          (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess   (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address        (oc_i2c_master_av_slave_translator_avalon_anti_slave_0_address),                              //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write          (oc_i2c_master_av_slave_translator_avalon_anti_slave_0_write),                                //  output,   width = 1,                         .write
		.av_readdata       (oc_i2c_master_av_slave_translator_avalon_anti_slave_0_readdata),                             //   input,  width = 32,                         .readdata
		.av_writedata      (oc_i2c_master_av_slave_translator_avalon_anti_slave_0_writedata),                            //  output,  width = 32,                         .writedata
		.av_waitrequest    (oc_i2c_master_av_slave_translator_avalon_anti_slave_0_waitrequest),                          //   input,   width = 1,                         .waitrequest
		.av_chipselect     (oc_i2c_master_av_slave_translator_avalon_anti_slave_0_chipselect)                            //  output,   width = 1,                         .chipselect
	);

	nios_oc_i2c_master_ti oc_i2c_master_ti (
		.clk               (cpu_clk_clk_clk),                                                           //   input,   width = 1,                      clk.clk
		.reset             (rst_controller_reset_out_reset),                                            //   input,   width = 1,                    reset.reset
		.uav_address       (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_address),       //   input,   width = 5, avalon_universal_slave_0.address
		.uav_burstcount    (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read          (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_read),          //   input,   width = 1,                         .read
		.uav_write         (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest   (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable    (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata      (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata     (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock          (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess   (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address        (oc_i2c_master_ti_avalon_anti_slave_address),                                //  output,   width = 3,      avalon_anti_slave_0.address
		.av_write          (oc_i2c_master_ti_avalon_anti_slave_write),                                  //  output,   width = 1,                         .write
		.av_readdata       (oc_i2c_master_ti_avalon_anti_slave_readdata),                               //   input,  width = 32,                         .readdata
		.av_writedata      (oc_i2c_master_ti_avalon_anti_slave_writedata),                              //  output,  width = 32,                         .writedata
		.av_waitrequest    (oc_i2c_master_ti_avalon_anti_slave_waitrequest),                            //   input,   width = 1,                         .waitrequest
		.av_chipselect     (oc_i2c_master_ti_avalon_anti_slave_chipselect)                              //  output,   width = 1,                         .chipselect
	);

	nios_sysid_qsys_0 sysid_qsys_0 (
		.clock    (cpu_clk_clk_clk),                                       //   input,   width = 1,           clk.clk
		.reset_n  (~rst_controller_reset_out_reset),                       //   input,   width = 1,         reset.reset_n
		.readdata (mm_interconnect_0_sysid_qsys_0_control_slave_readdata), //  output,  width = 32, control_slave.readdata
		.address  (mm_interconnect_0_sysid_qsys_0_control_slave_address)   //   input,   width = 1,              .address
	);

	nios_tmds_bit_clock_ratio_pio tmds_bit_clock_ratio_pio (
		.clk        (cpu_clk_clk_clk),                                          //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                          //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_tmds_bit_clock_ratio_pio_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_tmds_bit_clock_ratio_pio_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_tmds_bit_clock_ratio_pio_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_tmds_bit_clock_ratio_pio_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_tmds_bit_clock_ratio_pio_s1_readdata),   //  output,  width = 32,                    .readdata
		.in_port    (tmds_bit_clock_ratio_pio_external_connection_export),      //   input,   width = 1, external_connection.export
		.irq        (irq_mapper_receiver1_irq)                                  //  output,   width = 1,                 irq.irq
	);

	nios_tx_hpd_ack_pio tx_hpd_ack_pio (
		.clk        (cpu_clk_clk_clk),                                //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_tx_hpd_ack_pio_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_tx_hpd_ack_pio_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_tx_hpd_ack_pio_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_tx_hpd_ack_pio_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_tx_hpd_ack_pio_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (tx_hpd_ack_pio_external_connection_export)       //  output,   width = 1, external_connection.export
	);

	nios_tx_hpd_req_pio tx_hpd_req_pio (
		.clk        (cpu_clk_clk_clk),                                //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_tx_hpd_req_pio_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_tx_hpd_req_pio_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_tx_hpd_req_pio_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_tx_hpd_req_pio_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_tx_hpd_req_pio_s1_readdata),   //  output,  width = 32,                    .readdata
		.in_port    (tx_hpd_req_pio_external_connection_export),      //   input,   width = 1, external_connection.export
		.irq        (irq_mapper_receiver7_irq)                        //  output,   width = 1,                 irq.irq
	);

	nios_tx_iopll_rcfg_mgmt_translator tx_iopll_rcfg_mgmt_translator (
		.clk               (cpu_clk_clk_clk),                                                                        //   input,   width = 1,                      clk.clk
		.reset             (rst_controller_reset_out_reset),                                                         //   input,   width = 1,                    reset.reset
		.uav_address       (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_address),       //   input,  width = 12, avalon_universal_slave_0.address
		.uav_burstcount    (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read          (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_read),          //   input,   width = 1,                         .read
		.uav_write         (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest   (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable    (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata      (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata     (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock          (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess   (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address        (tx_iopll_rcfg_mgmt_translator_avalon_anti_slave_address),                                //  output,   width = 9,      avalon_anti_slave_0.address
		.av_write          (tx_iopll_rcfg_mgmt_translator_avalon_anti_slave_write),                                  //  output,   width = 1,                         .write
		.av_read           (tx_iopll_rcfg_mgmt_translator_avalon_anti_slave_read),                                   //  output,   width = 1,                         .read
		.av_readdata       (tx_iopll_rcfg_mgmt_translator_avalon_anti_slave_readdata),                               //   input,  width = 32,                         .readdata
		.av_writedata      (tx_iopll_rcfg_mgmt_translator_avalon_anti_slave_writedata)                               //  output,  width = 32,                         .writedata
	);

	nios_tx_iopll_waitrequest_pio tx_iopll_waitrequest_pio (
		.clk        (cpu_clk_clk_clk),                                          //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                          //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_tx_iopll_waitrequest_pio_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_tx_iopll_waitrequest_pio_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_tx_iopll_waitrequest_pio_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_tx_iopll_waitrequest_pio_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_tx_iopll_waitrequest_pio_s1_readdata),   //  output,  width = 32,                    .readdata
		.in_port    (tx_iopll_waitrequest_pio_external_connection_export),      //   input,   width = 1, external_connection.export
		.irq        (irq_mapper_receiver2_irq)                                  //  output,   width = 1,                 irq.irq
	);

	nios_tx_os_pio tx_os_pio (
		.clk        (cpu_clk_clk_clk),                           //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),           //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_tx_os_pio_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_tx_os_pio_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_tx_os_pio_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_tx_os_pio_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_tx_os_pio_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (tx_os_pio_external_connection_export)       //  output,   width = 2, external_connection.export
	);

	nios_tx_pll_rcfg_mgmt_translator tx_pll_rcfg_mgmt_translator (
		.clk               (cpu_clk_clk_clk),                                                                      //   input,   width = 1,                      clk.clk
		.reset             (rst_controller_reset_out_reset),                                                       //   input,   width = 1,                    reset.reset
		.uav_address       (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_address),       //   input,  width = 12, avalon_universal_slave_0.address
		.uav_burstcount    (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read          (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_read),          //   input,   width = 1,                         .read
		.uav_write         (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest   (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable    (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata      (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata     (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock          (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess   (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address        (tx_pll_rcfg_mgmt_translator_avalon_anti_slave_address),                                //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write          (tx_pll_rcfg_mgmt_translator_avalon_anti_slave_write),                                  //  output,   width = 1,                         .write
		.av_read           (tx_pll_rcfg_mgmt_translator_avalon_anti_slave_read),                                   //  output,   width = 1,                         .read
		.av_readdata       (tx_pll_rcfg_mgmt_translator_avalon_anti_slave_readdata),                               //   input,  width = 32,                         .readdata
		.av_writedata      (tx_pll_rcfg_mgmt_translator_avalon_anti_slave_writedata),                              //  output,  width = 32,                         .writedata
		.av_waitrequest    (tx_pll_rcfg_mgmt_translator_avalon_anti_slave_waitrequest)                             //   input,   width = 1,                         .waitrequest
	);

	nios_tx_pll_waitrequest_pio tx_pll_waitrequest_pio (
		.clk        (cpu_clk_clk_clk),                                        //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                        //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_tx_pll_waitrequest_pio_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_tx_pll_waitrequest_pio_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_tx_pll_waitrequest_pio_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_tx_pll_waitrequest_pio_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_tx_pll_waitrequest_pio_s1_readdata),   //  output,  width = 32,                    .readdata
		.in_port    (tx_pll_waitrequest_pio_external_connection_export),      //   input,   width = 1, external_connection.export
		.irq        (irq_mapper_receiver3_irq)                                //  output,   width = 1,                 irq.irq
	);

	nios_tx_pma_cal_busy_pio tx_pma_cal_busy_pio (
		.clk        (cpu_clk_clk_clk),                                     //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                     //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_tx_pma_cal_busy_pio_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_tx_pma_cal_busy_pio_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_tx_pma_cal_busy_pio_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_tx_pma_cal_busy_pio_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_tx_pma_cal_busy_pio_s1_readdata),   //  output,  width = 32,                    .readdata
		.in_port    (tx_pma_cal_busy_pio_external_connection_export),      //   input,   width = 1, external_connection.export
		.irq        (irq_mapper_receiver10_irq)                            //  output,   width = 1,                 irq.irq
	);

	nios_tx_pma_ch tx_pma_ch (
		.clk        (cpu_clk_clk_clk),                           //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),           //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_tx_pma_ch_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_tx_pma_ch_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_tx_pma_ch_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_tx_pma_ch_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_tx_pma_ch_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (tx_pma_ch_export)                           //  output,   width = 2, external_connection.export
	);

	nios_tx_pma_rcfg_mgmt_translator tx_pma_rcfg_mgmt_translator (
		.clk               (cpu_clk_clk_clk),                                                                      //   input,   width = 1,                      clk.clk
		.reset             (rst_controller_reset_out_reset),                                                       //   input,   width = 1,                    reset.reset
		.uav_address       (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_address),       //   input,  width = 14, avalon_universal_slave_0.address
		.uav_burstcount    (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read          (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_read),          //   input,   width = 1,                         .read
		.uav_write         (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest   (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable    (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata      (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata     (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock          (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess   (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address        (tx_pma_rcfg_mgmt_translator_avalon_anti_slave_address),                                //  output,  width = 12,      avalon_anti_slave_0.address
		.av_write          (tx_pma_rcfg_mgmt_translator_avalon_anti_slave_write),                                  //  output,   width = 1,                         .write
		.av_read           (tx_pma_rcfg_mgmt_translator_avalon_anti_slave_read),                                   //  output,   width = 1,                         .read
		.av_readdata       (tx_pma_rcfg_mgmt_translator_avalon_anti_slave_readdata),                               //   input,  width = 32,                         .readdata
		.av_writedata      (tx_pma_rcfg_mgmt_translator_avalon_anti_slave_writedata),                              //  output,  width = 32,                         .writedata
		.av_waitrequest    (tx_pma_rcfg_mgmt_translator_avalon_anti_slave_waitrequest)                             //   input,   width = 1,                         .waitrequest
	);

	nios_tx_pma_waitrequest_pio tx_pma_waitrequest_pio (
		.clk        (cpu_clk_clk_clk),                                        //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                        //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_tx_pma_waitrequest_pio_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_tx_pma_waitrequest_pio_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_tx_pma_waitrequest_pio_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_tx_pma_waitrequest_pio_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_tx_pma_waitrequest_pio_s1_readdata),   //  output,  width = 32,                    .readdata
		.in_port    (tx_pma_waitrequest_pio_external_connection_export),      //   input,   width = 1, external_connection.export
		.irq        (irq_mapper_receiver9_irq)                                //  output,   width = 1,                 irq.irq
	);

	nios_tx_rcfg_en_pio tx_rcfg_en_pio (
		.clk        (cpu_clk_clk_clk),                                //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_tx_rcfg_en_pio_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_tx_rcfg_en_pio_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_tx_rcfg_en_pio_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_tx_rcfg_en_pio_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_tx_rcfg_en_pio_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (tx_rcfg_en_pio_external_connection_export)       //  output,   width = 1, external_connection.export
	);

	nios_tx_rst_pll_pio tx_rst_pll_pio (
		.clk        (cpu_clk_clk_clk),                                //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_tx_rst_pll_pio_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_tx_rst_pll_pio_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_tx_rst_pll_pio_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_tx_rst_pll_pio_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_tx_rst_pll_pio_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (tx_rst_pll_pio_external_connection_export)       //  output,   width = 1, external_connection.export
	);

	nios_tx_rst_xcvr_pio tx_rst_xcvr_pio (
		.clk        (cpu_clk_clk_clk),                                 //   input,   width = 1,                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                 //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_0_tx_rst_xcvr_pio_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_0_tx_rst_xcvr_pio_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_0_tx_rst_xcvr_pio_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_0_tx_rst_xcvr_pio_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_0_tx_rst_xcvr_pio_s1_readdata),   //  output,  width = 32,                    .readdata
		.out_port   (tx_rst_xcvr_pio_external_connection_export)       //  output,   width = 1, external_connection.export
	);

	nios_wd_timer wd_timer (
		.clk          (cpu_clk_clk_clk),                          //   input,   width = 1,          clk.clk
		.reset_n      (~rst_controller_reset_out_reset),          //   input,   width = 1,        reset.reset_n
		.address      (mm_interconnect_0_wd_timer_s1_address),    //   input,   width = 3,           s1.address
		.writedata    (mm_interconnect_0_wd_timer_s1_writedata),  //   input,  width = 16,             .writedata
		.readdata     (mm_interconnect_0_wd_timer_s1_readdata),   //  output,  width = 16,             .readdata
		.chipselect   (mm_interconnect_0_wd_timer_s1_chipselect), //   input,   width = 1,             .chipselect
		.write_n      (~mm_interconnect_0_wd_timer_s1_write),     //   input,   width = 1,             .write_n
		.irq          (irq_mapper_receiver6_irq),                 //  output,   width = 1,          irq.irq
		.resetrequest (wd_timer_resetrequest_reset)               //  output,   width = 1, resetrequest.reset
	);

	nios_altera_mm_interconnect_181_ojsboai mm_interconnect_0 (
		.cpu_data_master_address                                                  (cpu_data_master_address),                                                                    //   input,  width = 19,                                            cpu_data_master.address
		.cpu_data_master_waitrequest                                              (cpu_data_master_waitrequest),                                                                //  output,   width = 1,                                                           .waitrequest
		.cpu_data_master_byteenable                                               (cpu_data_master_byteenable),                                                                 //   input,   width = 4,                                                           .byteenable
		.cpu_data_master_read                                                     (cpu_data_master_read),                                                                       //   input,   width = 1,                                                           .read
		.cpu_data_master_readdata                                                 (cpu_data_master_readdata),                                                                   //  output,  width = 32,                                                           .readdata
		.cpu_data_master_write                                                    (cpu_data_master_write),                                                                      //   input,   width = 1,                                                           .write
		.cpu_data_master_writedata                                                (cpu_data_master_writedata),                                                                  //   input,  width = 32,                                                           .writedata
		.cpu_data_master_debugaccess                                              (cpu_data_master_debugaccess),                                                                //   input,   width = 1,                                                           .debugaccess
		.cpu_instruction_master_address                                           (cpu_instruction_master_address),                                                             //   input,  width = 19,                                     cpu_instruction_master.address
		.cpu_instruction_master_waitrequest                                       (cpu_instruction_master_waitrequest),                                                         //  output,   width = 1,                                                           .waitrequest
		.cpu_instruction_master_read                                              (cpu_instruction_master_read),                                                                //   input,   width = 1,                                                           .read
		.cpu_instruction_master_readdata                                          (cpu_instruction_master_readdata),                                                            //  output,  width = 32,                                                           .readdata
		.jtag_uart_0_avalon_jtag_slave_address                                    (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),                                    //  output,   width = 1,                              jtag_uart_0_avalon_jtag_slave.address
		.jtag_uart_0_avalon_jtag_slave_write                                      (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),                                      //  output,   width = 1,                                                           .write
		.jtag_uart_0_avalon_jtag_slave_read                                       (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),                                       //  output,   width = 1,                                                           .read
		.jtag_uart_0_avalon_jtag_slave_readdata                                   (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),                                   //   input,  width = 32,                                                           .readdata
		.jtag_uart_0_avalon_jtag_slave_writedata                                  (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),                                  //  output,  width = 32,                                                           .writedata
		.jtag_uart_0_avalon_jtag_slave_waitrequest                                (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest),                                //   input,   width = 1,                                                           .waitrequest
		.jtag_uart_0_avalon_jtag_slave_chipselect                                 (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),                                 //  output,   width = 1,                                                           .chipselect
		.tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_address           (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_address),           //  output,  width = 12,     tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0.address
		.tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_write             (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_write),             //  output,   width = 1,                                                           .write
		.tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_read              (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_read),              //  output,   width = 1,                                                           .read
		.tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_readdata          (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_readdata),          //   input,  width = 32,                                                           .readdata
		.tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_writedata         (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_writedata),         //  output,  width = 32,                                                           .writedata
		.tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount        (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount),        //  output,   width = 3,                                                           .burstcount
		.tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable        (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable),        //  output,   width = 4,                                                           .byteenable
		.tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid     (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid),     //   input,   width = 1,                                                           .readdatavalid
		.tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest       (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest),       //   input,   width = 1,                                                           .waitrequest
		.tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_lock              (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_lock),              //  output,   width = 1,                                                           .lock
		.tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess       (mm_interconnect_0_tx_iopll_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess),       //  output,   width = 1,                                                           .debugaccess
		.tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_address             (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_address),             //  output,  width = 12,       tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0.address
		.tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_write               (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_write),               //  output,   width = 1,                                                           .write
		.tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_read                (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_read),                //  output,   width = 1,                                                           .read
		.tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_readdata            (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_readdata),            //   input,  width = 32,                                                           .readdata
		.tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_writedata           (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_writedata),           //  output,  width = 32,                                                           .writedata
		.tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount          (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount),          //  output,   width = 3,                                                           .burstcount
		.tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable          (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable),          //  output,   width = 4,                                                           .byteenable
		.tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid       (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid),       //   input,   width = 1,                                                           .readdatavalid
		.tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest         (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest),         //   input,   width = 1,                                                           .waitrequest
		.tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_lock                (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_lock),                //  output,   width = 1,                                                           .lock
		.tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess         (mm_interconnect_0_tx_pll_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess),         //  output,   width = 1,                                                           .debugaccess
		.tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_address             (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_address),             //  output,  width = 14,       tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0.address
		.tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_write               (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_write),               //  output,   width = 1,                                                           .write
		.tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_read                (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_read),                //  output,   width = 1,                                                           .read
		.tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_readdata            (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_readdata),            //   input,  width = 32,                                                           .readdata
		.tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_writedata           (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_writedata),           //  output,  width = 32,                                                           .writedata
		.tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount          (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_burstcount),          //  output,   width = 3,                                                           .burstcount
		.tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable          (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_byteenable),          //  output,   width = 4,                                                           .byteenable
		.tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid       (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_readdatavalid),       //   input,   width = 1,                                                           .readdatavalid
		.tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest         (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_waitrequest),         //   input,   width = 1,                                                           .waitrequest
		.tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_lock                (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_lock),                //  output,   width = 1,                                                           .lock
		.tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess         (mm_interconnect_0_tx_pma_rcfg_mgmt_translator_avalon_universal_slave_0_debugaccess),         //  output,   width = 1,                                                           .debugaccess
		.edid_ram_slave_translator_avalon_universal_slave_0_address               (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_address),               //  output,  width = 11,         edid_ram_slave_translator_avalon_universal_slave_0.address
		.edid_ram_slave_translator_avalon_universal_slave_0_write                 (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_write),                 //  output,   width = 1,                                                           .write
		.edid_ram_slave_translator_avalon_universal_slave_0_read                  (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_read),                  //  output,   width = 1,                                                           .read
		.edid_ram_slave_translator_avalon_universal_slave_0_readdata              (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_readdata),              //   input,   width = 8,                                                           .readdata
		.edid_ram_slave_translator_avalon_universal_slave_0_writedata             (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_writedata),             //  output,   width = 8,                                                           .writedata
		.edid_ram_slave_translator_avalon_universal_slave_0_burstcount            (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_burstcount),            //  output,   width = 3,                                                           .burstcount
		.edid_ram_slave_translator_avalon_universal_slave_0_byteenable            (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_byteenable),            //  output,   width = 1,                                                           .byteenable
		.edid_ram_slave_translator_avalon_universal_slave_0_readdatavalid         (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_readdatavalid),         //   input,   width = 1,                                                           .readdatavalid
		.edid_ram_slave_translator_avalon_universal_slave_0_waitrequest           (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_waitrequest),           //   input,   width = 1,                                                           .waitrequest
		.edid_ram_slave_translator_avalon_universal_slave_0_lock                  (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_lock),                  //  output,   width = 1,                                                           .lock
		.edid_ram_slave_translator_avalon_universal_slave_0_debugaccess           (mm_interconnect_0_edid_ram_slave_translator_avalon_universal_slave_0_debugaccess),           //  output,   width = 1,                                                           .debugaccess
		.oc_i2c_master_av_slave_translator_avalon_universal_slave_0_address       (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_address),       //  output,   width = 5, oc_i2c_master_av_slave_translator_avalon_universal_slave_0.address
		.oc_i2c_master_av_slave_translator_avalon_universal_slave_0_write         (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_write),         //  output,   width = 1,                                                           .write
		.oc_i2c_master_av_slave_translator_avalon_universal_slave_0_read          (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_read),          //  output,   width = 1,                                                           .read
		.oc_i2c_master_av_slave_translator_avalon_universal_slave_0_readdata      (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_readdata),      //   input,  width = 32,                                                           .readdata
		.oc_i2c_master_av_slave_translator_avalon_universal_slave_0_writedata     (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_writedata),     //  output,  width = 32,                                                           .writedata
		.oc_i2c_master_av_slave_translator_avalon_universal_slave_0_burstcount    (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_burstcount),    //  output,   width = 3,                                                           .burstcount
		.oc_i2c_master_av_slave_translator_avalon_universal_slave_0_byteenable    (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_byteenable),    //  output,   width = 4,                                                           .byteenable
		.oc_i2c_master_av_slave_translator_avalon_universal_slave_0_readdatavalid (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_readdatavalid), //   input,   width = 1,                                                           .readdatavalid
		.oc_i2c_master_av_slave_translator_avalon_universal_slave_0_waitrequest   (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_waitrequest),   //   input,   width = 1,                                                           .waitrequest
		.oc_i2c_master_av_slave_translator_avalon_universal_slave_0_lock          (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_lock),          //  output,   width = 1,                                                           .lock
		.oc_i2c_master_av_slave_translator_avalon_universal_slave_0_debugaccess   (mm_interconnect_0_oc_i2c_master_av_slave_translator_avalon_universal_slave_0_debugaccess),   //  output,   width = 1,                                                           .debugaccess
		.oc_i2c_master_ti_avalon_universal_slave_0_address                        (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_address),                        //  output,   width = 5,                  oc_i2c_master_ti_avalon_universal_slave_0.address
		.oc_i2c_master_ti_avalon_universal_slave_0_write                          (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_write),                          //  output,   width = 1,                                                           .write
		.oc_i2c_master_ti_avalon_universal_slave_0_read                           (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_read),                           //  output,   width = 1,                                                           .read
		.oc_i2c_master_ti_avalon_universal_slave_0_readdata                       (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_readdata),                       //   input,  width = 32,                                                           .readdata
		.oc_i2c_master_ti_avalon_universal_slave_0_writedata                      (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_writedata),                      //  output,  width = 32,                                                           .writedata
		.oc_i2c_master_ti_avalon_universal_slave_0_burstcount                     (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_burstcount),                     //  output,   width = 3,                                                           .burstcount
		.oc_i2c_master_ti_avalon_universal_slave_0_byteenable                     (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_byteenable),                     //  output,   width = 4,                                                           .byteenable
		.oc_i2c_master_ti_avalon_universal_slave_0_readdatavalid                  (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_readdatavalid),                  //   input,   width = 1,                                                           .readdatavalid
		.oc_i2c_master_ti_avalon_universal_slave_0_waitrequest                    (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_waitrequest),                    //   input,   width = 1,                                                           .waitrequest
		.oc_i2c_master_ti_avalon_universal_slave_0_lock                           (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_lock),                           //  output,   width = 1,                                                           .lock
		.oc_i2c_master_ti_avalon_universal_slave_0_debugaccess                    (mm_interconnect_0_oc_i2c_master_ti_avalon_universal_slave_0_debugaccess),                    //  output,   width = 1,                                                           .debugaccess
		.sysid_qsys_0_control_slave_address                                       (mm_interconnect_0_sysid_qsys_0_control_slave_address),                                       //  output,   width = 1,                                 sysid_qsys_0_control_slave.address
		.sysid_qsys_0_control_slave_readdata                                      (mm_interconnect_0_sysid_qsys_0_control_slave_readdata),                                      //   input,  width = 32,                                                           .readdata
		.cpu_debug_mem_slave_address                                              (mm_interconnect_0_cpu_debug_mem_slave_address),                                              //  output,   width = 9,                                        cpu_debug_mem_slave.address
		.cpu_debug_mem_slave_write                                                (mm_interconnect_0_cpu_debug_mem_slave_write),                                                //  output,   width = 1,                                                           .write
		.cpu_debug_mem_slave_read                                                 (mm_interconnect_0_cpu_debug_mem_slave_read),                                                 //  output,   width = 1,                                                           .read
		.cpu_debug_mem_slave_readdata                                             (mm_interconnect_0_cpu_debug_mem_slave_readdata),                                             //   input,  width = 32,                                                           .readdata
		.cpu_debug_mem_slave_writedata                                            (mm_interconnect_0_cpu_debug_mem_slave_writedata),                                            //  output,  width = 32,                                                           .writedata
		.cpu_debug_mem_slave_byteenable                                           (mm_interconnect_0_cpu_debug_mem_slave_byteenable),                                           //  output,   width = 4,                                                           .byteenable
		.cpu_debug_mem_slave_waitrequest                                          (mm_interconnect_0_cpu_debug_mem_slave_waitrequest),                                          //   input,   width = 1,                                                           .waitrequest
		.cpu_debug_mem_slave_debugaccess                                          (mm_interconnect_0_cpu_debug_mem_slave_debugaccess),                                          //  output,   width = 1,                                                           .debugaccess
		.cpu_ram_s1_address                                                       (mm_interconnect_0_cpu_ram_s1_address),                                                       //  output,  width = 15,                                                 cpu_ram_s1.address
		.cpu_ram_s1_write                                                         (mm_interconnect_0_cpu_ram_s1_write),                                                         //  output,   width = 1,                                                           .write
		.cpu_ram_s1_readdata                                                      (mm_interconnect_0_cpu_ram_s1_readdata),                                                      //   input,  width = 32,                                                           .readdata
		.cpu_ram_s1_writedata                                                     (mm_interconnect_0_cpu_ram_s1_writedata),                                                     //  output,  width = 32,                                                           .writedata
		.cpu_ram_s1_byteenable                                                    (mm_interconnect_0_cpu_ram_s1_byteenable),                                                    //  output,   width = 4,                                                           .byteenable
		.cpu_ram_s1_chipselect                                                    (mm_interconnect_0_cpu_ram_s1_chipselect),                                                    //  output,   width = 1,                                                           .chipselect
		.cpu_ram_s1_clken                                                         (mm_interconnect_0_cpu_ram_s1_clken),                                                         //  output,   width = 1,                                                           .clken
		.edid_ram_access_pio_s1_address                                           (mm_interconnect_0_edid_ram_access_pio_s1_address),                                           //  output,   width = 2,                                     edid_ram_access_pio_s1.address
		.edid_ram_access_pio_s1_write                                             (mm_interconnect_0_edid_ram_access_pio_s1_write),                                             //  output,   width = 1,                                                           .write
		.edid_ram_access_pio_s1_readdata                                          (mm_interconnect_0_edid_ram_access_pio_s1_readdata),                                          //   input,  width = 32,                                                           .readdata
		.edid_ram_access_pio_s1_writedata                                         (mm_interconnect_0_edid_ram_access_pio_s1_writedata),                                         //  output,  width = 32,                                                           .writedata
		.edid_ram_access_pio_s1_chipselect                                        (mm_interconnect_0_edid_ram_access_pio_s1_chipselect),                                        //  output,   width = 1,                                                           .chipselect
		.measure_pio_s1_address                                                   (mm_interconnect_0_measure_pio_s1_address),                                                   //  output,   width = 2,                                             measure_pio_s1.address
		.measure_pio_s1_write                                                     (mm_interconnect_0_measure_pio_s1_write),                                                     //  output,   width = 1,                                                           .write
		.measure_pio_s1_readdata                                                  (mm_interconnect_0_measure_pio_s1_readdata),                                                  //   input,  width = 32,                                                           .readdata
		.measure_pio_s1_writedata                                                 (mm_interconnect_0_measure_pio_s1_writedata),                                                 //  output,  width = 32,                                                           .writedata
		.measure_pio_s1_chipselect                                                (mm_interconnect_0_measure_pio_s1_chipselect),                                                //  output,   width = 1,                                                           .chipselect
		.tx_os_pio_s1_address                                                     (mm_interconnect_0_tx_os_pio_s1_address),                                                     //  output,   width = 2,                                               tx_os_pio_s1.address
		.tx_os_pio_s1_write                                                       (mm_interconnect_0_tx_os_pio_s1_write),                                                       //  output,   width = 1,                                                           .write
		.tx_os_pio_s1_readdata                                                    (mm_interconnect_0_tx_os_pio_s1_readdata),                                                    //   input,  width = 32,                                                           .readdata
		.tx_os_pio_s1_writedata                                                   (mm_interconnect_0_tx_os_pio_s1_writedata),                                                   //  output,  width = 32,                                                           .writedata
		.tx_os_pio_s1_chipselect                                                  (mm_interconnect_0_tx_os_pio_s1_chipselect),                                                  //  output,   width = 1,                                                           .chipselect
		.measure_valid_pio_s1_address                                             (mm_interconnect_0_measure_valid_pio_s1_address),                                             //  output,   width = 2,                                       measure_valid_pio_s1.address
		.measure_valid_pio_s1_write                                               (mm_interconnect_0_measure_valid_pio_s1_write),                                               //  output,   width = 1,                                                           .write
		.measure_valid_pio_s1_readdata                                            (mm_interconnect_0_measure_valid_pio_s1_readdata),                                            //   input,  width = 32,                                                           .readdata
		.measure_valid_pio_s1_writedata                                           (mm_interconnect_0_measure_valid_pio_s1_writedata),                                           //  output,  width = 32,                                                           .writedata
		.measure_valid_pio_s1_chipselect                                          (mm_interconnect_0_measure_valid_pio_s1_chipselect),                                          //  output,   width = 1,                                                           .chipselect
		.tx_rst_pll_pio_s1_address                                                (mm_interconnect_0_tx_rst_pll_pio_s1_address),                                                //  output,   width = 2,                                          tx_rst_pll_pio_s1.address
		.tx_rst_pll_pio_s1_write                                                  (mm_interconnect_0_tx_rst_pll_pio_s1_write),                                                  //  output,   width = 1,                                                           .write
		.tx_rst_pll_pio_s1_readdata                                               (mm_interconnect_0_tx_rst_pll_pio_s1_readdata),                                               //   input,  width = 32,                                                           .readdata
		.tx_rst_pll_pio_s1_writedata                                              (mm_interconnect_0_tx_rst_pll_pio_s1_writedata),                                              //  output,  width = 32,                                                           .writedata
		.tx_rst_pll_pio_s1_chipselect                                             (mm_interconnect_0_tx_rst_pll_pio_s1_chipselect),                                             //  output,   width = 1,                                                           .chipselect
		.tx_rst_xcvr_pio_s1_address                                               (mm_interconnect_0_tx_rst_xcvr_pio_s1_address),                                               //  output,   width = 2,                                         tx_rst_xcvr_pio_s1.address
		.tx_rst_xcvr_pio_s1_write                                                 (mm_interconnect_0_tx_rst_xcvr_pio_s1_write),                                                 //  output,   width = 1,                                                           .write
		.tx_rst_xcvr_pio_s1_readdata                                              (mm_interconnect_0_tx_rst_xcvr_pio_s1_readdata),                                              //   input,  width = 32,                                                           .readdata
		.tx_rst_xcvr_pio_s1_writedata                                             (mm_interconnect_0_tx_rst_xcvr_pio_s1_writedata),                                             //  output,  width = 32,                                                           .writedata
		.tx_rst_xcvr_pio_s1_chipselect                                            (mm_interconnect_0_tx_rst_xcvr_pio_s1_chipselect),                                            //  output,   width = 1,                                                           .chipselect
		.tmds_bit_clock_ratio_pio_s1_address                                      (mm_interconnect_0_tmds_bit_clock_ratio_pio_s1_address),                                      //  output,   width = 2,                                tmds_bit_clock_ratio_pio_s1.address
		.tmds_bit_clock_ratio_pio_s1_write                                        (mm_interconnect_0_tmds_bit_clock_ratio_pio_s1_write),                                        //  output,   width = 1,                                                           .write
		.tmds_bit_clock_ratio_pio_s1_readdata                                     (mm_interconnect_0_tmds_bit_clock_ratio_pio_s1_readdata),                                     //   input,  width = 32,                                                           .readdata
		.tmds_bit_clock_ratio_pio_s1_writedata                                    (mm_interconnect_0_tmds_bit_clock_ratio_pio_s1_writedata),                                    //  output,  width = 32,                                                           .writedata
		.tmds_bit_clock_ratio_pio_s1_chipselect                                   (mm_interconnect_0_tmds_bit_clock_ratio_pio_s1_chipselect),                                   //  output,   width = 1,                                                           .chipselect
		.tx_iopll_waitrequest_pio_s1_address                                      (mm_interconnect_0_tx_iopll_waitrequest_pio_s1_address),                                      //  output,   width = 2,                                tx_iopll_waitrequest_pio_s1.address
		.tx_iopll_waitrequest_pio_s1_write                                        (mm_interconnect_0_tx_iopll_waitrequest_pio_s1_write),                                        //  output,   width = 1,                                                           .write
		.tx_iopll_waitrequest_pio_s1_readdata                                     (mm_interconnect_0_tx_iopll_waitrequest_pio_s1_readdata),                                     //   input,  width = 32,                                                           .readdata
		.tx_iopll_waitrequest_pio_s1_writedata                                    (mm_interconnect_0_tx_iopll_waitrequest_pio_s1_writedata),                                    //  output,  width = 32,                                                           .writedata
		.tx_iopll_waitrequest_pio_s1_chipselect                                   (mm_interconnect_0_tx_iopll_waitrequest_pio_s1_chipselect),                                   //  output,   width = 1,                                                           .chipselect
		.tx_pll_waitrequest_pio_s1_address                                        (mm_interconnect_0_tx_pll_waitrequest_pio_s1_address),                                        //  output,   width = 2,                                  tx_pll_waitrequest_pio_s1.address
		.tx_pll_waitrequest_pio_s1_write                                          (mm_interconnect_0_tx_pll_waitrequest_pio_s1_write),                                          //  output,   width = 1,                                                           .write
		.tx_pll_waitrequest_pio_s1_readdata                                       (mm_interconnect_0_tx_pll_waitrequest_pio_s1_readdata),                                       //   input,  width = 32,                                                           .readdata
		.tx_pll_waitrequest_pio_s1_writedata                                      (mm_interconnect_0_tx_pll_waitrequest_pio_s1_writedata),                                      //  output,  width = 32,                                                           .writedata
		.tx_pll_waitrequest_pio_s1_chipselect                                     (mm_interconnect_0_tx_pll_waitrequest_pio_s1_chipselect),                                     //  output,   width = 1,                                                           .chipselect
		.tx_pma_ch_s1_address                                                     (mm_interconnect_0_tx_pma_ch_s1_address),                                                     //  output,   width = 2,                                               tx_pma_ch_s1.address
		.tx_pma_ch_s1_write                                                       (mm_interconnect_0_tx_pma_ch_s1_write),                                                       //  output,   width = 1,                                                           .write
		.tx_pma_ch_s1_readdata                                                    (mm_interconnect_0_tx_pma_ch_s1_readdata),                                                    //   input,  width = 32,                                                           .readdata
		.tx_pma_ch_s1_writedata                                                   (mm_interconnect_0_tx_pma_ch_s1_writedata),                                                   //  output,  width = 32,                                                           .writedata
		.tx_pma_ch_s1_chipselect                                                  (mm_interconnect_0_tx_pma_ch_s1_chipselect),                                                  //  output,   width = 1,                                                           .chipselect
		.tx_pma_cal_busy_pio_s1_address                                           (mm_interconnect_0_tx_pma_cal_busy_pio_s1_address),                                           //  output,   width = 2,                                     tx_pma_cal_busy_pio_s1.address
		.tx_pma_cal_busy_pio_s1_write                                             (mm_interconnect_0_tx_pma_cal_busy_pio_s1_write),                                             //  output,   width = 1,                                                           .write
		.tx_pma_cal_busy_pio_s1_readdata                                          (mm_interconnect_0_tx_pma_cal_busy_pio_s1_readdata),                                          //   input,  width = 32,                                                           .readdata
		.tx_pma_cal_busy_pio_s1_writedata                                         (mm_interconnect_0_tx_pma_cal_busy_pio_s1_writedata),                                         //  output,  width = 32,                                                           .writedata
		.tx_pma_cal_busy_pio_s1_chipselect                                        (mm_interconnect_0_tx_pma_cal_busy_pio_s1_chipselect),                                        //  output,   width = 1,                                                           .chipselect
		.tx_rcfg_en_pio_s1_address                                                (mm_interconnect_0_tx_rcfg_en_pio_s1_address),                                                //  output,   width = 2,                                          tx_rcfg_en_pio_s1.address
		.tx_rcfg_en_pio_s1_write                                                  (mm_interconnect_0_tx_rcfg_en_pio_s1_write),                                                  //  output,   width = 1,                                                           .write
		.tx_rcfg_en_pio_s1_readdata                                               (mm_interconnect_0_tx_rcfg_en_pio_s1_readdata),                                               //   input,  width = 32,                                                           .readdata
		.tx_rcfg_en_pio_s1_writedata                                              (mm_interconnect_0_tx_rcfg_en_pio_s1_writedata),                                              //  output,  width = 32,                                                           .writedata
		.tx_rcfg_en_pio_s1_chipselect                                             (mm_interconnect_0_tx_rcfg_en_pio_s1_chipselect),                                             //  output,   width = 1,                                                           .chipselect
		.tx_pma_waitrequest_pio_s1_address                                        (mm_interconnect_0_tx_pma_waitrequest_pio_s1_address),                                        //  output,   width = 2,                                  tx_pma_waitrequest_pio_s1.address
		.tx_pma_waitrequest_pio_s1_write                                          (mm_interconnect_0_tx_pma_waitrequest_pio_s1_write),                                          //  output,   width = 1,                                                           .write
		.tx_pma_waitrequest_pio_s1_readdata                                       (mm_interconnect_0_tx_pma_waitrequest_pio_s1_readdata),                                       //   input,  width = 32,                                                           .readdata
		.tx_pma_waitrequest_pio_s1_writedata                                      (mm_interconnect_0_tx_pma_waitrequest_pio_s1_writedata),                                      //  output,  width = 32,                                                           .writedata
		.tx_pma_waitrequest_pio_s1_chipselect                                     (mm_interconnect_0_tx_pma_waitrequest_pio_s1_chipselect),                                     //  output,   width = 1,                                                           .chipselect
		.wd_timer_s1_address                                                      (mm_interconnect_0_wd_timer_s1_address),                                                      //  output,   width = 3,                                                wd_timer_s1.address
		.wd_timer_s1_write                                                        (mm_interconnect_0_wd_timer_s1_write),                                                        //  output,   width = 1,                                                           .write
		.wd_timer_s1_readdata                                                     (mm_interconnect_0_wd_timer_s1_readdata),                                                     //   input,  width = 16,                                                           .readdata
		.wd_timer_s1_writedata                                                    (mm_interconnect_0_wd_timer_s1_writedata),                                                    //  output,  width = 16,                                                           .writedata
		.wd_timer_s1_chipselect                                                   (mm_interconnect_0_wd_timer_s1_chipselect),                                                   //  output,   width = 1,                                                           .chipselect
		.tx_hpd_req_pio_s1_address                                                (mm_interconnect_0_tx_hpd_req_pio_s1_address),                                                //  output,   width = 2,                                          tx_hpd_req_pio_s1.address
		.tx_hpd_req_pio_s1_write                                                  (mm_interconnect_0_tx_hpd_req_pio_s1_write),                                                  //  output,   width = 1,                                                           .write
		.tx_hpd_req_pio_s1_readdata                                               (mm_interconnect_0_tx_hpd_req_pio_s1_readdata),                                               //   input,  width = 32,                                                           .readdata
		.tx_hpd_req_pio_s1_writedata                                              (mm_interconnect_0_tx_hpd_req_pio_s1_writedata),                                              //  output,  width = 32,                                                           .writedata
		.tx_hpd_req_pio_s1_chipselect                                             (mm_interconnect_0_tx_hpd_req_pio_s1_chipselect),                                             //  output,   width = 1,                                                           .chipselect
		.tx_hpd_ack_pio_s1_address                                                (mm_interconnect_0_tx_hpd_ack_pio_s1_address),                                                //  output,   width = 2,                                          tx_hpd_ack_pio_s1.address
		.tx_hpd_ack_pio_s1_write                                                  (mm_interconnect_0_tx_hpd_ack_pio_s1_write),                                                  //  output,   width = 1,                                                           .write
		.tx_hpd_ack_pio_s1_readdata                                               (mm_interconnect_0_tx_hpd_ack_pio_s1_readdata),                                               //   input,  width = 32,                                                           .readdata
		.tx_hpd_ack_pio_s1_writedata                                              (mm_interconnect_0_tx_hpd_ack_pio_s1_writedata),                                              //  output,  width = 32,                                                           .writedata
		.tx_hpd_ack_pio_s1_chipselect                                             (mm_interconnect_0_tx_hpd_ack_pio_s1_chipselect),                                             //  output,   width = 1,                                                           .chipselect
		.color_depth_pio_s1_address                                               (mm_interconnect_0_color_depth_pio_s1_address),                                               //  output,   width = 2,                                         color_depth_pio_s1.address
		.color_depth_pio_s1_write                                                 (mm_interconnect_0_color_depth_pio_s1_write),                                                 //  output,   width = 1,                                                           .write
		.color_depth_pio_s1_readdata                                              (mm_interconnect_0_color_depth_pio_s1_readdata),                                              //   input,  width = 32,                                                           .readdata
		.color_depth_pio_s1_writedata                                             (mm_interconnect_0_color_depth_pio_s1_writedata),                                             //  output,  width = 32,                                                           .writedata
		.color_depth_pio_s1_chipselect                                            (mm_interconnect_0_color_depth_pio_s1_chipselect),                                            //  output,   width = 1,                                                           .chipselect
		.cpu_reset_reset_bridge_in_reset_reset                                    (rst_controller_001_reset_out_reset),                                                         //   input,   width = 1,                            cpu_reset_reset_bridge_in_reset.reset
		.jtag_uart_0_reset_reset_bridge_in_reset_reset                            (rst_controller_reset_out_reset),                                                             //   input,   width = 1,                    jtag_uart_0_reset_reset_bridge_in_reset.reset
		.cpu_clk_clk_clk                                                          (cpu_clk_clk_clk)                                                                             //   input,   width = 1,                                                cpu_clk_clk.clk
	);

	nios_altera_irq_mapper_181_jckmpui irq_mapper (
		.clk            (cpu_clk_clk_clk),                    //   input,   width = 1,        clk.clk
		.reset          (rst_controller_001_reset_out_reset), //   input,   width = 1,  clk_reset.reset
		.receiver0_irq  (irq_mapper_receiver0_irq),           //   input,   width = 1,  receiver0.irq
		.receiver1_irq  (irq_mapper_receiver1_irq),           //   input,   width = 1,  receiver1.irq
		.receiver2_irq  (irq_mapper_receiver2_irq),           //   input,   width = 1,  receiver2.irq
		.receiver3_irq  (irq_mapper_receiver3_irq),           //   input,   width = 1,  receiver3.irq
		.receiver4_irq  (irq_mapper_receiver4_irq),           //   input,   width = 1,  receiver4.irq
		.receiver5_irq  (irq_mapper_receiver5_irq),           //   input,   width = 1,  receiver5.irq
		.receiver6_irq  (irq_mapper_receiver6_irq),           //   input,   width = 1,  receiver6.irq
		.receiver7_irq  (irq_mapper_receiver7_irq),           //   input,   width = 1,  receiver7.irq
		.receiver8_irq  (irq_mapper_receiver8_irq),           //   input,   width = 1,  receiver8.irq
		.receiver9_irq  (irq_mapper_receiver9_irq),           //   input,   width = 1,  receiver9.irq
		.receiver10_irq (irq_mapper_receiver10_irq),          //   input,   width = 1, receiver10.irq
		.sender_irq     (cpu_irq_irq)                         //  output,  width = 32,     sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~cpu_clk_clk_reset_reset),           //   input,  width = 1, reset_in0.reset
		.clk            (cpu_clk_clk_clk),                    //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     //  output,  width = 1, reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //  output,  width = 1,          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~cpu_clk_clk_reset_reset),               //   input,  width = 1, reset_in0.reset
		.reset_in1      (cpu_debug_reset_request_reset),          //   input,  width = 1, reset_in1.reset
		.clk            (cpu_clk_clk_clk),                        //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset),     //  output,  width = 1, reset_out.reset
		.reset_req      (rst_controller_001_reset_out_reset_req), //  output,  width = 1,          .reset_req
		.reset_req_in0  (1'b0),                                   // (terminated),                       
		.reset_req_in1  (1'b0),                                   // (terminated),                       
		.reset_in2      (1'b0),                                   // (terminated),                       
		.reset_req_in2  (1'b0),                                   // (terminated),                       
		.reset_in3      (1'b0),                                   // (terminated),                       
		.reset_req_in3  (1'b0),                                   // (terminated),                       
		.reset_in4      (1'b0),                                   // (terminated),                       
		.reset_req_in4  (1'b0),                                   // (terminated),                       
		.reset_in5      (1'b0),                                   // (terminated),                       
		.reset_req_in5  (1'b0),                                   // (terminated),                       
		.reset_in6      (1'b0),                                   // (terminated),                       
		.reset_req_in6  (1'b0),                                   // (terminated),                       
		.reset_in7      (1'b0),                                   // (terminated),                       
		.reset_req_in7  (1'b0),                                   // (terminated),                       
		.reset_in8      (1'b0),                                   // (terminated),                       
		.reset_req_in8  (1'b0),                                   // (terminated),                       
		.reset_in9      (1'b0),                                   // (terminated),                       
		.reset_req_in9  (1'b0),                                   // (terminated),                       
		.reset_in10     (1'b0),                                   // (terminated),                       
		.reset_req_in10 (1'b0),                                   // (terminated),                       
		.reset_in11     (1'b0),                                   // (terminated),                       
		.reset_req_in11 (1'b0),                                   // (terminated),                       
		.reset_in12     (1'b0),                                   // (terminated),                       
		.reset_req_in12 (1'b0),                                   // (terminated),                       
		.reset_in13     (1'b0),                                   // (terminated),                       
		.reset_req_in13 (1'b0),                                   // (terminated),                       
		.reset_in14     (1'b0),                                   // (terminated),                       
		.reset_req_in14 (1'b0),                                   // (terminated),                       
		.reset_in15     (1'b0),                                   // (terminated),                       
		.reset_req_in15 (1'b0)                                    // (terminated),                       
	);

endmodule
