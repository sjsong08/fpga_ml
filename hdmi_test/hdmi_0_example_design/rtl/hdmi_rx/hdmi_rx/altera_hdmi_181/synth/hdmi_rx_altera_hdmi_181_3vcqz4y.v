// hdmi_rx_altera_hdmi_181_3vcqz4y.v

// This file was auto-generated from altera_hdmi_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 222

`timescale 1 ps / 1 ps
module hdmi_rx_altera_hdmi_181_3vcqz4y #(
		parameter       FAMILY               = "Cyclone 10 GX",
		parameter       SYMBOLS_PER_CLOCK    = 2,
		parameter       DISABLE_ALIGN_DESKEW = 0,
		parameter       SUPPORT_AUXILIARY    = 0,
		parameter       SUPPORT_DEEP_COLOR   = 0,
		parameter       SUPPORT_AUDIO        = 0,
		parameter       SUPPORT_32CHAN_AUDIO = 0,
		parameter[23:0] SCDC_IEEE_ID         = 24'b000000000000000000000000,
		parameter[63:0] SCDC_DEVICE_STRING   = 64'b0000000000000000000000000000000000000000000000000000000000000000,
		parameter[7:0]  SCDC_HW_REVISION     = 8'b00000000
	) (
		input  wire                              reset,                //                reset.export
		input  wire                              vid_clk,              //              vid_clk.export
		input  wire [2:0]                        ls_clk,               //               ls_clk.export
		output wire [2:0]                        locked,               //               locked.export
		output wire                              mode,                 //                 mode.export
		output wire [(6*SYMBOLS_PER_CLOCK)-1:0]  ctrl,                 //                 ctrl.export
		output wire                              vid_lock,             //             vid_lock.export
		output wire [(1*SYMBOLS_PER_CLOCK)-1:0]  vid_de,               //               vid_de.export
		output wire [(48*SYMBOLS_PER_CLOCK)-1:0] vid_data,             //             vid_data.export
		output wire [(1*SYMBOLS_PER_CLOCK)-1:0]  vid_hsync,            //            vid_hsync.export
		output wire [(1*SYMBOLS_PER_CLOCK)-1:0]  vid_vsync,            //            vid_vsync.export
		input  wire [(10*SYMBOLS_PER_CLOCK)-1:0] in_b,                 //                 in_b.export
		input  wire [(10*SYMBOLS_PER_CLOCK)-1:0] in_r,                 //                 in_r.export
		input  wire [(10*SYMBOLS_PER_CLOCK)-1:0] in_g,                 //                 in_g.export
		input  wire [2:0]                        in_lock,              //              in_lock.export
		input  wire                              scdc_i2c_clk,         //         scdc_i2c_clk.clk
		input  wire [7:0]                        scdc_i2c_addr,        //        scdc_i2c_addr.export
		input  wire [7:0]                        scdc_i2c_wdata,       //       scdc_i2c_wdata.export
		input  wire                              scdc_i2c_r,           //           scdc_i2c_r.export
		input  wire                              scdc_i2c_w,           //           scdc_i2c_w.export
		output wire [7:0]                        scdc_i2c_rdata,       //       scdc_i2c_rdata.export
		output wire                              TMDS_Bit_clock_Ratio, // TMDS_Bit_clock_Ratio.export
		input  wire                              in_5v_power,          //          in_5v_power.export
		input  wire                              in_hpd                //               in_hpd.export
	);

	generate
		// If any of the display statements (or deliberately broken
		// instantiations) within this generate block triggers then this module
		// has been instantiated this module with a set of parameters different
		// from those it was generated for.  This will usually result in a
		// non-functioning system.
		if (FAMILY != "Cyclone 10 GX")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					family_check ( .error(1'b1) );
		end
		if (SYMBOLS_PER_CLOCK != 2)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					symbols_per_clock_check ( .error(1'b1) );
		end
		if (DISABLE_ALIGN_DESKEW != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					disable_align_deskew_check ( .error(1'b1) );
		end
		if (SUPPORT_AUXILIARY != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					support_auxiliary_check ( .error(1'b1) );
		end
		if (SUPPORT_DEEP_COLOR != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					support_deep_color_check ( .error(1'b1) );
		end
		if (SUPPORT_AUDIO != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					support_audio_check ( .error(1'b1) );
		end
		if (SUPPORT_32CHAN_AUDIO != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					support_32chan_audio_check ( .error(1'b1) );
		end
		if (SCDC_IEEE_ID != 24'b000000000000000000000000)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					scdc_ieee_id_check ( .error(1'b1) );
		end
		if (SCDC_DEVICE_STRING != 64'b0000000000000000000000000000000000000000000000000000000000000000)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					scdc_device_string_check ( .error(1'b1) );
		end
		if (SCDC_HW_REVISION != 8'b00000000)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					scdc_hw_revision_check ( .error(1'b1) );
		end
	endgenerate

	bitec_hdmi_rx #(
		.FAMILY               ("Cyclone 10 GX"),
		.SYMBOLS_PER_CLOCK    (2),
		.DISABLE_ALIGN_DESKEW (0),
		.SUPPORT_AUXILIARY    (0),
		.SUPPORT_DEEP_COLOR   (0),
		.SUPPORT_AUDIO        (0),
		.SUPPORT_32CHAN_AUDIO (0),
		.SCDC_IEEE_ID         (24'b000000000000000000000000),
		.SCDC_DEVICE_STRING   (64'b0000000000000000000000000000000000000000000000000000000000000000),
		.SCDC_HW_REVISION     (8'b00000000)
	) u_bitec_hdmi_rx (
		.reset                (reset),                                                                //   input,   width = 1,                reset.export
		.vid_clk              (vid_clk),                                                              //   input,   width = 1,              vid_clk.export
		.ls_clk               (ls_clk),                                                               //   input,   width = 3,               ls_clk.export
		.locked               (locked),                                                               //  output,   width = 3,               locked.export
		.mode                 (mode),                                                                 //  output,   width = 1,                 mode.export
		.ctrl                 (ctrl),                                                                 //  output,  width = 12,                 ctrl.export
		.vid_lock             (vid_lock),                                                             //  output,   width = 1,             vid_lock.export
		.vid_de               (vid_de),                                                               //  output,   width = 2,               vid_de.export
		.vid_data             (vid_data),                                                             //  output,  width = 96,             vid_data.export
		.vid_hsync            (vid_hsync),                                                            //  output,   width = 2,            vid_hsync.export
		.vid_vsync            (vid_vsync),                                                            //  output,   width = 2,            vid_vsync.export
		.in_b                 (in_b),                                                                 //   input,  width = 20,                 in_b.export
		.in_r                 (in_r),                                                                 //   input,  width = 20,                 in_r.export
		.in_g                 (in_g),                                                                 //   input,  width = 20,                 in_g.export
		.in_lock              (in_lock),                                                              //   input,   width = 3,              in_lock.export
		.scdc_i2c_clk         (scdc_i2c_clk),                                                         //   input,   width = 1,         scdc_i2c_clk.clk
		.scdc_i2c_addr        (scdc_i2c_addr),                                                        //   input,   width = 8,        scdc_i2c_addr.export
		.scdc_i2c_wdata       (scdc_i2c_wdata),                                                       //   input,   width = 8,       scdc_i2c_wdata.export
		.scdc_i2c_r           (scdc_i2c_r),                                                           //   input,   width = 1,           scdc_i2c_r.export
		.scdc_i2c_w           (scdc_i2c_w),                                                           //   input,   width = 1,           scdc_i2c_w.export
		.scdc_i2c_rdata       (scdc_i2c_rdata),                                                       //  output,   width = 8,       scdc_i2c_rdata.export
		.TMDS_Bit_clock_Ratio (TMDS_Bit_clock_Ratio),                                                 //  output,   width = 1, TMDS_Bit_clock_Ratio.export
		.in_5v_power          (in_5v_power),                                                          //   input,   width = 1,          in_5v_power.export
		.in_hpd               (in_hpd),                                                               //   input,   width = 1,               in_hpd.export
		.aux_valid            (),                                                                     // (terminated),                                   
		.aux_data             (),                                                                     // (terminated),                                   
		.aux_sop              (),                                                                     // (terminated),                                   
		.aux_eop              (),                                                                     // (terminated),                                   
		.aux_error            (),                                                                     // (terminated),                                   
		.gcp                  (),                                                                     // (terminated),                                   
		.info_avi             (),                                                                     // (terminated),                                   
		.info_vsi             (),                                                                     // (terminated),                                   
		.aux_pkt_addr         (),                                                                     // (terminated),                                   
		.aux_pkt_data         (),                                                                     // (terminated),                                   
		.aux_pkt_wr           (),                                                                     // (terminated),                                   
		.audio_CTS            (),                                                                     // (terminated),                                   
		.audio_N              (),                                                                     // (terminated),                                   
		.audio_data           (),                                                                     // (terminated),                                   
		.audio_de             (),                                                                     // (terminated),                                   
		.audio_info_ai        (),                                                                     // (terminated),                                   
		.audio_metadata       (),                                                                     // (terminated),                                   
		.audio_format         (),                                                                     // (terminated),                                   
		.version              (),                                                                     // (terminated),                                   
		.raw_data             (),                                                                     // (terminated),                                   
		.err_count_b          (),                                                                     // (terminated),                                   
		.err_count_g          (),                                                                     // (terminated),                                   
		.err_count_r          (),                                                                     // (terminated),                                   
		.BKeys                (56'b00000000000000000000000000000000000000000000000000000000),         // (terminated),                                   
		.BKeys_sel            (),                                                                     // (terminated),                                   
		.BKeys_ksv            (40'b0000000000000000000000000000000000000000),                         // (terminated),                                   
		.hdcp_i2c_clk         (1'b0),                                                                 // (terminated),                                   
		.hdcp_i2c_addr        (8'b00000000),                                                          // (terminated),                                   
		.hdcp_i2c_rdata       (),                                                                     // (terminated),                                   
		.hdcp_i2c_wdata       (8'b00000000),                                                          // (terminated),                                   
		.hdcp_i2c_r           (1'b0),                                                                 // (terminated),                                   
		.hdcp_i2c_w           (1'b0),                                                                 // (terminated),                                   
		.hdcp1_enable         (),                                                                     // (terminated),                                   
		.rsa_clk              (1'b0),                                                                 // (terminated),                                   
		.rsa_dat              (32'b00000000000000000000000000000000),                                 // (terminated),                                   
		.rsa_add              (),                                                                     // (terminated),                                   
		.rsa_rd               (),                                                                     // (terminated),                                   
		.rsa_wait             (1'b0),                                                                 // (terminated),                                   
		.hdcp2_enable         (),                                                                     // (terminated),                                   
		.hdcp2_dbg_clk        (),                                                                     // (terminated),                                   
		.hdcp2_dbg_msg_id     (),                                                                     // (terminated),                                   
		.hdcp2_dbg_msg_data   (),                                                                     // (terminated),                                   
		.hdcp2_dbg_valid      (),                                                                     // (terminated),                                   
		.hdcp2_dbg_flush      (),                                                                     // (terminated),                                   
		.hdcp_i2c_w_som       (1'b0),                                                                 // (terminated),                                   
		.hdcp_i2c_wait        (),                                                                     // (terminated),                                   
		.hdcp1_auth           (),                                                                     // (terminated),                                   
		.hdcp2_auth           (),                                                                     // (terminated),                                   
		.hdcp_kmem_dat        (64'b0000000000000000000000000000000000000000000000000000000000000000), // (terminated),                                   
		.hdcp_kmem_add        (),                                                                     // (terminated),                                   
		.hdcp_kmem_rd         (),                                                                     // (terminated),                                   
		.hdcp_kmem_wait       (2'b00)                                                                 // (terminated),                                   
	);

endmodule
