// hdmi_rx.v

// Generated using ACDS version 18.1 222

`timescale 1 ps / 1 ps
module hdmi_rx (
		input  wire        reset,                //                reset.export
		input  wire        vid_clk,              //              vid_clk.export
		input  wire [2:0]  ls_clk,               //               ls_clk.export
		output wire [2:0]  locked,               //               locked.export
		output wire        mode,                 //                 mode.export
		output wire [11:0] ctrl,                 //                 ctrl.export
		output wire        vid_lock,             //             vid_lock.export
		output wire [1:0]  vid_de,               //               vid_de.export
		output wire [95:0] vid_data,             //             vid_data.export
		output wire [1:0]  vid_hsync,            //            vid_hsync.export
		output wire [1:0]  vid_vsync,            //            vid_vsync.export
		input  wire [19:0] in_b,                 //                 in_b.export
		input  wire [19:0] in_r,                 //                 in_r.export
		input  wire [19:0] in_g,                 //                 in_g.export
		input  wire [2:0]  in_lock,              //              in_lock.export
		input  wire        scdc_i2c_clk,         //         scdc_i2c_clk.clk
		input  wire [7:0]  scdc_i2c_addr,        //        scdc_i2c_addr.export
		input  wire [7:0]  scdc_i2c_wdata,       //       scdc_i2c_wdata.export
		input  wire        scdc_i2c_r,           //           scdc_i2c_r.export
		input  wire        scdc_i2c_w,           //           scdc_i2c_w.export
		output wire [7:0]  scdc_i2c_rdata,       //       scdc_i2c_rdata.export
		output wire        TMDS_Bit_clock_Ratio, // TMDS_Bit_clock_Ratio.export
		input  wire        in_5v_power,          //          in_5v_power.export
		input  wire        in_hpd                //               in_hpd.export
	);

	hdmi_rx_altera_hdmi_181_3vcqz4y #(
		.FAMILY               ("Cyclone 10 GX"),
		.SYMBOLS_PER_CLOCK    (2),
		.DISABLE_ALIGN_DESKEW (0),
		.SUPPORT_AUXILIARY    (0),
		.SUPPORT_DEEP_COLOR   (0),
		.SUPPORT_AUDIO        (0),
		.SUPPORT_32CHAN_AUDIO (0),
		.SCDC_IEEE_ID         (24'b000000000000000000000000),
		.SCDC_DEVICE_STRING   (64'b0000000000000000000000000000000000000000000000000000000000000000),
		.SCDC_HW_REVISION     (8'b00000000)
	) hdmi_rx (
		.reset                (reset),                //   input,   width = 1,                reset.export
		.vid_clk              (vid_clk),              //   input,   width = 1,              vid_clk.export
		.ls_clk               (ls_clk),               //   input,   width = 3,               ls_clk.export
		.locked               (locked),               //  output,   width = 3,               locked.export
		.mode                 (mode),                 //  output,   width = 1,                 mode.export
		.ctrl                 (ctrl),                 //  output,  width = 12,                 ctrl.export
		.vid_lock             (vid_lock),             //  output,   width = 1,             vid_lock.export
		.vid_de               (vid_de),               //  output,   width = 2,               vid_de.export
		.vid_data             (vid_data),             //  output,  width = 96,             vid_data.export
		.vid_hsync            (vid_hsync),            //  output,   width = 2,            vid_hsync.export
		.vid_vsync            (vid_vsync),            //  output,   width = 2,            vid_vsync.export
		.in_b                 (in_b),                 //   input,  width = 20,                 in_b.export
		.in_r                 (in_r),                 //   input,  width = 20,                 in_r.export
		.in_g                 (in_g),                 //   input,  width = 20,                 in_g.export
		.in_lock              (in_lock),              //   input,   width = 3,              in_lock.export
		.scdc_i2c_clk         (scdc_i2c_clk),         //   input,   width = 1,         scdc_i2c_clk.clk
		.scdc_i2c_addr        (scdc_i2c_addr),        //   input,   width = 8,        scdc_i2c_addr.export
		.scdc_i2c_wdata       (scdc_i2c_wdata),       //   input,   width = 8,       scdc_i2c_wdata.export
		.scdc_i2c_r           (scdc_i2c_r),           //   input,   width = 1,           scdc_i2c_r.export
		.scdc_i2c_w           (scdc_i2c_w),           //   input,   width = 1,           scdc_i2c_w.export
		.scdc_i2c_rdata       (scdc_i2c_rdata),       //  output,   width = 8,       scdc_i2c_rdata.export
		.TMDS_Bit_clock_Ratio (TMDS_Bit_clock_Ratio), //  output,   width = 1, TMDS_Bit_clock_Ratio.export
		.in_5v_power          (in_5v_power),          //   input,   width = 1,          in_5v_power.export
		.in_hpd               (in_hpd)                //   input,   width = 1,               in_hpd.export
	);

endmodule
